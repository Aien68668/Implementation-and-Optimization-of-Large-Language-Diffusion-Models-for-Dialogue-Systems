=== LLaDA 后端服务日志 ===
启动时间: Sun Jul 13 20:55:04 CST 2025
日志会话: 20250713_205459
Python版本: Python 3.12.3
工作目录: /root/LLaDA-main/lldm
设备检测: CUDA可用: True
==========================

2025-07-13 20:55:07 - INFO - [server.py:97] - 初始化设备: cuda
2025-07-13 20:55:07 - INFO - [server.py:97] - 初始化设备: cuda
2025-07-13 20:55:07 - INFO - [server.py:104] - GPU总内存: 23.5GB
2025-07-13 20:55:07 - INFO - [server.py:104] - GPU总内存: 23.5GB
2025-07-13 20:55:07 - INFO - [server.py:107] - 开始加载tokenizer...
2025-07-13 20:55:07 - INFO - [server.py:107] - 开始加载tokenizer...
2025-07-13 20:55:08 - INFO - [server.py:109] - Tokenizer加载成功
2025-07-13 20:55:08 - INFO - [server.py:109] - Tokenizer加载成功
2025-07-13 20:55:08 - INFO - [server.py:111] - 开始加载模型...
2025-07-13 20:55:08 - INFO - [server.py:111] - 开始加载模型...
2025-07-13 20:55:09 - INFO - [modeling.py:991] - We will use 90% of the memory on device 0 for storing the model, and 10% for the buffer to avoid OOM. You can set `max_memory` in to a higher value to use more memory (at your own risk).
2025-07-13 20:55:09 - INFO - [modeling.py:991] - We will use 90% of the memory on device 0 for storing the model, and 10% for the buffer to avoid OOM. You can set `max_memory` in to a higher value to use more memory (at your own risk).
2025-07-13 20:55:09 - WARNING - [modeling.py:1114] - The model weights are not tied. Please use the `tie_weights` method before using the `infer_auto_device` function.
2025-07-13 20:55:09 - WARNING - [modeling.py:1114] - The model weights are not tied. Please use the `tie_weights` method before using the `infer_auto_device` function.
Loading checkpoint shards:   0%|          | 0/6 [00:00<?, ?it/s]Loading checkpoint shards:  17%|█▋        | 1/6 [00:00<00:02,  1.87it/s]Loading checkpoint shards:  33%|███▎      | 2/6 [00:01<00:02,  1.48it/s]Loading checkpoint shards:  50%|█████     | 3/6 [00:02<00:02,  1.35it/s]Loading checkpoint shards:  67%|██████▋   | 4/6 [00:02<00:01,  1.32it/s]Loading checkpoint shards:  83%|████████▎ | 5/6 [00:03<00:00,  1.29it/s]Loading checkpoint shards: 100%|██████████| 6/6 [00:04<00:00,  1.42it/s]Loading checkpoint shards: 100%|██████████| 6/6 [00:04<00:00,  1.40it/s]
2025-07-13 20:55:13 - INFO - [server.py:129] - 模型加载成功，设备: cuda
2025-07-13 20:55:13 - INFO - [server.py:129] - 模型加载成功，设备: cuda
2025-07-13 20:55:13 - INFO - [server.py:132] - GPU已分配内存: 14.9GB
2025-07-13 20:55:13 - INFO - [server.py:132] - GPU已分配内存: 14.9GB
 * Serving Flask app 'server'
 * Debug mode: off
2025-07-13 20:55:13 - INFO - [_internal.py:97] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:9000
 * Running on http://172.17.0.3:9000
2025-07-13 20:55:13 - INFO - [_internal.py:97] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:9000
 * Running on http://172.17.0.3:9000
2025-07-13 20:55:13 - INFO - [_internal.py:97] - [33mPress CTRL+C to quit[0m
2025-07-13 20:55:13 - INFO - [_internal.py:97] - [33mPress CTRL+C to quit[0m
2025-07-13 20:55:14 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "curl/7.81.0",
  "timestamp": "2025-07-13T20:55:14.278826"
}
2025-07-13 20:55:14 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "curl/7.81.0",
  "timestamp": "2025-07-13T20:55:14.278826"
}
2025-07-13 20:55:14 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:14.279670",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:55:14 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:14.279670",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:55:14 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:14] "GET /health HTTP/1.1" 200 -
2025-07-13 20:55:14 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:14] "GET /health HTTP/1.1" 200 -
2025-07-13 20:55:23 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:55:23.897186"
}
2025-07-13 20:55:23 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:55:23.897186"
}
2025-07-13 20:55:23 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:23.898110",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:55:23 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:23.898110",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:55:23 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:23] "GET /health HTTP/1.1" 200 -
2025-07-13 20:55:23 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:23] "GET /health HTTP/1.1" 200 -
2025-07-13 20:55:24 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:55:24.904842",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      }
    ],
    "settings": {
      "gen_length": 16,
      "steps": 8,
      "temperature": 0.0,
      "cfg_scale": 0.0
    }
  }
}
2025-07-13 20:55:24 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:55:24.904842",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      }
    ],
    "settings": {
      "gen_length": 16,
      "steps": 8,
      "temperature": 0.0,
      "cfg_scale": 0.0
    }
  }
}
2025-07-13 20:55:24 - INFO - [server.py:443] - [req_1752411324905] 收到生成请求
2025-07-13 20:55:24 - INFO - [server.py:443] - [req_1752411324905] 收到生成请求
2025-07-13 20:55:24 - INFO - [server.py:451] - [req_1752411324905] 请求数据详情:
2025-07-13 20:55:24 - INFO - [server.py:451] - [req_1752411324905] 请求数据详情:
2025-07-13 20:55:24 - INFO - [server.py:452] - [req_1752411324905] - 消息数量: 1
2025-07-13 20:55:24 - INFO - [server.py:452] - [req_1752411324905] - 消息数量: 1
2025-07-13 20:55:24 - INFO - [server.py:453] - [req_1752411324905] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:55:24 - INFO - [server.py:453] - [req_1752411324905] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:55:24 - DEBUG - [server.py:454] - [req_1752411324905] - 完整消息列表: [
  {
    "role": "user",
    "content": "你好"
  }
]
2025-07-13 20:55:24 - INFO - [server.py:465] - [req_1752411324905] 开始生成响应...
2025-07-13 20:55:24 - INFO - [server.py:465] - [req_1752411324905] 开始生成响应...
2025-07-13 20:55:24 - INFO - [server.py:201] - ============================================================
2025-07-13 20:55:24 - INFO - [server.py:201] - ============================================================
2025-07-13 20:55:24 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:55:24 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:55:24 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:55:24 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:55:24 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:55:24 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:55:24 - DEBUG - [server.py:206] - 消息 1 内容: 你好
2025-07-13 20:55:24 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:55:24 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:55:24 - INFO - [server.py:220] - 解析后的约束: {}
2025-07-13 20:55:24 - INFO - [server.py:220] - 解析后的约束: {}
2025-07-13 20:55:24 - INFO - [server.py:225] - 生成前GPU内存使用: 14.93GB
2025-07-13 20:55:24 - INFO - [server.py:225] - 生成前GPU内存使用: 14.93GB
2025-07-13 20:55:24 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:55:24 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:55:24 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

你好<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:55:24 - INFO - [server.py:234] - 输入token数量: 14
2025-07-13 20:55:24 - INFO - [server.py:234] - 输入token数量: 14
2025-07-13 20:55:24 - INFO - [server.py:241] - 序列总长度: 30, prompt长度: 14, 生成长度: 16
2025-07-13 20:55:24 - INFO - [server.py:241] - 序列总长度: 30, prompt长度: 14, 生成长度: 16
2025-07-13 20:55:24 - INFO - [server.py:250] - 应用约束数量: 0
2025-07-13 20:55:24 - INFO - [server.py:250] - 应用约束数量: 0
2025-07-13 20:55:24 - INFO - [server.py:270] - 块处理配置: 块长度=16, 块数量=1, 每块步数=8
2025-07-13 20:55:24 - INFO - [server.py:270] - 块处理配置: 块长度=16, 块数量=1, 每块步数=8
2025-07-13 20:55:24 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:55:24 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:55:24 - DEBUG - [server.py:289] - 块 1, 步骤 1/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 2/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 3/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 4/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 5/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 6/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 7/8
2025-07-13 20:55:25 - DEBUG - [server.py:289] - 块 1, 步骤 8/8
2025-07-13 20:55:25 - INFO - [server.py:395] - 生成后GPU内存使用: 15.36GB
2025-07-13 20:55:25 - INFO - [server.py:395] - 生成后GPU内存使用: 15.36GB
2025-07-13 20:55:25 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:55:25 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:55:25 - INFO - [server.py:398] - 响应文本长度: 17
2025-07-13 20:55:25 - INFO - [server.py:398] - 响应文本长度: 17
2025-07-13 20:55:25 - INFO - [server.py:399] - 可视化步骤数: 9
2025-07-13 20:55:25 - INFO - [server.py:399] - 可视化步骤数: 9
2025-07-13 20:55:25 - INFO - [server.py:400] - 生成耗时: 0.75秒
2025-07-13 20:55:25 - INFO - [server.py:400] - 生成耗时: 0.75秒
2025-07-13 20:55:25 - DEBUG - [server.py:401] - 生成的响应文本: 你好！有什么我可以可以帮助你的吗？
2025-07-13 20:55:25 - INFO - [server.py:402] - ============================================================
2025-07-13 20:55:25 - INFO - [server.py:402] - ============================================================
2025-07-13 20:55:25 - INFO - [server.py:474] - [req_1752411324905] 生成成功!
2025-07-13 20:55:25 - INFO - [server.py:474] - [req_1752411324905] 生成成功!
2025-07-13 20:55:25 - INFO - [server.py:475] - [req_1752411324905] 响应长度: 17
2025-07-13 20:55:25 - INFO - [server.py:475] - [req_1752411324905] 响应长度: 17
2025-07-13 20:55:25 - INFO - [server.py:476] - [req_1752411324905] 可视化步骤: 9
2025-07-13 20:55:25 - INFO - [server.py:476] - [req_1752411324905] 可视化步骤: 9
2025-07-13 20:55:25 - INFO - [server.py:477] - [req_1752411324905] 总耗时: 0.75秒
2025-07-13 20:55:25 - INFO - [server.py:477] - [req_1752411324905] 总耗时: 0.75秒
2025-07-13 20:55:25 - DEBUG - [server.py:478] - [req_1752411324905] 响应文本: 你好！有什么我可以可以帮助你的吗？
2025-07-13 20:55:25 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 3110,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:25.656867"
}
2025-07-13 20:55:25 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 3110,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:25.656867"
}
2025-07-13 20:55:25 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:25] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:55:25 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:25] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:55:26 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:55:26.663793",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "今天天气怎么样？"
      }
    ],
    "settings": {
      "gen_length": 12,
      "steps": 6,
      "temperature": 0.0,
      "constraints": "0:今天, 2:天气, 4:很好"
    }
  }
}
2025-07-13 20:55:26 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:55:26.663793",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "今天天气怎么样？"
      }
    ],
    "settings": {
      "gen_length": 12,
      "steps": 6,
      "temperature": 0.0,
      "constraints": "0:今天, 2:天气, 4:很好"
    }
  }
}
2025-07-13 20:55:26 - INFO - [server.py:443] - [req_1752411326664] 收到生成请求
2025-07-13 20:55:26 - INFO - [server.py:443] - [req_1752411326664] 收到生成请求
2025-07-13 20:55:26 - INFO - [server.py:451] - [req_1752411326664] 请求数据详情:
2025-07-13 20:55:26 - INFO - [server.py:451] - [req_1752411326664] 请求数据详情:
2025-07-13 20:55:26 - INFO - [server.py:452] - [req_1752411326664] - 消息数量: 1
2025-07-13 20:55:26 - INFO - [server.py:452] - [req_1752411326664] - 消息数量: 1
2025-07-13 20:55:26 - INFO - [server.py:453] - [req_1752411326664] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:55:26 - INFO - [server.py:453] - [req_1752411326664] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:55:26 - DEBUG - [server.py:454] - [req_1752411326664] - 完整消息列表: [
  {
    "role": "user",
    "content": "今天天气怎么样？"
  }
]
2025-07-13 20:55:26 - INFO - [server.py:465] - [req_1752411326664] 开始生成响应...
2025-07-13 20:55:26 - INFO - [server.py:465] - [req_1752411326664] 开始生成响应...
2025-07-13 20:55:26 - INFO - [server.py:201] - ============================================================
2025-07-13 20:55:26 - INFO - [server.py:201] - ============================================================
2025-07-13 20:55:26 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:55:26 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:55:26 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:55:26 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:55:26 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=8
2025-07-13 20:55:26 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=8
2025-07-13 20:55:26 - DEBUG - [server.py:206] - 消息 1 内容: 今天天气怎么样？
2025-07-13 20:55:26 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:55:26 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:55:26 - INFO - [server.py:220] - 解析后的约束: {0: '今天', 2: '天气', 4: '很好'}
2025-07-13 20:55:26 - INFO - [server.py:220] - 解析后的约束: {0: '今天', 2: '天气', 4: '很好'}
2025-07-13 20:55:26 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:55:26 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:55:26 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:55:26 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:55:26 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

今天天气怎么样？<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:55:26 - INFO - [server.py:234] - 输入token数量: 17
2025-07-13 20:55:26 - INFO - [server.py:234] - 输入token数量: 17
2025-07-13 20:55:26 - INFO - [server.py:241] - 序列总长度: 29, prompt长度: 17, 生成长度: 12
2025-07-13 20:55:26 - INFO - [server.py:241] - 序列总长度: 29, prompt长度: 17, 生成长度: 12
2025-07-13 20:55:26 - INFO - [server.py:250] - 应用约束数量: 5
2025-07-13 20:55:26 - INFO - [server.py:250] - 应用约束数量: 5
2025-07-13 20:55:26 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 17): token_id=34808
2025-07-13 20:55:26 - DEBUG - [server.py:255] - 约束位置 2 (绝对位置 19): token_id=220
2025-07-13 20:55:26 - DEBUG - [server.py:255] - 约束位置 3 (绝对位置 20): token_id=13092
2025-07-13 20:55:26 - DEBUG - [server.py:255] - 约束位置 4 (绝对位置 21): token_id=220
2025-07-13 20:55:26 - DEBUG - [server.py:255] - 约束位置 5 (绝对位置 22): token_id=9052
2025-07-13 20:55:26 - INFO - [server.py:270] - 块处理配置: 块长度=12, 块数量=1, 每块步数=6
2025-07-13 20:55:26 - INFO - [server.py:270] - 块处理配置: 块长度=12, 块数量=1, 每块步数=6
2025-07-13 20:55:26 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:55:26 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:55:26 - DEBUG - [server.py:289] - 块 1, 步骤 1/6
2025-07-13 20:55:26 - DEBUG - [server.py:289] - 块 1, 步骤 2/6
2025-07-13 20:55:26 - DEBUG - [server.py:289] - 块 1, 步骤 3/6
2025-07-13 20:55:26 - DEBUG - [server.py:289] - 块 1, 步骤 4/6
2025-07-13 20:55:26 - DEBUG - [server.py:289] - 块 1, 步骤 5/6
2025-07-13 20:55:26 - DEBUG - [server.py:289] - 块 1, 步骤 6/6
2025-07-13 20:55:26 - INFO - [server.py:395] - 生成后GPU内存使用: 15.35GB
2025-07-13 20:55:26 - INFO - [server.py:395] - 生成后GPU内存使用: 15.35GB
2025-07-13 20:55:26 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:55:26 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:55:26 - INFO - [server.py:398] - 响应文本长度: 22
2025-07-13 20:55:26 - INFO - [server.py:398] - 响应文本长度: 22
2025-07-13 20:55:26 - INFO - [server.py:399] - 可视化步骤数: 7
2025-07-13 20:55:26 - INFO - [server.py:399] - 可视化步骤数: 7
2025-07-13 20:55:26 - INFO - [server.py:400] - 生成耗时: 0.30秒
2025-07-13 20:55:26 - INFO - [server.py:400] - 生成耗时: 0.30秒
2025-07-13 20:55:26 - DEBUG - [server.py:401] - 生成的响应文本:  今天 的 天气 很好，阳光明媚，气温适宜。
2025-07-13 20:55:26 - INFO - [server.py:402] - ============================================================
2025-07-13 20:55:26 - INFO - [server.py:402] - ============================================================
2025-07-13 20:55:26 - INFO - [server.py:474] - [req_1752411326664] 生成成功!
2025-07-13 20:55:26 - INFO - [server.py:474] - [req_1752411326664] 生成成功!
2025-07-13 20:55:26 - INFO - [server.py:475] - [req_1752411326664] 响应长度: 22
2025-07-13 20:55:26 - INFO - [server.py:475] - [req_1752411326664] 响应长度: 22
2025-07-13 20:55:26 - INFO - [server.py:476] - [req_1752411326664] 可视化步骤: 7
2025-07-13 20:55:26 - INFO - [server.py:476] - [req_1752411326664] 可视化步骤: 7
2025-07-13 20:55:26 - INFO - [server.py:477] - [req_1752411326664] 总耗时: 0.31秒
2025-07-13 20:55:26 - INFO - [server.py:477] - [req_1752411326664] 总耗时: 0.31秒
2025-07-13 20:55:26 - DEBUG - [server.py:478] - [req_1752411326664] 响应文本:  今天 的 天气 很好，阳光明媚，气温适宜。
2025-07-13 20:55:26 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 2097,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:26.971978"
}
2025-07-13 20:55:26 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 2097,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:55:26.971978"
}
2025-07-13 20:55:26 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:26] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:55:26 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:55:26] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:57:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:11.241106"
}
2025-07-13 20:57:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:11.241106"
}
2025-07-13 20:57:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:11.241499",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:57:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:11.241499",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:57:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:57:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:57:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:11.737826"
}
2025-07-13 20:57:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:11.737826"
}
2025-07-13 20:57:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:11.738232",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:57:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:11.738232",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:57:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:57:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:57:25 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:25.023981"
}
2025-07-13 20:57:25 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:25.023981"
}
2025-07-13 20:57:25 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:57:25.024495"
}
2025-07-13 20:57:25 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:57:25.024495"
}
2025-07-13 20:57:25 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:25] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:57:25 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:25] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:57:25 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:25.507396",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 8:很棒的"
    }
  }
}
2025-07-13 20:57:25 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:25.507396",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 8:很棒的"
    }
  }
}
2025-07-13 20:57:25 - INFO - [server.py:443] - [req_1752411445508] 收到生成请求
2025-07-13 20:57:25 - INFO - [server.py:443] - [req_1752411445508] 收到生成请求
2025-07-13 20:57:25 - INFO - [server.py:451] - [req_1752411445508] 请求数据详情:
2025-07-13 20:57:25 - INFO - [server.py:451] - [req_1752411445508] 请求数据详情:
2025-07-13 20:57:25 - INFO - [server.py:452] - [req_1752411445508] - 消息数量: 1
2025-07-13 20:57:25 - INFO - [server.py:452] - [req_1752411445508] - 消息数量: 1
2025-07-13 20:57:25 - INFO - [server.py:453] - [req_1752411445508] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:57:25 - INFO - [server.py:453] - [req_1752411445508] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:57:25 - DEBUG - [server.py:454] - [req_1752411445508] - 完整消息列表: [
  {
    "role": "user",
    "content": "什么是YOLO"
  }
]
2025-07-13 20:57:25 - INFO - [server.py:465] - [req_1752411445508] 开始生成响应...
2025-07-13 20:57:25 - INFO - [server.py:465] - [req_1752411445508] 开始生成响应...
2025-07-13 20:57:25 - INFO - [server.py:201] - ============================================================
2025-07-13 20:57:25 - INFO - [server.py:201] - ============================================================
2025-07-13 20:57:25 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:57:25 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:57:25 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:57:25 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:57:25 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=7
2025-07-13 20:57:25 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=7
2025-07-13 20:57:25 - DEBUG - [server.py:206] - 消息 1 内容: 什么是YOLO
2025-07-13 20:57:25 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:57:25 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:57:25 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 8: '很棒的'}
2025-07-13 20:57:25 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 8: '很棒的'}
2025-07-13 20:57:25 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:57:25 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:57:25 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:57:25 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:57:25 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:57:25 - INFO - [server.py:234] - 输入token数量: 16
2025-07-13 20:57:25 - INFO - [server.py:234] - 输入token数量: 16
2025-07-13 20:57:25 - INFO - [server.py:241] - 序列总长度: 66, prompt长度: 16, 生成长度: 50
2025-07-13 20:57:25 - INFO - [server.py:241] - 序列总长度: 66, prompt长度: 16, 生成长度: 50
2025-07-13 20:57:25 - INFO - [server.py:250] - 应用约束数量: 4
2025-07-13 20:57:25 - INFO - [server.py:250] - 应用约束数量: 4
2025-07-13 20:57:25 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 16): token_id=100891
2025-07-13 20:57:25 - DEBUG - [server.py:255] - 约束位置 1 (绝对位置 17): token_id=3251
2025-07-13 20:57:25 - DEBUG - [server.py:255] - 约束位置 8 (绝对位置 24): token_id=60371
2025-07-13 20:57:25 - DEBUG - [server.py:255] - 约束位置 9 (绝对位置 25): token_id=70150
2025-07-13 20:57:25 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:57:25 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:57:25 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:57:25 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 1/16
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 2/16
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 3/16
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 4/16
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 5/16
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 6/16
2025-07-13 20:57:25 - DEBUG - [server.py:289] - 块 1, 步骤 7/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 8/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 9/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 10/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 11/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 12/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 13/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 14/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 15/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 1, 步骤 16/16
2025-07-13 20:57:26 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:57:26 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 1/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 2/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 3/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 4/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 5/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 6/16
2025-07-13 20:57:26 - DEBUG - [server.py:289] - 块 2, 步骤 7/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 8/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 9/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 10/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 11/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 12/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 13/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 14/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 15/16
2025-07-13 20:57:27 - DEBUG - [server.py:289] - 块 2, 步骤 16/16
2025-07-13 20:57:27 - INFO - [server.py:395] - 生成后GPU内存使用: 16.89GB
2025-07-13 20:57:27 - INFO - [server.py:395] - 生成后GPU内存使用: 16.89GB
2025-07-13 20:57:27 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:57:27 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:57:27 - INFO - [server.py:398] - 响应文本长度: 106
2025-07-13 20:57:27 - INFO - [server.py:398] - 响应文本长度: 106
2025-07-13 20:57:27 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:57:27 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:57:27 - INFO - [server.py:400] - 生成耗时: 2.09秒
2025-07-13 20:57:27 - INFO - [server.py:400] - 生成耗时: 2.09秒
2025-07-13 20:57:27 - DEBUG - [server.py:401] - 生成的响应文本:  YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。
2025-07-13 20:57:27 - INFO - [server.py:402] - ============================================================
2025-07-13 20:57:27 - INFO - [server.py:402] - ============================================================
2025-07-13 20:57:27 - INFO - [server.py:474] - [req_1752411445508] 生成成功!
2025-07-13 20:57:27 - INFO - [server.py:474] - [req_1752411445508] 生成成功!
2025-07-13 20:57:27 - INFO - [server.py:475] - [req_1752411445508] 响应长度: 106
2025-07-13 20:57:27 - INFO - [server.py:475] - [req_1752411445508] 响应长度: 106
2025-07-13 20:57:27 - INFO - [server.py:476] - [req_1752411445508] 可视化步骤: 33
2025-07-13 20:57:27 - INFO - [server.py:476] - [req_1752411445508] 可视化步骤: 33
2025-07-13 20:57:27 - INFO - [server.py:477] - [req_1752411445508] 总耗时: 2.09秒
2025-07-13 20:57:27 - INFO - [server.py:477] - [req_1752411445508] 总耗时: 2.09秒
2025-07-13 20:57:27 - DEBUG - [server.py:478] - [req_1752411445508] 响应文本:  YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。
2025-07-13 20:57:27 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 36249,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:27.601953"
}
2025-07-13 20:57:27 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 36249,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:27.601953"
}
2025-07-13 20:57:27 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:27] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:57:27 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:27] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:57:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:41.677219"
}
2025-07-13 20:57:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:57:41.677219"
}
2025-07-13 20:57:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:41.678122",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:57:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:57:41.678122",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:57:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:41] "GET /health HTTP/1.1" 200 -
2025-07-13 20:57:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:57:41] "GET /health HTTP/1.1" 200 -
2025-07-13 20:58:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:58:11.170334"
}
2025-07-13 20:58:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:58:11.170334"
}
2025-07-13 20:58:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:58:11.171619",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:58:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:58:11.171619",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:58:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:58:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:58:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:58:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:58:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:58:41.172956"
}
2025-07-13 20:58:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:58:41.172956"
}
2025-07-13 20:58:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:58:41.173582",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:58:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:58:41.173582",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:58:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:58:41] "GET /health HTTP/1.1" 200 -
2025-07-13 20:58:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:58:41] "GET /health HTTP/1.1" 200 -
2025-07-13 20:59:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:59:11.204053"
}
2025-07-13 20:59:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:59:11.204053"
}
2025-07-13 20:59:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:59:11.204884",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:59:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:59:11.204884",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:59:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:59:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:59:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:59:11] "GET /health HTTP/1.1" 200 -
2025-07-13 20:59:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:59:41.177298"
}
2025-07-13 20:59:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:59:41.177298"
}
2025-07-13 20:59:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:59:41.178124",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:59:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:59:41.178124",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:59:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:59:41] "GET /health HTTP/1.1" 200 -
2025-07-13 20:59:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:59:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:00:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:00:11.423857"
}
2025-07-13 21:00:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:00:11.423857"
}
2025-07-13 21:00:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:00:11.424658",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:00:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:00:11.424658",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:00:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:00:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:00:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:00:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:00:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:00:41.198643"
}
2025-07-13 21:00:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:00:41.198643"
}
2025-07-13 21:00:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:00:41.199551",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:00:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:00:41.199551",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:00:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:00:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:00:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:00:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:01:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:01:11.228127"
}
2025-07-13 21:01:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:01:11.228127"
}
2025-07-13 21:01:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:01:11.229267",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:01:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:01:11.229267",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:01:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:01:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:01:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:01:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:01:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:01:41.174103"
}
2025-07-13 21:01:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:01:41.174103"
}
2025-07-13 21:01:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:01:41.174896",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:01:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:01:41.174896",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:01:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:01:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:01:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:01:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:02:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:11.199178"
}
2025-07-13 21:02:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:11.199178"
}
2025-07-13 21:02:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:02:11.200602",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:02:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:02:11.200602",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:02:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:02:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:02:11 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:11.714375"
}
2025-07-13 21:02:11 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:11.714375"
}
2025-07-13 21:02:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T21:02:11.715062"
}
2025-07-13 21:02:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T21:02:11.715062"
}
2025-07-13 21:02:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:11] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 21:02:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:11] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 21:02:12 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:12.180963",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 8:很棒的"
    }
  }
}
2025-07-13 21:02:12 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:12.180963",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 8:很棒的"
    }
  }
}
2025-07-13 21:02:12 - INFO - [server.py:443] - [req_1752411732182] 收到生成请求
2025-07-13 21:02:12 - INFO - [server.py:443] - [req_1752411732182] 收到生成请求
2025-07-13 21:02:12 - INFO - [server.py:451] - [req_1752411732182] 请求数据详情:
2025-07-13 21:02:12 - INFO - [server.py:451] - [req_1752411732182] 请求数据详情:
2025-07-13 21:02:12 - INFO - [server.py:452] - [req_1752411732182] - 消息数量: 3
2025-07-13 21:02:12 - INFO - [server.py:452] - [req_1752411732182] - 消息数量: 3
2025-07-13 21:02:12 - INFO - [server.py:453] - [req_1752411732182] - 设置参数: {
  "temperature": 0,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 21:02:12 - INFO - [server.py:453] - [req_1752411732182] - 设置参数: {
  "temperature": 0,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 21:02:12 - DEBUG - [server.py:454] - [req_1752411732182] - 完整消息列表: [
  {
    "role": "user",
    "content": "什么是YOLO"
  },
  {
    "role": "assistant",
    "content": " YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  }
]
2025-07-13 21:02:12 - INFO - [server.py:465] - [req_1752411732182] 开始生成响应...
2025-07-13 21:02:12 - INFO - [server.py:465] - [req_1752411732182] 开始生成响应...
2025-07-13 21:02:12 - INFO - [server.py:201] - ============================================================
2025-07-13 21:02:12 - INFO - [server.py:201] - ============================================================
2025-07-13 21:02:12 - INFO - [server.py:202] - 开始生成响应
2025-07-13 21:02:12 - INFO - [server.py:202] - 开始生成响应
2025-07-13 21:02:12 - INFO - [server.py:203] - 输入消息数量: 3
2025-07-13 21:02:12 - INFO - [server.py:203] - 输入消息数量: 3
2025-07-13 21:02:12 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=7
2025-07-13 21:02:12 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=7
2025-07-13 21:02:12 - DEBUG - [server.py:206] - 消息 1 内容: 什么是YOLO
2025-07-13 21:02:12 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=106
2025-07-13 21:02:12 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=106
2025-07-13 21:02:12 - DEBUG - [server.py:206] - 消息 2 内容:  YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。
2025-07-13 21:02:12 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 21:02:12 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 21:02:12 - DEBUG - [server.py:206] - 消息 3 内容: 什么是YOLO
2025-07-13 21:02:12 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 21:02:12 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 21:02:12 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 8: '很棒的'}
2025-07-13 21:02:12 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 8: '很棒的'}
2025-07-13 21:02:12 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 21:02:12 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 21:02:12 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 21:02:12 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 21:02:12 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>

YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 21:02:12 - INFO - [server.py:234] - 输入token数量: 81
2025-07-13 21:02:12 - INFO - [server.py:234] - 输入token数量: 81
2025-07-13 21:02:12 - INFO - [server.py:241] - 序列总长度: 131, prompt长度: 81, 生成长度: 50
2025-07-13 21:02:12 - INFO - [server.py:241] - 序列总长度: 131, prompt长度: 81, 生成长度: 50
2025-07-13 21:02:12 - INFO - [server.py:250] - 应用约束数量: 4
2025-07-13 21:02:12 - INFO - [server.py:250] - 应用约束数量: 4
2025-07-13 21:02:12 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 81): token_id=100891
2025-07-13 21:02:12 - DEBUG - [server.py:255] - 约束位置 1 (绝对位置 82): token_id=3251
2025-07-13 21:02:12 - DEBUG - [server.py:255] - 约束位置 8 (绝对位置 89): token_id=60371
2025-07-13 21:02:12 - DEBUG - [server.py:255] - 约束位置 9 (绝对位置 90): token_id=70150
2025-07-13 21:02:12 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 21:02:12 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 21:02:12 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 21:02:12 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 1/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 2/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 3/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 4/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 5/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 6/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 7/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 8/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 9/16
2025-07-13 21:02:12 - DEBUG - [server.py:289] - 块 1, 步骤 10/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 1, 步骤 11/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 1, 步骤 12/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 1, 步骤 13/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 1, 步骤 14/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 1, 步骤 15/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 1, 步骤 16/16
2025-07-13 21:02:13 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 21:02:13 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 2, 步骤 1/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 2, 步骤 2/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 2, 步骤 3/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 2, 步骤 4/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 2, 步骤 5/16
2025-07-13 21:02:13 - DEBUG - [server.py:289] - 块 2, 步骤 6/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 7/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 8/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 9/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 10/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 11/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 12/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 13/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 14/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 15/16
2025-07-13 21:02:14 - DEBUG - [server.py:289] - 块 2, 步骤 16/16
2025-07-13 21:02:14 - INFO - [server.py:395] - 生成后GPU内存使用: 18.38GB
2025-07-13 21:02:14 - INFO - [server.py:395] - 生成后GPU内存使用: 18.38GB
2025-07-13 21:02:14 - INFO - [server.py:397] - 生成完成!
2025-07-13 21:02:14 - INFO - [server.py:397] - 生成完成!
2025-07-13 21:02:14 - INFO - [server.py:398] - 响应文本长度: 106
2025-07-13 21:02:14 - INFO - [server.py:398] - 响应文本长度: 106
2025-07-13 21:02:14 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 21:02:14 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 21:02:14 - INFO - [server.py:400] - 生成耗时: 2.61秒
2025-07-13 21:02:14 - INFO - [server.py:400] - 生成耗时: 2.61秒
2025-07-13 21:02:14 - DEBUG - [server.py:401] - 生成的响应文本:  YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。
2025-07-13 21:02:14 - INFO - [server.py:402] - ============================================================
2025-07-13 21:02:14 - INFO - [server.py:402] - ============================================================
2025-07-13 21:02:14 - INFO - [server.py:474] - [req_1752411732182] 生成成功!
2025-07-13 21:02:14 - INFO - [server.py:474] - [req_1752411732182] 生成成功!
2025-07-13 21:02:14 - INFO - [server.py:475] - [req_1752411732182] 响应长度: 106
2025-07-13 21:02:14 - INFO - [server.py:475] - [req_1752411732182] 响应长度: 106
2025-07-13 21:02:14 - INFO - [server.py:476] - [req_1752411732182] 可视化步骤: 33
2025-07-13 21:02:14 - INFO - [server.py:476] - [req_1752411732182] 可视化步骤: 33
2025-07-13 21:02:14 - INFO - [server.py:477] - [req_1752411732182] 总耗时: 2.61秒
2025-07-13 21:02:14 - INFO - [server.py:477] - [req_1752411732182] 总耗时: 2.61秒
2025-07-13 21:02:14 - DEBUG - [server.py:478] - [req_1752411732182] 响应文本:  YOLO =You Only Look Once. 很棒的俚语！YOLO also指YOLO算法，一种实时目标检测算法。YOLO算法基于卷积神经网络（CNN），与其他目标检测算法相比，YOLO算法更快速和准确。
2025-07-13 21:02:14 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 36922,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:02:14.795804"
}
2025-07-13 21:02:14 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 36922,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:02:14.795804"
}
2025-07-13 21:02:14 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:14] "POST /generate HTTP/1.1" 200 -
2025-07-13 21:02:14 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:14] "POST /generate HTTP/1.1" 200 -
2025-07-13 21:02:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:41.187112"
}
2025-07-13 21:02:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:02:41.187112"
}
2025-07-13 21:02:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:02:41.187610",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:02:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:02:41.187610",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:02:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:02:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:02:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:03:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:03:11.181813"
}
2025-07-13 21:03:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:03:11.181813"
}
2025-07-13 21:03:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:03:11.182611",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:03:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:03:11.182611",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:03:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:03:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:03:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:03:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:03:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:03:41.181552"
}
2025-07-13 21:03:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:03:41.181552"
}
2025-07-13 21:03:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:03:41.182367",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:03:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:03:41.182367",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:03:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:03:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:03:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:03:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:04:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:04:11.182620"
}
2025-07-13 21:04:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:04:11.182620"
}
2025-07-13 21:04:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:04:11.183291",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:04:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:04:11.183291",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:04:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:04:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:04:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:04:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:04:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:04:41.290888"
}
2025-07-13 21:04:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:04:41.290888"
}
2025-07-13 21:04:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:04:41.291895",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:04:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:04:41.291895",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:04:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:04:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:04:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:04:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:05:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:05:11.185540"
}
2025-07-13 21:05:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:05:11.185540"
}
2025-07-13 21:05:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:05:11.186348",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:05:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:05:11.186348",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:05:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:05:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:05:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:05:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:05:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:05:41.228107"
}
2025-07-13 21:05:41 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:05:41.228107"
}
2025-07-13 21:05:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:05:41.228916",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:05:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:05:41.228916",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:05:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:05:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:05:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:05:41] "GET /health HTTP/1.1" 200 -
2025-07-13 21:06:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:06:11.181475"
}
2025-07-13 21:06:11 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T21:06:11.181475"
}
2025-07-13 21:06:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:06:11.182297",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:06:11 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T21:06:11.182297",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 21:06:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:06:11] "GET /health HTTP/1.1" 200 -
2025-07-13 21:06:11 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 21:06:11] "GET /health HTTP/1.1" 200 -
