=== LLaDA 后端服务日志 ===
启动时间: Sun Jul 13 20:51:36 CST 2025
日志会话: 20250713_205131
Python版本: Python 3.12.3
工作目录: /root/LLaDA-main/lldm
设备检测: CUDA可用: True
==========================

2025-07-13 20:51:39 - INFO - [server.py:97] - 初始化设备: cuda
2025-07-13 20:51:39 - INFO - [server.py:97] - 初始化设备: cuda
2025-07-13 20:51:39 - INFO - [server.py:104] - GPU总内存: 23.5GB
2025-07-13 20:51:39 - INFO - [server.py:104] - GPU总内存: 23.5GB
2025-07-13 20:51:39 - INFO - [server.py:107] - 开始加载tokenizer...
2025-07-13 20:51:39 - INFO - [server.py:107] - 开始加载tokenizer...
2025-07-13 20:51:39 - INFO - [server.py:109] - Tokenizer加载成功
2025-07-13 20:51:39 - INFO - [server.py:109] - Tokenizer加载成功
2025-07-13 20:51:39 - INFO - [server.py:111] - 开始加载模型...
2025-07-13 20:51:39 - INFO - [server.py:111] - 开始加载模型...
2025-07-13 20:51:40 - INFO - [modeling.py:991] - We will use 90% of the memory on device 0 for storing the model, and 10% for the buffer to avoid OOM. You can set `max_memory` in to a higher value to use more memory (at your own risk).
2025-07-13 20:51:40 - INFO - [modeling.py:991] - We will use 90% of the memory on device 0 for storing the model, and 10% for the buffer to avoid OOM. You can set `max_memory` in to a higher value to use more memory (at your own risk).
2025-07-13 20:51:40 - WARNING - [modeling.py:1114] - The model weights are not tied. Please use the `tie_weights` method before using the `infer_auto_device` function.
2025-07-13 20:51:40 - WARNING - [modeling.py:1114] - The model weights are not tied. Please use the `tie_weights` method before using the `infer_auto_device` function.
Loading checkpoint shards:   0%|          | 0/6 [00:00<?, ?it/s]Loading checkpoint shards:  17%|█▋        | 1/6 [00:00<00:02,  1.89it/s]Loading checkpoint shards:  33%|███▎      | 2/6 [00:01<00:02,  1.67it/s]Loading checkpoint shards:  50%|█████     | 3/6 [00:01<00:02,  1.47it/s]Loading checkpoint shards:  67%|██████▋   | 4/6 [00:02<00:01,  1.42it/s]Loading checkpoint shards:  83%|████████▎ | 5/6 [00:03<00:00,  1.34it/s]Loading checkpoint shards: 100%|██████████| 6/6 [00:04<00:00,  1.46it/s]Loading checkpoint shards: 100%|██████████| 6/6 [00:04<00:00,  1.47it/s]
2025-07-13 20:51:44 - INFO - [server.py:129] - 模型加载成功，设备: cuda
2025-07-13 20:51:44 - INFO - [server.py:129] - 模型加载成功，设备: cuda
2025-07-13 20:51:44 - INFO - [server.py:132] - GPU已分配内存: 14.9GB
2025-07-13 20:51:44 - INFO - [server.py:132] - GPU已分配内存: 14.9GB
 * Serving Flask app 'server'
 * Debug mode: off
2025-07-13 20:51:44 - INFO - [_internal.py:97] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:9000
 * Running on http://172.17.0.3:9000
2025-07-13 20:51:44 - INFO - [_internal.py:97] - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:9000
 * Running on http://172.17.0.3:9000
2025-07-13 20:51:44 - INFO - [_internal.py:97] - [33mPress CTRL+C to quit[0m
2025-07-13 20:51:44 - INFO - [_internal.py:97] - [33mPress CTRL+C to quit[0m
2025-07-13 20:51:45 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "curl/7.81.0",
  "timestamp": "2025-07-13T20:51:45.030448"
}
2025-07-13 20:51:45 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "curl/7.81.0",
  "timestamp": "2025-07-13T20:51:45.030448"
}
2025-07-13 20:51:45 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:45.031133",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:51:45 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:45.031133",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:51:45 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:45] "GET /health HTTP/1.1" 200 -
2025-07-13 20:51:45 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:45] "GET /health HTTP/1.1" 200 -
2025-07-13 20:51:51 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:51:51.121078"
}
2025-07-13 20:51:51 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:51:51.121078"
}
2025-07-13 20:51:51 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:51.121927",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:51:51 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:51.121927",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:51:51 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:51] "GET /health HTTP/1.1" 200 -
2025-07-13 20:51:51 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:51] "GET /health HTTP/1.1" 200 -
2025-07-13 20:51:52 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:51:52.126776",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      }
    ],
    "settings": {
      "gen_length": 16,
      "steps": 8,
      "temperature": 0.0,
      "cfg_scale": 0.0
    }
  }
}
2025-07-13 20:51:52 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:51:52.126776",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      }
    ],
    "settings": {
      "gen_length": 16,
      "steps": 8,
      "temperature": 0.0,
      "cfg_scale": 0.0
    }
  }
}
2025-07-13 20:51:52 - INFO - [server.py:443] - [req_1752411112127] 收到生成请求
2025-07-13 20:51:52 - INFO - [server.py:443] - [req_1752411112127] 收到生成请求
2025-07-13 20:51:52 - INFO - [server.py:451] - [req_1752411112127] 请求数据详情:
2025-07-13 20:51:52 - INFO - [server.py:451] - [req_1752411112127] 请求数据详情:
2025-07-13 20:51:52 - INFO - [server.py:452] - [req_1752411112127] - 消息数量: 1
2025-07-13 20:51:52 - INFO - [server.py:452] - [req_1752411112127] - 消息数量: 1
2025-07-13 20:51:52 - INFO - [server.py:453] - [req_1752411112127] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:51:52 - INFO - [server.py:453] - [req_1752411112127] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:51:52 - DEBUG - [server.py:454] - [req_1752411112127] - 完整消息列表: [
  {
    "role": "user",
    "content": "你好"
  }
]
2025-07-13 20:51:52 - INFO - [server.py:465] - [req_1752411112127] 开始生成响应...
2025-07-13 20:51:52 - INFO - [server.py:465] - [req_1752411112127] 开始生成响应...
2025-07-13 20:51:52 - INFO - [server.py:201] - ============================================================
2025-07-13 20:51:52 - INFO - [server.py:201] - ============================================================
2025-07-13 20:51:52 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:51:52 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:51:52 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:51:52 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:51:52 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:51:52 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:51:52 - DEBUG - [server.py:206] - 消息 1 内容: 你好
2025-07-13 20:51:52 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:51:52 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 16,
  "steps": 8,
  "temperature": 0.0,
  "cfg_scale": 0.0
}
2025-07-13 20:51:52 - INFO - [server.py:220] - 解析后的约束: {}
2025-07-13 20:51:52 - INFO - [server.py:220] - 解析后的约束: {}
2025-07-13 20:51:52 - INFO - [server.py:225] - 生成前GPU内存使用: 14.93GB
2025-07-13 20:51:52 - INFO - [server.py:225] - 生成前GPU内存使用: 14.93GB
2025-07-13 20:51:52 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:51:52 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:51:52 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

你好<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:51:52 - INFO - [server.py:234] - 输入token数量: 14
2025-07-13 20:51:52 - INFO - [server.py:234] - 输入token数量: 14
2025-07-13 20:51:52 - INFO - [server.py:241] - 序列总长度: 30, prompt长度: 14, 生成长度: 16
2025-07-13 20:51:52 - INFO - [server.py:241] - 序列总长度: 30, prompt长度: 14, 生成长度: 16
2025-07-13 20:51:52 - INFO - [server.py:250] - 应用约束数量: 0
2025-07-13 20:51:52 - INFO - [server.py:250] - 应用约束数量: 0
2025-07-13 20:51:52 - INFO - [server.py:270] - 块处理配置: 块长度=16, 块数量=1, 每块步数=8
2025-07-13 20:51:52 - INFO - [server.py:270] - 块处理配置: 块长度=16, 块数量=1, 每块步数=8
2025-07-13 20:51:52 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:51:52 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 1/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 2/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 3/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 4/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 5/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 6/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 7/8
2025-07-13 20:51:52 - DEBUG - [server.py:289] - 块 1, 步骤 8/8
2025-07-13 20:51:52 - INFO - [server.py:395] - 生成后GPU内存使用: 15.36GB
2025-07-13 20:51:52 - INFO - [server.py:395] - 生成后GPU内存使用: 15.36GB
2025-07-13 20:51:52 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:51:52 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:51:52 - INFO - [server.py:398] - 响应文本长度: 17
2025-07-13 20:51:52 - INFO - [server.py:398] - 响应文本长度: 17
2025-07-13 20:51:52 - INFO - [server.py:399] - 可视化步骤数: 9
2025-07-13 20:51:52 - INFO - [server.py:399] - 可视化步骤数: 9
2025-07-13 20:51:52 - INFO - [server.py:400] - 生成耗时: 0.75秒
2025-07-13 20:51:52 - INFO - [server.py:400] - 生成耗时: 0.75秒
2025-07-13 20:51:52 - DEBUG - [server.py:401] - 生成的响应文本: 你好！有什么我可以可以帮助你的吗？
2025-07-13 20:51:52 - INFO - [server.py:402] - ============================================================
2025-07-13 20:51:52 - INFO - [server.py:402] - ============================================================
2025-07-13 20:51:52 - INFO - [server.py:474] - [req_1752411112127] 生成成功!
2025-07-13 20:51:52 - INFO - [server.py:474] - [req_1752411112127] 生成成功!
2025-07-13 20:51:52 - INFO - [server.py:475] - [req_1752411112127] 响应长度: 17
2025-07-13 20:51:52 - INFO - [server.py:475] - [req_1752411112127] 响应长度: 17
2025-07-13 20:51:52 - INFO - [server.py:476] - [req_1752411112127] 可视化步骤: 9
2025-07-13 20:51:52 - INFO - [server.py:476] - [req_1752411112127] 可视化步骤: 9
2025-07-13 20:51:52 - INFO - [server.py:477] - [req_1752411112127] 总耗时: 0.75秒
2025-07-13 20:51:52 - INFO - [server.py:477] - [req_1752411112127] 总耗时: 0.75秒
2025-07-13 20:51:52 - DEBUG - [server.py:478] - [req_1752411112127] 响应文本: 你好！有什么我可以可以帮助你的吗？
2025-07-13 20:51:52 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 3110,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:52.876736"
}
2025-07-13 20:51:52 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 3110,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:52.876736"
}
2025-07-13 20:51:52 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:52] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:51:52 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:52] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:51:53 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:51:53.883956",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "今天天气怎么样？"
      }
    ],
    "settings": {
      "gen_length": 12,
      "steps": 6,
      "temperature": 0.0,
      "constraints": "0:今天, 2:天气, 4:很好"
    }
  }
}
2025-07-13 20:51:53 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "python-requests/2.31.0",
  "timestamp": "2025-07-13T20:51:53.883956",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "今天天气怎么样？"
      }
    ],
    "settings": {
      "gen_length": 12,
      "steps": 6,
      "temperature": 0.0,
      "constraints": "0:今天, 2:天气, 4:很好"
    }
  }
}
2025-07-13 20:51:53 - INFO - [server.py:443] - [req_1752411113884] 收到生成请求
2025-07-13 20:51:53 - INFO - [server.py:443] - [req_1752411113884] 收到生成请求
2025-07-13 20:51:53 - INFO - [server.py:451] - [req_1752411113884] 请求数据详情:
2025-07-13 20:51:53 - INFO - [server.py:451] - [req_1752411113884] 请求数据详情:
2025-07-13 20:51:53 - INFO - [server.py:452] - [req_1752411113884] - 消息数量: 1
2025-07-13 20:51:53 - INFO - [server.py:452] - [req_1752411113884] - 消息数量: 1
2025-07-13 20:51:53 - INFO - [server.py:453] - [req_1752411113884] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:51:53 - INFO - [server.py:453] - [req_1752411113884] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:51:53 - DEBUG - [server.py:454] - [req_1752411113884] - 完整消息列表: [
  {
    "role": "user",
    "content": "今天天气怎么样？"
  }
]
2025-07-13 20:51:53 - INFO - [server.py:465] - [req_1752411113884] 开始生成响应...
2025-07-13 20:51:53 - INFO - [server.py:465] - [req_1752411113884] 开始生成响应...
2025-07-13 20:51:53 - INFO - [server.py:201] - ============================================================
2025-07-13 20:51:53 - INFO - [server.py:201] - ============================================================
2025-07-13 20:51:53 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:51:53 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:51:53 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:51:53 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:51:53 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=8
2025-07-13 20:51:53 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=8
2025-07-13 20:51:53 - DEBUG - [server.py:206] - 消息 1 内容: 今天天气怎么样？
2025-07-13 20:51:53 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:51:53 - INFO - [server.py:208] - 设置参数: {
  "gen_length": 12,
  "steps": 6,
  "temperature": 0.0,
  "constraints": "0:今天, 2:天气, 4:很好"
}
2025-07-13 20:51:53 - INFO - [server.py:220] - 解析后的约束: {0: '今天', 2: '天气', 4: '很好'}
2025-07-13 20:51:53 - INFO - [server.py:220] - 解析后的约束: {0: '今天', 2: '天气', 4: '很好'}
2025-07-13 20:51:53 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:51:53 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:51:53 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:51:53 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:51:53 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

今天天气怎么样？<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:51:53 - INFO - [server.py:234] - 输入token数量: 17
2025-07-13 20:51:53 - INFO - [server.py:234] - 输入token数量: 17
2025-07-13 20:51:53 - INFO - [server.py:241] - 序列总长度: 29, prompt长度: 17, 生成长度: 12
2025-07-13 20:51:53 - INFO - [server.py:241] - 序列总长度: 29, prompt长度: 17, 生成长度: 12
2025-07-13 20:51:53 - INFO - [server.py:250] - 应用约束数量: 5
2025-07-13 20:51:53 - INFO - [server.py:250] - 应用约束数量: 5
2025-07-13 20:51:53 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 17): token_id=34808
2025-07-13 20:51:53 - DEBUG - [server.py:255] - 约束位置 2 (绝对位置 19): token_id=220
2025-07-13 20:51:53 - DEBUG - [server.py:255] - 约束位置 3 (绝对位置 20): token_id=13092
2025-07-13 20:51:53 - DEBUG - [server.py:255] - 约束位置 4 (绝对位置 21): token_id=220
2025-07-13 20:51:53 - DEBUG - [server.py:255] - 约束位置 5 (绝对位置 22): token_id=9052
2025-07-13 20:51:53 - INFO - [server.py:270] - 块处理配置: 块长度=12, 块数量=1, 每块步数=6
2025-07-13 20:51:53 - INFO - [server.py:270] - 块处理配置: 块长度=12, 块数量=1, 每块步数=6
2025-07-13 20:51:53 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:51:53 - INFO - [server.py:274] - 处理第 1/1 块...
2025-07-13 20:51:53 - DEBUG - [server.py:289] - 块 1, 步骤 1/6
2025-07-13 20:51:53 - DEBUG - [server.py:289] - 块 1, 步骤 2/6
2025-07-13 20:51:54 - DEBUG - [server.py:289] - 块 1, 步骤 3/6
2025-07-13 20:51:54 - DEBUG - [server.py:289] - 块 1, 步骤 4/6
2025-07-13 20:51:54 - DEBUG - [server.py:289] - 块 1, 步骤 5/6
2025-07-13 20:51:54 - DEBUG - [server.py:289] - 块 1, 步骤 6/6
2025-07-13 20:51:54 - INFO - [server.py:395] - 生成后GPU内存使用: 15.35GB
2025-07-13 20:51:54 - INFO - [server.py:395] - 生成后GPU内存使用: 15.35GB
2025-07-13 20:51:54 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:51:54 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:51:54 - INFO - [server.py:398] - 响应文本长度: 22
2025-07-13 20:51:54 - INFO - [server.py:398] - 响应文本长度: 22
2025-07-13 20:51:54 - INFO - [server.py:399] - 可视化步骤数: 7
2025-07-13 20:51:54 - INFO - [server.py:399] - 可视化步骤数: 7
2025-07-13 20:51:54 - INFO - [server.py:400] - 生成耗时: 0.33秒
2025-07-13 20:51:54 - INFO - [server.py:400] - 生成耗时: 0.33秒
2025-07-13 20:51:54 - DEBUG - [server.py:401] - 生成的响应文本:  今天 的 天气 很好，阳光明媚，气温适宜。
2025-07-13 20:51:54 - INFO - [server.py:402] - ============================================================
2025-07-13 20:51:54 - INFO - [server.py:402] - ============================================================
2025-07-13 20:51:54 - INFO - [server.py:474] - [req_1752411113884] 生成成功!
2025-07-13 20:51:54 - INFO - [server.py:474] - [req_1752411113884] 生成成功!
2025-07-13 20:51:54 - INFO - [server.py:475] - [req_1752411113884] 响应长度: 22
2025-07-13 20:51:54 - INFO - [server.py:475] - [req_1752411113884] 响应长度: 22
2025-07-13 20:51:54 - INFO - [server.py:476] - [req_1752411113884] 可视化步骤: 7
2025-07-13 20:51:54 - INFO - [server.py:476] - [req_1752411113884] 可视化步骤: 7
2025-07-13 20:51:54 - INFO - [server.py:477] - [req_1752411113884] 总耗时: 0.34秒
2025-07-13 20:51:54 - INFO - [server.py:477] - [req_1752411113884] 总耗时: 0.34秒
2025-07-13 20:51:54 - DEBUG - [server.py:478] - [req_1752411113884] 响应文本:  今天 的 天气 很好，阳光明媚，气温适宜。
2025-07-13 20:51:54 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 2097,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:54.221300"
}
2025-07-13 20:51:54 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 2097,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:51:54.221300"
}
2025-07-13 20:51:54 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:54] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:51:54 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:51:54] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:52:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:17.392856"
}
2025-07-13 20:52:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:17.392856"
}
2025-07-13 20:52:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:17.393679",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:52:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:17.393679",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:52:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:52:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:52:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:17.905795"
}
2025-07-13 20:52:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:17.905795"
}
2025-07-13 20:52:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:17.906610",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:52:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:17.906610",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:52:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:52:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:52:43 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:43.442513"
}
2025-07-13 20:52:43 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:43.442513"
}
2025-07-13 20:52:43 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:52:43.443613"
}
2025-07-13 20:52:43 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:52:43.443613"
}
2025-07-13 20:52:43 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:43] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:52:43 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:43] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:52:44 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:44.202419",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": ""
    }
  }
}
2025-07-13 20:52:44 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:44.202419",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": ""
    }
  }
}
2025-07-13 20:52:44 - INFO - [server.py:443] - [req_1752411164203] 收到生成请求
2025-07-13 20:52:44 - INFO - [server.py:443] - [req_1752411164203] 收到生成请求
2025-07-13 20:52:44 - INFO - [server.py:451] - [req_1752411164203] 请求数据详情:
2025-07-13 20:52:44 - INFO - [server.py:451] - [req_1752411164203] 请求数据详情:
2025-07-13 20:52:44 - INFO - [server.py:452] - [req_1752411164203] - 消息数量: 1
2025-07-13 20:52:44 - INFO - [server.py:452] - [req_1752411164203] - 消息数量: 1
2025-07-13 20:52:44 - INFO - [server.py:453] - [req_1752411164203] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": ""
}
2025-07-13 20:52:44 - INFO - [server.py:453] - [req_1752411164203] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": ""
}
2025-07-13 20:52:44 - DEBUG - [server.py:454] - [req_1752411164203] - 完整消息列表: [
  {
    "role": "user",
    "content": "你好"
  }
]
2025-07-13 20:52:44 - INFO - [server.py:465] - [req_1752411164203] 开始生成响应...
2025-07-13 20:52:44 - INFO - [server.py:465] - [req_1752411164203] 开始生成响应...
2025-07-13 20:52:44 - INFO - [server.py:201] - ============================================================
2025-07-13 20:52:44 - INFO - [server.py:201] - ============================================================
2025-07-13 20:52:44 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:52:44 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:52:44 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:52:44 - INFO - [server.py:203] - 输入消息数量: 1
2025-07-13 20:52:44 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:52:44 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:52:44 - DEBUG - [server.py:206] - 消息 1 内容: 你好
2025-07-13 20:52:44 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": ""
}
2025-07-13 20:52:44 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": ""
}
2025-07-13 20:52:44 - INFO - [server.py:220] - 解析后的约束: {}
2025-07-13 20:52:44 - INFO - [server.py:220] - 解析后的约束: {}
2025-07-13 20:52:44 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:52:44 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:52:44 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:52:44 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:52:44 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

你好<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:52:44 - INFO - [server.py:234] - 输入token数量: 14
2025-07-13 20:52:44 - INFO - [server.py:234] - 输入token数量: 14
2025-07-13 20:52:44 - INFO - [server.py:241] - 序列总长度: 64, prompt长度: 14, 生成长度: 50
2025-07-13 20:52:44 - INFO - [server.py:241] - 序列总长度: 64, prompt长度: 14, 生成长度: 50
2025-07-13 20:52:44 - INFO - [server.py:250] - 应用约束数量: 0
2025-07-13 20:52:44 - INFO - [server.py:250] - 应用约束数量: 0
2025-07-13 20:52:44 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:52:44 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:52:44 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:52:44 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 1/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 2/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 3/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 4/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 5/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 6/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 7/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 8/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 9/16
2025-07-13 20:52:44 - DEBUG - [server.py:289] - 块 1, 步骤 10/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 1, 步骤 11/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 1, 步骤 12/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 1, 步骤 13/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 1, 步骤 14/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 1, 步骤 15/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 1, 步骤 16/16
2025-07-13 20:52:45 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:52:45 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 2, 步骤 1/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 2, 步骤 2/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 2, 步骤 3/16
2025-07-13 20:52:45 - DEBUG - [server.py:289] - 块 2, 步骤 4/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 5/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 6/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 7/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 8/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 9/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 10/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 11/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 12/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 13/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 14/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 15/16
2025-07-13 20:52:46 - DEBUG - [server.py:289] - 块 2, 步骤 16/16
2025-07-13 20:52:47 - INFO - [server.py:395] - 生成后GPU内存使用: 16.83GB
2025-07-13 20:52:47 - INFO - [server.py:395] - 生成后GPU内存使用: 16.83GB
2025-07-13 20:52:47 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:52:47 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:52:47 - INFO - [server.py:398] - 响应文本长度: 15
2025-07-13 20:52:47 - INFO - [server.py:398] - 响应文本长度: 15
2025-07-13 20:52:47 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:52:47 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:52:47 - INFO - [server.py:400] - 生成耗时: 2.84秒
2025-07-13 20:52:47 - INFO - [server.py:400] - 生成耗时: 2.84秒
2025-07-13 20:52:47 - DEBUG - [server.py:401] - 生成的响应文本: 你好！有什么我可以帮助你的吗？
2025-07-13 20:52:47 - INFO - [server.py:402] - ============================================================
2025-07-13 20:52:47 - INFO - [server.py:402] - ============================================================
2025-07-13 20:52:47 - INFO - [server.py:474] - [req_1752411164203] 生成成功!
2025-07-13 20:52:47 - INFO - [server.py:474] - [req_1752411164203] 生成成功!
2025-07-13 20:52:47 - INFO - [server.py:475] - [req_1752411164203] 响应长度: 15
2025-07-13 20:52:47 - INFO - [server.py:475] - [req_1752411164203] 响应长度: 15
2025-07-13 20:52:47 - INFO - [server.py:476] - [req_1752411164203] 可视化步骤: 33
2025-07-13 20:52:47 - INFO - [server.py:476] - [req_1752411164203] 可视化步骤: 33
2025-07-13 20:52:47 - INFO - [server.py:477] - [req_1752411164203] 总耗时: 2.84秒
2025-07-13 20:52:47 - INFO - [server.py:477] - [req_1752411164203] 总耗时: 2.84秒
2025-07-13 20:52:47 - DEBUG - [server.py:478] - [req_1752411164203] 响应文本: 你好！有什么我可以帮助你的吗？
2025-07-13 20:52:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 31077,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:47.048492"
}
2025-07-13 20:52:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 31077,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:47.048492"
}
2025-07-13 20:52:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:47] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:52:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:47] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:52:47 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:47.393458"
}
2025-07-13 20:52:47 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:52:47.393458"
}
2025-07-13 20:52:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:47.394410",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:52:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:52:47.394410",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:52:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:47] "GET /health HTTP/1.1" 200 -
2025-07-13 20:52:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:52:47] "GET /health HTTP/1.1" 200 -
2025-07-13 20:53:10 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:10.080895"
}
2025-07-13 20:53:10 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:10.080895"
}
2025-07-13 20:53:10 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:53:10.081771"
}
2025-07-13 20:53:10 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:53:10.081771"
}
2025-07-13 20:53:10 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:10] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:53:10 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:10] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:53:10 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:10.827575",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      },
      {
        "role": "assistant",
        "content": "你好！有什么我可以帮助你的吗？"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO， 5:不知道"
    }
  }
}
2025-07-13 20:53:10 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:10.827575",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      },
      {
        "role": "assistant",
        "content": "你好！有什么我可以帮助你的吗？"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO， 5:不知道"
    }
  }
}
2025-07-13 20:53:10 - INFO - [server.py:443] - [req_1752411190828] 收到生成请求
2025-07-13 20:53:10 - INFO - [server.py:443] - [req_1752411190828] 收到生成请求
2025-07-13 20:53:10 - INFO - [server.py:451] - [req_1752411190828] 请求数据详情:
2025-07-13 20:53:10 - INFO - [server.py:451] - [req_1752411190828] 请求数据详情:
2025-07-13 20:53:10 - INFO - [server.py:452] - [req_1752411190828] - 消息数量: 3
2025-07-13 20:53:10 - INFO - [server.py:452] - [req_1752411190828] - 消息数量: 3
2025-07-13 20:53:10 - INFO - [server.py:453] - [req_1752411190828] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO， 5:不知道"
}
2025-07-13 20:53:10 - INFO - [server.py:453] - [req_1752411190828] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO， 5:不知道"
}
2025-07-13 20:53:10 - DEBUG - [server.py:454] - [req_1752411190828] - 完整消息列表: [
  {
    "role": "user",
    "content": "你好"
  },
  {
    "role": "assistant",
    "content": "你好！有什么我可以帮助你的吗？"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  }
]
2025-07-13 20:53:10 - INFO - [server.py:465] - [req_1752411190828] 开始生成响应...
2025-07-13 20:53:10 - INFO - [server.py:465] - [req_1752411190828] 开始生成响应...
2025-07-13 20:53:10 - INFO - [server.py:201] - ============================================================
2025-07-13 20:53:10 - INFO - [server.py:201] - ============================================================
2025-07-13 20:53:10 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:53:10 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:53:10 - INFO - [server.py:203] - 输入消息数量: 3
2025-07-13 20:53:10 - INFO - [server.py:203] - 输入消息数量: 3
2025-07-13 20:53:10 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:53:10 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:53:10 - DEBUG - [server.py:206] - 消息 1 内容: 你好
2025-07-13 20:53:10 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=15
2025-07-13 20:53:10 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=15
2025-07-13 20:53:10 - DEBUG - [server.py:206] - 消息 2 内容: 你好！有什么我可以帮助你的吗？
2025-07-13 20:53:10 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 20:53:10 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 20:53:10 - DEBUG - [server.py:206] - 消息 3 内容: 什么是YOLO
2025-07-13 20:53:10 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO， 5:不知道"
}
2025-07-13 20:53:10 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO， 5:不知道"
}
2025-07-13 20:53:10 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO， 5:不知道'}
2025-07-13 20:53:10 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO， 5:不知道'}
2025-07-13 20:53:10 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:53:10 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:53:10 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:53:10 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:53:10 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

你好<|eot_id|><|start_header_id|>assistant<|end_header_id|>

你好！有什么我可以帮助你的吗？<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:53:10 - INFO - [server.py:234] - 输入token数量: 38
2025-07-13 20:53:10 - INFO - [server.py:234] - 输入token数量: 38
2025-07-13 20:53:10 - INFO - [server.py:241] - 序列总长度: 88, prompt长度: 38, 生成长度: 50
2025-07-13 20:53:10 - INFO - [server.py:241] - 序列总长度: 88, prompt长度: 38, 生成长度: 50
2025-07-13 20:53:10 - INFO - [server.py:250] - 应用约束数量: 7
2025-07-13 20:53:10 - INFO - [server.py:250] - 应用约束数量: 7
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 38): token_id=100891
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 1 (绝对位置 39): token_id=3251
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 2 (绝对位置 40): token_id=279
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 3 (绝对位置 41): token_id=220
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 4 (绝对位置 42): token_id=20
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 5 (绝对位置 43): token_id=25
2025-07-13 20:53:10 - DEBUG - [server.py:255] - 约束位置 6 (绝对位置 44): token_id=4803
2025-07-13 20:53:10 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:53:10 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:53:10 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:53:10 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:53:10 - DEBUG - [server.py:289] - 块 1, 步骤 1/16
2025-07-13 20:53:10 - DEBUG - [server.py:289] - 块 1, 步骤 2/16
2025-07-13 20:53:10 - DEBUG - [server.py:289] - 块 1, 步骤 3/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 4/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 5/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 6/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 7/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 8/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 9/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 10/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 11/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 12/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 13/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 14/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 15/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 1, 步骤 16/16
2025-07-13 20:53:11 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:53:11 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 2, 步骤 1/16
2025-07-13 20:53:11 - DEBUG - [server.py:289] - 块 2, 步骤 2/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 3/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 4/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 5/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 6/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 7/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 8/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 9/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 10/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 11/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 12/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 13/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 14/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 15/16
2025-07-13 20:53:12 - DEBUG - [server.py:289] - 块 2, 步骤 16/16
2025-07-13 20:53:12 - INFO - [server.py:395] - 生成后GPU内存使用: 17.55GB
2025-07-13 20:53:12 - INFO - [server.py:395] - 生成后GPU内存使用: 17.55GB
2025-07-13 20:53:12 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:53:12 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:53:12 - INFO - [server.py:398] - 响应文本长度: 100
2025-07-13 20:53:12 - INFO - [server.py:398] - 响应文本长度: 100
2025-07-13 20:53:12 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:53:12 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:53:12 - INFO - [server.py:400] - 生成耗时: 2.04秒
2025-07-13 20:53:12 - INFO - [server.py:400] - 生成耗时: 2.04秒
2025-07-13 20:53:12 - DEBUG - [server.py:401] - 生成的响应文本:  YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:53:12 - INFO - [server.py:402] - ============================================================
2025-07-13 20:53:12 - INFO - [server.py:402] - ============================================================
2025-07-13 20:53:12 - INFO - [server.py:474] - [req_1752411190828] 生成成功!
2025-07-13 20:53:12 - INFO - [server.py:474] - [req_1752411190828] 生成成功!
2025-07-13 20:53:12 - INFO - [server.py:475] - [req_1752411190828] 响应长度: 100
2025-07-13 20:53:12 - INFO - [server.py:475] - [req_1752411190828] 响应长度: 100
2025-07-13 20:53:12 - INFO - [server.py:476] - [req_1752411190828] 可视化步骤: 33
2025-07-13 20:53:12 - INFO - [server.py:476] - [req_1752411190828] 可视化步骤: 33
2025-07-13 20:53:12 - INFO - [server.py:477] - [req_1752411190828] 总耗时: 2.05秒
2025-07-13 20:53:12 - INFO - [server.py:477] - [req_1752411190828] 总耗时: 2.05秒
2025-07-13 20:53:12 - DEBUG - [server.py:478] - [req_1752411190828] 响应文本:  YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:53:12 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 36238,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:12.877937"
}
2025-07-13 20:53:12 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 36238,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:12.877937"
}
2025-07-13 20:53:12 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:12] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:53:12 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:12] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:53:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:17.725270"
}
2025-07-13 20:53:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:17.725270"
}
2025-07-13 20:53:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:17.726118",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:53:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:17.726118",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:53:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:53:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:53:41 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:41.908891"
}
2025-07-13 20:53:41 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:41.908891"
}
2025-07-13 20:53:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:53:41.909548"
}
2025-07-13 20:53:41 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:53:41.909548"
}
2025-07-13 20:53:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:41] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:53:41 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:41] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:53:42 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:42.415217",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      },
      {
        "role": "assistant",
        "content": "你好！有什么我可以帮助你的吗？"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 5:不知道"
    }
  }
}
2025-07-13 20:53:42 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:42.415217",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      },
      {
        "role": "assistant",
        "content": "你好！有什么我可以帮助你的吗？"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 5:不知道"
    }
  }
}
2025-07-13 20:53:42 - INFO - [server.py:443] - [req_1752411222416] 收到生成请求
2025-07-13 20:53:42 - INFO - [server.py:443] - [req_1752411222416] 收到生成请求
2025-07-13 20:53:42 - INFO - [server.py:451] - [req_1752411222416] 请求数据详情:
2025-07-13 20:53:42 - INFO - [server.py:451] - [req_1752411222416] 请求数据详情:
2025-07-13 20:53:42 - INFO - [server.py:452] - [req_1752411222416] - 消息数量: 5
2025-07-13 20:53:42 - INFO - [server.py:452] - [req_1752411222416] - 消息数量: 5
2025-07-13 20:53:42 - INFO - [server.py:453] - [req_1752411222416] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 5:不知道"
}
2025-07-13 20:53:42 - INFO - [server.py:453] - [req_1752411222416] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 5:不知道"
}
2025-07-13 20:53:42 - DEBUG - [server.py:454] - [req_1752411222416] - 完整消息列表: [
  {
    "role": "user",
    "content": "你好"
  },
  {
    "role": "assistant",
    "content": "你好！有什么我可以帮助你的吗？"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  },
  {
    "role": "assistant",
    "content": " YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  }
]
2025-07-13 20:53:42 - INFO - [server.py:465] - [req_1752411222416] 开始生成响应...
2025-07-13 20:53:42 - INFO - [server.py:465] - [req_1752411222416] 开始生成响应...
2025-07-13 20:53:42 - INFO - [server.py:201] - ============================================================
2025-07-13 20:53:42 - INFO - [server.py:201] - ============================================================
2025-07-13 20:53:42 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:53:42 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:53:42 - INFO - [server.py:203] - 输入消息数量: 5
2025-07-13 20:53:42 - INFO - [server.py:203] - 输入消息数量: 5
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:53:42 - DEBUG - [server.py:206] - 消息 1 内容: 你好
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=15
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=15
2025-07-13 20:53:42 - DEBUG - [server.py:206] - 消息 2 内容: 你好！有什么我可以帮助你的吗？
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 20:53:42 - DEBUG - [server.py:206] - 消息 3 内容: 什么是YOLO
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 4: 角色=assistant, 内容长度=100
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 4: 角色=assistant, 内容长度=100
2025-07-13 20:53:42 - DEBUG - [server.py:206] - 消息 4 内容:  YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 5: 角色=user, 内容长度=7
2025-07-13 20:53:42 - INFO - [server.py:205] - 消息 5: 角色=user, 内容长度=7
2025-07-13 20:53:42 - DEBUG - [server.py:206] - 消息 5 内容: 什么是YOLO
2025-07-13 20:53:42 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 5:不知道"
}
2025-07-13 20:53:42 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 5:不知道"
}
2025-07-13 20:53:42 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 5: '不知道'}
2025-07-13 20:53:42 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 5: '不知道'}
2025-07-13 20:53:42 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:53:42 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:53:42 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:53:42 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:53:42 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

你好<|eot_id|><|start_header_id|>assistant<|end_header_id|>

你好！有什么我可以帮助你的吗？<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>

YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:53:42 - INFO - [server.py:234] - 输入token数量: 103
2025-07-13 20:53:42 - INFO - [server.py:234] - 输入token数量: 103
2025-07-13 20:53:42 - INFO - [server.py:241] - 序列总长度: 153, prompt长度: 103, 生成长度: 50
2025-07-13 20:53:42 - INFO - [server.py:241] - 序列总长度: 153, prompt长度: 103, 生成长度: 50
2025-07-13 20:53:42 - INFO - [server.py:250] - 应用约束数量: 3
2025-07-13 20:53:42 - INFO - [server.py:250] - 应用约束数量: 3
2025-07-13 20:53:42 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 103): token_id=100891
2025-07-13 20:53:42 - DEBUG - [server.py:255] - 约束位置 1 (绝对位置 104): token_id=3251
2025-07-13 20:53:42 - DEBUG - [server.py:255] - 约束位置 5 (绝对位置 108): token_id=67292
2025-07-13 20:53:42 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:53:42 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:53:42 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:53:42 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:53:42 - DEBUG - [server.py:289] - 块 1, 步骤 1/16
2025-07-13 20:53:42 - DEBUG - [server.py:289] - 块 1, 步骤 2/16
2025-07-13 20:53:42 - DEBUG - [server.py:289] - 块 1, 步骤 3/16
2025-07-13 20:53:42 - DEBUG - [server.py:289] - 块 1, 步骤 4/16
2025-07-13 20:53:42 - DEBUG - [server.py:289] - 块 1, 步骤 5/16
2025-07-13 20:53:42 - DEBUG - [server.py:289] - 块 1, 步骤 6/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 7/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 8/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 9/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 10/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 11/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 12/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 13/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 14/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 15/16
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 1, 步骤 16/16
2025-07-13 20:53:43 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:53:43 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:53:43 - DEBUG - [server.py:289] - 块 2, 步骤 1/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 2/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 3/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 4/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 5/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 6/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 7/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 8/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 9/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 10/16
2025-07-13 20:53:44 - DEBUG - [server.py:289] - 块 2, 步骤 11/16
2025-07-13 20:53:45 - DEBUG - [server.py:289] - 块 2, 步骤 12/16
2025-07-13 20:53:45 - DEBUG - [server.py:289] - 块 2, 步骤 13/16
2025-07-13 20:53:45 - DEBUG - [server.py:289] - 块 2, 步骤 14/16
2025-07-13 20:53:45 - DEBUG - [server.py:289] - 块 2, 步骤 15/16
2025-07-13 20:53:45 - DEBUG - [server.py:289] - 块 2, 步骤 16/16
2025-07-13 20:53:45 - INFO - [server.py:395] - 生成后GPU内存使用: 19.49GB
2025-07-13 20:53:45 - INFO - [server.py:395] - 生成后GPU内存使用: 19.49GB
2025-07-13 20:53:45 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:53:45 - INFO - [server.py:397] - 生成完成!
2025-07-13 20:53:45 - INFO - [server.py:398] - 响应文本长度: 100
2025-07-13 20:53:45 - INFO - [server.py:398] - 响应文本长度: 100
2025-07-13 20:53:45 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:53:45 - INFO - [server.py:399] - 可视化步骤数: 33
2025-07-13 20:53:45 - INFO - [server.py:400] - 生成耗时: 3.09秒
2025-07-13 20:53:45 - INFO - [server.py:400] - 生成耗时: 3.09秒
2025-07-13 20:53:45 - DEBUG - [server.py:401] - 生成的响应文本:  YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:53:45 - INFO - [server.py:402] - ============================================================
2025-07-13 20:53:45 - INFO - [server.py:402] - ============================================================
2025-07-13 20:53:45 - INFO - [server.py:474] - [req_1752411222416] 生成成功!
2025-07-13 20:53:45 - INFO - [server.py:474] - [req_1752411222416] 生成成功!
2025-07-13 20:53:45 - INFO - [server.py:475] - [req_1752411222416] 响应长度: 100
2025-07-13 20:53:45 - INFO - [server.py:475] - [req_1752411222416] 响应长度: 100
2025-07-13 20:53:45 - INFO - [server.py:476] - [req_1752411222416] 可视化步骤: 33
2025-07-13 20:53:45 - INFO - [server.py:476] - [req_1752411222416] 可视化步骤: 33
2025-07-13 20:53:45 - INFO - [server.py:477] - [req_1752411222416] 总耗时: 3.10秒
2025-07-13 20:53:45 - INFO - [server.py:477] - [req_1752411222416] 总耗时: 3.10秒
2025-07-13 20:53:45 - DEBUG - [server.py:478] - [req_1752411222416] 响应文本:  YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:53:45 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37223,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:45.516505"
}
2025-07-13 20:53:45 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37223,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:45.516505"
}
2025-07-13 20:53:45 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:45] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:53:45 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:45] "POST /generate HTTP/1.1" 200 -
2025-07-13 20:53:47 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:47.606427"
}
2025-07-13 20:53:47 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:53:47.606427"
}
2025-07-13 20:53:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:47.606897",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:53:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:53:47.606897",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:53:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:47] "GET /health HTTP/1.1" 200 -
2025-07-13 20:53:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:53:47] "GET /health HTTP/1.1" 200 -
2025-07-13 20:54:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:17.783723"
}
2025-07-13 20:54:17 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:17.783723"
}
2025-07-13 20:54:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:54:17.784531",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:54:17 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:54:17.784531",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:54:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:54:17 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:17] "GET /health HTTP/1.1" 200 -
2025-07-13 20:54:35 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:35.627478"
}
2025-07-13 20:54:35 - INFO - [server.py:73] - 收到请求: {
  "method": "OPTIONS",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:35.627478"
}
2025-07-13 20:54:35 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:54:35.628528"
}
2025-07-13 20:54:35 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": null,
  "content_type": "text/html; charset=utf-8",
  "timestamp": "2025-07-13T20:54:35.628528"
}
2025-07-13 20:54:35 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:35] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:54:35 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:35] "OPTIONS /generate HTTP/1.1" 200 -
2025-07-13 20:54:36 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:36.102523",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      },
      {
        "role": "assistant",
        "content": "你好！有什么我可以帮助你的吗？"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 8:很棒的"
    }
  }
}
2025-07-13 20:54:36 - INFO - [server.py:73] - 收到请求: {
  "method": "POST",
  "url": "http://localhost:9000/generate",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:36.102523",
  "json_data": {
    "messages": [
      {
        "role": "user",
        "content": "你好"
      },
      {
        "role": "assistant",
        "content": "你好！有什么我可以帮助你的吗？"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      },
      {
        "role": "assistant",
        "content": " YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
      },
      {
        "role": "user",
        "content": "什么是YOLO"
      }
    ],
    "settings": {
      "temperature": 0.7,
      "top_p": 0.95,
      "gen_length": 50,
      "num_beams": 4,
      "steps": 32,
      "cfg_scale": 1,
      "constraints": "0:YOLO, 8:很棒的"
    }
  }
}
2025-07-13 20:54:36 - INFO - [server.py:443] - [req_1752411276103] 收到生成请求
2025-07-13 20:54:36 - INFO - [server.py:443] - [req_1752411276103] 收到生成请求
2025-07-13 20:54:36 - INFO - [server.py:451] - [req_1752411276103] 请求数据详情:
2025-07-13 20:54:36 - INFO - [server.py:451] - [req_1752411276103] 请求数据详情:
2025-07-13 20:54:36 - INFO - [server.py:452] - [req_1752411276103] - 消息数量: 7
2025-07-13 20:54:36 - INFO - [server.py:452] - [req_1752411276103] - 消息数量: 7
2025-07-13 20:54:36 - INFO - [server.py:453] - [req_1752411276103] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:54:36 - INFO - [server.py:453] - [req_1752411276103] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:54:36 - DEBUG - [server.py:454] - [req_1752411276103] - 完整消息列表: [
  {
    "role": "user",
    "content": "你好"
  },
  {
    "role": "assistant",
    "content": "你好！有什么我可以帮助你的吗？"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  },
  {
    "role": "assistant",
    "content": " YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  },
  {
    "role": "assistant",
    "content": " YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。"
  },
  {
    "role": "user",
    "content": "什么是YOLO"
  }
]
2025-07-13 20:54:36 - INFO - [server.py:465] - [req_1752411276103] 开始生成响应...
2025-07-13 20:54:36 - INFO - [server.py:465] - [req_1752411276103] 开始生成响应...
2025-07-13 20:54:36 - INFO - [server.py:201] - ============================================================
2025-07-13 20:54:36 - INFO - [server.py:201] - ============================================================
2025-07-13 20:54:36 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:54:36 - INFO - [server.py:202] - 开始生成响应
2025-07-13 20:54:36 - INFO - [server.py:203] - 输入消息数量: 7
2025-07-13 20:54:36 - INFO - [server.py:203] - 输入消息数量: 7
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 1: 角色=user, 内容长度=2
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 1 内容: 你好
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=15
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 2: 角色=assistant, 内容长度=15
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 2 内容: 你好！有什么我可以帮助你的吗？
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 3: 角色=user, 内容长度=7
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 3 内容: 什么是YOLO
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 4: 角色=assistant, 内容长度=100
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 4: 角色=assistant, 内容长度=100
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 4 内容:  YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 5: 角色=user, 内容长度=7
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 5: 角色=user, 内容长度=7
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 5 内容: 什么是YOLO
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 6: 角色=assistant, 内容长度=100
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 6: 角色=assistant, 内容长度=100
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 6 内容:  YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 7: 角色=user, 内容长度=7
2025-07-13 20:54:36 - INFO - [server.py:205] - 消息 7: 角色=user, 内容长度=7
2025-07-13 20:54:36 - DEBUG - [server.py:206] - 消息 7 内容: 什么是YOLO
2025-07-13 20:54:36 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:54:36 - INFO - [server.py:208] - 设置参数: {
  "temperature": 0.7,
  "top_p": 0.95,
  "gen_length": 50,
  "num_beams": 4,
  "steps": 32,
  "cfg_scale": 1,
  "constraints": "0:YOLO, 8:很棒的"
}
2025-07-13 20:54:36 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 8: '很棒的'}
2025-07-13 20:54:36 - INFO - [server.py:220] - 解析后的约束: {0: 'YOLO', 8: '很棒的'}
2025-07-13 20:54:36 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:54:36 - INFO - [server.py:225] - 生成前GPU内存使用: 14.94GB
2025-07-13 20:54:36 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:54:36 - INFO - [server.py:228] - 准备输入prompt...
2025-07-13 20:54:36 - DEBUG - [server.py:230] - 格式化后的chat输入: <|startoftext|><|start_header_id|>user<|end_header_id|>

你好<|eot_id|><|start_header_id|>assistant<|end_header_id|>

你好！有什么我可以帮助你的吗？<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>

YOLO， 5:不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>

YOLO，5: 不知道什么是YOLO，全称是You Only Look Once，是一种实时检测算法，常用于计算机视觉和图像处理。YOLO算法包括YOLOv1、YOLOv2和YOLOv3等几个版本。<|eot_id|><|start_header_id|>user<|end_header_id|>

什么是YOLO<|eot_id|><|start_header_id|>assistant<|end_header_id|>


2025-07-13 20:54:36 - INFO - [server.py:234] - 输入token数量: 167
2025-07-13 20:54:36 - INFO - [server.py:234] - 输入token数量: 167
2025-07-13 20:54:36 - INFO - [server.py:241] - 序列总长度: 217, prompt长度: 167, 生成长度: 50
2025-07-13 20:54:36 - INFO - [server.py:241] - 序列总长度: 217, prompt长度: 167, 生成长度: 50
2025-07-13 20:54:36 - INFO - [server.py:250] - 应用约束数量: 4
2025-07-13 20:54:36 - INFO - [server.py:250] - 应用约束数量: 4
2025-07-13 20:54:36 - DEBUG - [server.py:255] - 约束位置 0 (绝对位置 167): token_id=100891
2025-07-13 20:54:36 - DEBUG - [server.py:255] - 约束位置 1 (绝对位置 168): token_id=3251
2025-07-13 20:54:36 - DEBUG - [server.py:255] - 约束位置 8 (绝对位置 175): token_id=60371
2025-07-13 20:54:36 - DEBUG - [server.py:255] - 约束位置 9 (绝对位置 176): token_id=70150
2025-07-13 20:54:36 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:54:36 - INFO - [server.py:270] - 块处理配置: 块长度=32, 块数量=2, 每块步数=16
2025-07-13 20:54:36 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:54:36 - INFO - [server.py:274] - 处理第 1/2 块...
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 1/16
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 2/16
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 3/16
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 4/16
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 5/16
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 6/16
2025-07-13 20:54:36 - DEBUG - [server.py:289] - 块 1, 步骤 7/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 8/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 9/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 10/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 11/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 12/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 13/16
2025-07-13 20:54:37 - DEBUG - [server.py:289] - 块 1, 步骤 14/16
2025-07-13 20:54:38 - DEBUG - [server.py:289] - 块 1, 步骤 15/16
2025-07-13 20:54:38 - DEBUG - [server.py:289] - 块 1, 步骤 16/16
2025-07-13 20:54:38 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:54:38 - INFO - [server.py:274] - 处理第 2/2 块...
2025-07-13 20:54:38 - DEBUG - [server.py:289] - 块 2, 步骤 1/16
2025-07-13 20:54:38 - ERROR - [server.py:411] - 生成过程中发生错误!
2025-07-13 20:54:38 - ERROR - [server.py:411] - 生成过程中发生错误!
2025-07-13 20:54:38 - ERROR - [server.py:412] - 错误类型: OutOfMemoryError
2025-07-13 20:54:38 - ERROR - [server.py:412] - 错误类型: OutOfMemoryError
2025-07-13 20:54:38 - ERROR - [server.py:413] - 错误信息: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 
2025-07-13 20:54:38 - ERROR - [server.py:413] - 错误信息: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 
2025-07-13 20:54:38 - ERROR - [server.py:414] - 错误发生时间: 2025-07-13T20:54:38.282056
2025-07-13 20:54:38 - ERROR - [server.py:414] - 错误发生时间: 2025-07-13T20:54:38.282056
2025-07-13 20:54:38 - ERROR - [server.py:415] - 生成耗时(至错误): 2.18秒
2025-07-13 20:54:38 - ERROR - [server.py:415] - 生成耗时(至错误): 2.18秒
2025-07-13 20:54:38 - ERROR - [server.py:416] - 输入消息数量: 7
2025-07-13 20:54:38 - ERROR - [server.py:416] - 输入消息数量: 7
2025-07-13 20:54:38 - ERROR - [server.py:417] - 设置参数: {"temperature": 0.7, "top_p": 0.95, "gen_length": 50, "num_beams": 4, "steps": 32, "cfg_scale": 1, "constraints": "0:YOLO, 8:很棒的"}
2025-07-13 20:54:38 - ERROR - [server.py:417] - 设置参数: {"temperature": 0.7, "top_p": 0.95, "gen_length": 50, "num_beams": 4, "steps": 32, "cfg_scale": 1, "constraints": "0:YOLO, 8:很棒的"}
2025-07-13 20:54:38 - ERROR - [server.py:418] - 详细错误堆栈:
2025-07-13 20:54:38 - ERROR - [server.py:418] - 详细错误堆栈:
2025-07-13 20:54:38 - ERROR - [server.py:419] - Traceback (most recent call last):
  File "/root/LLaDA-main/lldm/server.py", line 301, in generate_response
    logits = model(x_).logits
             ^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1418, in forward
    outputs = self.model.forward(
              ^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1315, in forward
    x, cache = block(x, attention_bias=attention_bias, layer_past=layer_past, use_cache=use_cache)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 911, in forward
    att, cache = self.attention(q, k, v, attention_bias, layer_past=layer_past, use_cache=use_cache)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 697, in attention
    q, k = self.rotary_emb(q, k)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 422, in forward
    q_ = self.apply_rotary_pos_emb(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 409, in apply_rotary_pos_emb
    return ((t * pos_cos) + (self.rotate_half(t) * pos_sin)).to(t.dtype)
                             ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 

2025-07-13 20:54:38 - ERROR - [server.py:419] - Traceback (most recent call last):
  File "/root/LLaDA-main/lldm/server.py", line 301, in generate_response
    logits = model(x_).logits
             ^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1418, in forward
    outputs = self.model.forward(
              ^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1315, in forward
    x, cache = block(x, attention_bias=attention_bias, layer_past=layer_past, use_cache=use_cache)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 911, in forward
    att, cache = self.attention(q, k, v, attention_bias, layer_past=layer_past, use_cache=use_cache)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 697, in attention
    q, k = self.rotary_emb(q, k)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 422, in forward
    q_ = self.apply_rotary_pos_emb(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 409, in apply_rotary_pos_emb
    return ((t * pos_cos) + (self.rotate_half(t) * pos_sin)).to(t.dtype)
                             ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 

2025-07-13 20:54:38 - INFO - [server.py:420] - ============================================================
2025-07-13 20:54:38 - INFO - [server.py:420] - ============================================================
2025-07-13 20:54:38 - ERROR - [server.py:492] - [req_1752411276103] 生成过程中发生错误!
2025-07-13 20:54:38 - ERROR - [server.py:492] - [req_1752411276103] 生成过程中发生错误!
2025-07-13 20:54:38 - ERROR - [server.py:493] - [req_1752411276103] 错误类型: OutOfMemoryError
2025-07-13 20:54:38 - ERROR - [server.py:493] - [req_1752411276103] 错误类型: OutOfMemoryError
2025-07-13 20:54:38 - ERROR - [server.py:494] - [req_1752411276103] 错误信息: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 
2025-07-13 20:54:38 - ERROR - [server.py:494] - [req_1752411276103] 错误信息: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 
2025-07-13 20:54:38 - ERROR - [server.py:495] - [req_1752411276103] 错误耗时: 2.18秒
2025-07-13 20:54:38 - ERROR - [server.py:495] - [req_1752411276103] 错误耗时: 2.18秒
2025-07-13 20:54:38 - ERROR - [server.py:496] - [req_1752411276103] 错误堆栈:
2025-07-13 20:54:38 - ERROR - [server.py:496] - [req_1752411276103] 错误堆栈:
2025-07-13 20:54:38 - ERROR - [server.py:497] - Traceback (most recent call last):
  File "/root/LLaDA-main/lldm/server.py", line 468, in generate
    response_text, visualization = generate_response(messages, settings)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/LLaDA-main/lldm/server.py", line 427, in generate_response
    raise e
  File "/root/LLaDA-main/lldm/server.py", line 301, in generate_response
    logits = model(x_).logits
             ^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1418, in forward
    outputs = self.model.forward(
              ^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1315, in forward
    x, cache = block(x, attention_bias=attention_bias, layer_past=layer_past, use_cache=use_cache)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 911, in forward
    att, cache = self.attention(q, k, v, attention_bias, layer_past=layer_past, use_cache=use_cache)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 697, in attention
    q, k = self.rotary_emb(q, k)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 422, in forward
    q_ = self.apply_rotary_pos_emb(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 409, in apply_rotary_pos_emb
    return ((t * pos_cos) + (self.rotate_half(t) * pos_sin)).to(t.dtype)
                             ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 

2025-07-13 20:54:38 - ERROR - [server.py:497] - Traceback (most recent call last):
  File "/root/LLaDA-main/lldm/server.py", line 468, in generate
    response_text, visualization = generate_response(messages, settings)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/LLaDA-main/lldm/server.py", line 427, in generate_response
    raise e
  File "/root/LLaDA-main/lldm/server.py", line 301, in generate_response
    logits = model(x_).logits
             ^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1418, in forward
    outputs = self.model.forward(
              ^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 1315, in forward
    x, cache = block(x, attention_bias=attention_bias, layer_past=layer_past, use_cache=use_cache)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 911, in forward
    att, cache = self.attention(q, k, v, attention_bias, layer_past=layer_past, use_cache=use_cache)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 697, in attention
    q, k = self.rotary_emb(q, k)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 422, in forward
    q_ = self.apply_rotary_pos_emb(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/root/.cache/huggingface/modules/transformers_modules/model/modeling_llada.py", line 409, in apply_rotary_pos_emb
    return ((t * pos_cos) + (self.rotate_half(t) * pos_sin)).to(t.dtype)
                             ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 

2025-07-13 20:54:38 - INFO - [server.py:92] - 发送响应: {
  "status_code": 500,
  "content_length": 131,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:54:38.286830",
  "response_body": "{\"error\":\"CUDA out of memory. Tried to allocate 20.00 MiB. GPU \",\"error_type\":\"OutOfMemoryError\",\"request_id\":\"req_1752411276103\"}\n"
}
2025-07-13 20:54:38 - INFO - [server.py:92] - 发送响应: {
  "status_code": 500,
  "content_length": 131,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:54:38.286830",
  "response_body": "{\"error\":\"CUDA out of memory. Tried to allocate 20.00 MiB. GPU \",\"error_type\":\"OutOfMemoryError\",\"request_id\":\"req_1752411276103\"}\n"
}
2025-07-13 20:54:38 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:38] "[35m[1mPOST /generate HTTP/1.1[0m" 500 -
2025-07-13 20:54:38 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:38] "[35m[1mPOST /generate HTTP/1.1[0m" 500 -
2025-07-13 20:54:47 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:47.338259"
}
2025-07-13 20:54:47 - INFO - [server.py:73] - 收到请求: {
  "method": "GET",
  "url": "http://localhost:9000/health",
  "remote_addr": "127.0.0.1",
  "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0",
  "timestamp": "2025-07-13T20:54:47.338259"
}
2025-07-13 20:54:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:54:47.338596",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:54:47 - INFO - [server.py:92] - 发送响应: {
  "status_code": 200,
  "content_length": 37,
  "content_type": "application/json",
  "timestamp": "2025-07-13T20:54:47.338596",
  "response_body": "{\"device\":\"cuda\",\"status\":\"healthy\"}\n"
}
2025-07-13 20:54:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:47] "GET /health HTTP/1.1" 200 -
2025-07-13 20:54:47 - INFO - [_internal.py:97] - 127.0.0.1 - - [13/Jul/2025 20:54:47] "GET /health HTTP/1.1" 200 -
