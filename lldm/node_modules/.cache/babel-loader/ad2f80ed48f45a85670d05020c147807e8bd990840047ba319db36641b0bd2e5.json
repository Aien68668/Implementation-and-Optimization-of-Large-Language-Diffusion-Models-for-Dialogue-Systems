{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{sendMessage,getStatus,generateText,checkServerStatus}from'./services/apiService';import ConfidenceIndicator from'./components/ConfidenceIndicator';import MessageList from'./components/MessageList';import SettingsPanel from'./components/SettingsPanel';import InputArea from'./components/InputArea';import Sidebar from'./components/Sidebar';import'./styles/Sidebar.css';import'./styles/DiffusionModel.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DiffusionModel=()=>{const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[isGenerating,setIsGenerating]=useState(false);const[chatHistory,setChatHistory]=useState([]);const[constraints,setConstraints]=useState('');const[serverError,setServerError]=useState(null);const[confidence,setConfidence]=useState(0);const[isWaitingForResponse,setIsWaitingForResponse]=useState(false);const[settings,setSettings]=useState({temperature:0.7,top_p:0.95,gen_length:50,num_beams:4,steps:32,cfg_scale:1.0});// --- Conversation Management State ---\nconst[conversations,setConversations]=useState([{id:0,name:'对话 1',history:[]}]);const[currentConversationId,setCurrentConversationId]=useState(0);const[systemStatus,setSystemStatus]=useState({backendConnected:false,device:'Unknown',modelLoaded:false,lastCheck:null});const messagesEndRef=useRef(null);useEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});},[messages]);// --- Conversation Management Handlers ---\nconst handleNewConversation=()=>{// Save the current conversation's history first.\nconst updatedConversations=conversations.map(conv=>conv.id===currentConversationId?{...conv,history:messages}:conv);// Create the new conversation.\nconst newConversationId=Date.now();// Use timestamp for unique ID\nconst newConversation={id:newConversationId,name:`对话 ${updatedConversations.length+1}`,history:[]};setConversations([...updatedConversations,newConversation]);setCurrentConversationId(newConversationId);setMessages([]);// Clear messages for the new conversation\nsetInput('');setConfidence(0);setIsWaitingForResponse(false);};const handleSwitchConversation=id=>{if(id===currentConversationId)return;// Save the current conversation's history before switching.\nconst updatedConversations=conversations.map(conv=>conv.id===currentConversationId?{...conv,history:messages}:conv);const newCurrentConversation=updatedConversations.find(conv=>conv.id===id);if(newCurrentConversation){setConversations(updatedConversations);setCurrentConversationId(newCurrentConversation.id);setMessages(newCurrentConversation.history||[]);}};const handleDeleteConversation=id=>{const updatedConversations=conversations.filter(conv=>conv.id!==id);setConversations(updatedConversations);if(id===currentConversationId){if(updatedConversations.length>0){const firstConv=updatedConversations[0];setCurrentConversationId(firstConv.id);setMessages(firstConv.history||[]);}else{// If all conversations are deleted, create a new default one.\nconst newId=Date.now();const newConv={id:newId,name:'对话 1',history:[]};setConversations([newConv]);setCurrentConversationId(newId);setMessages([]);}}};// 生成完整的回复\nconst generateResponse=async userMessage=>{setIsGenerating(true);setServerError(null);try{// 添加用户消息\nconst userMsg={id:Date.now(),text:userMessage,sender:'user',timestamp:new Date(),isGenerated:true};setMessages(prev=>[...prev,userMsg]);// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:userMessage}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prev=>[...prev,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,300));}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nconst finalChatHistory=[...newChatHistory,{role:'assistant',content:response.response}];setChatHistory(finalChatHistory);updateCurrentConversation(updatedMessages,finalChatHistory);return updatedMessages;});}catch(error){console.error('生成响应时出错:',error);setServerError(error.message||'服务器连接失败');// 移除未完成的bot消息\nsetMessages(prev=>prev.filter(msg=>msg.id!==Date.now()+1));}finally{setIsGenerating(false);}};const handleSend=async()=>{if(input.trim()===''||isWaitingForResponse)return;const userMessage={id:Date.now(),text:input,sender:'user',timestamp:new Date()};setMessages(prevMessages=>[...prevMessages,userMessage]);const userInput=input;setInput('');setIsWaitingForResponse(true);setIsGenerating(true);setServerError(null);try{// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:userInput}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prevMessages=>[...prevMessages,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,300));// 增加延迟以便观察转换效果\n}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nupdateCurrentConversation(updatedMessages);return updatedMessages;});setConfidence(response.confidence||0);}catch(error){console.error('发送消息时出错:',error);const errorMessage={id:Date.now()+2,text:'发送消息时出错: '+(error.message||'未知错误'),sender:'bot',timestamp:new Date()};setMessages(prevMessages=>prevMessages.slice(0,-1).concat([errorMessage]));setServerError(error.message||'服务器连接失败');}finally{setIsWaitingForResponse(false);setIsGenerating(false);}};const handleRegenerateResponse=async()=>{setIsGenerating(true);setServerError(null);try{// 获取最后一条消息作为重发的基础\nconst lastUserMessage=messages.slice().reverse().find(msg=>msg.sender==='user');if(!lastUserMessage){throw new Error('未找到可重发的消息');}// 添加用户消息\nconst userMsg={id:Date.now(),text:lastUserMessage.text,sender:'user',timestamp:new Date(),isGenerated:true};setMessages(prev=>[...prev,userMsg]);// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:lastUserMessage.text}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prev=>[...prev,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,300));}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nupdateCurrentConversation(updatedMessages);return updatedMessages;});setConfidence(response.confidence||0);}catch(error){console.error('重发消息时出错:',error);const errorMessage={id:Date.now()+2,text:'重发消息时出错: '+(error.message||'未知错误'),sender:'bot',timestamp:new Date()};setMessages(prevMessages=>prevMessages.slice(0,-1).concat([errorMessage]));setServerError(error.message||'服务器连接失败');}finally{setIsGenerating(false);}};// 辅助函数：更新当前对话\nconst updateCurrentConversation=(updatedMessages,finalChatHistory)=>{// 更新当前对话的历史\nsetConversations(prev=>{return prev.map(conv=>{if(conv.id===currentConversationId){return{...conv,history:updatedMessages};}return conv;});});};// 解析可视化状态\nconst parseVisualizationState=step=>{if(!step||!Array.isArray(step)){return[];}return step.map((tokenData,index)=>{// tokenData是 [token_text, color] 的格式\nconst[tokenText,color]=tokenData;return{id:index,char:tokenText,confidence:getConfidenceFromColor(color),color:color,isGenerated:tokenText!=='[MASK]'};});};// 从颜色推断置信度（与app.py保持一致）\nconst getConfidenceFromColor=color=>{switch(color){case'#444444':return 0;// [MASK] - 深灰色\ncase'#FF6666':return 0.2;// 低置信度 - 红色\ncase'#FFAA33':return 0.5;// 中置信度 - 橙色\ncase'#66CC66':return 0.8;// 高置信度 - 绿色\ncase'#6699CC':return 1.0;// 之前生成的token - 蓝色\ndefault:return 0.5;}};// 获取置信度颜色（与app.py保持一致）\nconst getColorFromConfidence=confidence=>{if(confidence<0.3)return'#FF6666';// 低置信度：红色\nif(confidence<0.7)return'#FFAA33';// 中置信度：橙色\nreturn'#66CC66';// 高置信度：绿色\n};// 处理按键按下事件\nconst handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSend();}};// 检查服务器状态\nuseEffect(()=>{const checkStatus=async()=>{try{const status=await getStatus();setServerError(null);setSystemStatus({backendConnected:true,device:status.device||'Unknown',modelLoaded:true,lastCheck:new Date()});}catch(error){setServerError('服务器连接失败');setSystemStatus({backendConnected:false,device:'Unknown',modelLoaded:false,lastCheck:new Date()});}};checkStatus();const interval=setInterval(checkStatus,30000);// 每30秒检查一次\nreturn()=>clearInterval(interval);},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"diffusion-model\",children:[/*#__PURE__*/_jsx(Sidebar,{conversations:conversations,activeConversationId:currentConversationId,onNewConversation:handleNewConversation,onSelectConversation:handleSwitchConversation,onDeleteConversation:handleDeleteConversation,systemStatus:systemStatus,isGenerating:isGenerating}),/*#__PURE__*/_jsx(\"div\",{className:\"main-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages,isGenerating:isGenerating,serverError:serverError,getConfidenceColor:getColorFromConfidence,formatTime:timestamp=>new Date(timestamp).toLocaleTimeString(),messagesEndRef:messagesEndRef}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-area-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"settings-container\",children:/*#__PURE__*/_jsxs(\"details\",{className:\"settings-details\",children:[/*#__PURE__*/_jsx(\"summary\",{className:\"settings-toggle\",children:\"\\u2699\\uFE0F \\u6A21\\u578B\\u8BBE\\u7F6E\"}),/*#__PURE__*/_jsx(\"div\",{className:\"settings-content\",children:/*#__PURE__*/_jsx(SettingsPanel,{settings:settings,setSettings:setSettings,isGenerating:isGenerating})})]})}),/*#__PURE__*/_jsx(InputArea,{inputValue:input,setInputValue:setInput,constraints:constraints,setConstraints:setConstraints,handleSend:handleSend,handleKeyPress:handleKeyPress,isGenerating:isGenerating})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"settings-sidebar\",children:/*#__PURE__*/_jsx(ConfidenceIndicator,{})})]});};export default DiffusionModel;","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","generateText","checkServerStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsx","_jsx","jsxs","_jsxs","DiffusionModel","messages","setMessages","input","setInput","isGenerating","setIsGenerating","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","steps","cfg_scale","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","systemStatus","setSystemStatus","backendConnected","device","modelLoaded","lastCheck","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","generateResponse","userMessage","userMsg","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","_","index","char","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","step","parseVisualizationState","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","handleSend","trim","prevMessages","userInput","errorMessage","slice","concat","handleRegenerateResponse","lastUserMessage","reverse","isArray","tokenData","tokenText","getConfidenceFromColor","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","checkStatus","status","interval","setInterval","clearInterval","className","children","activeConversationId","onNewConversation","onSelectConversation","onDeleteConversation","getConfidenceColor","formatTime","toLocaleTimeString","inputValue","setInputValue"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { sendMessage, getStatus, generateText, checkServerStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport './styles/Sidebar.css';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [constraints, setConstraints] = useState('');\r\n    const [serverError, setServerError] = useState(null);\r\n    const [confidence, setConfidence] = useState(0);\r\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\r\n    const [settings, setSettings] = useState({\r\n        temperature: 0.7,\r\n        top_p: 0.95,\r\n        gen_length: 50,\r\n        num_beams: 4,\r\n        steps: 32,\r\n        cfg_scale: 1.0\r\n    });\r\n\r\n    // --- Conversation Management State ---\r\n    const [conversations, setConversations] = useState([\r\n        { id: 0, name: '对话 1', history: [] }\r\n    ]);\r\n    const [currentConversationId, setCurrentConversationId] = useState(0);\r\n    const [systemStatus, setSystemStatus] = useState({\r\n        backendConnected: false,\r\n        device: 'Unknown',\r\n        modelLoaded: false,\r\n        lastCheck: null\r\n    });\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // --- Conversation Management Handlers ---\r\n\r\n    const handleNewConversation = () => {\r\n        // Save the current conversation's history first.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        // Create the new conversation.\r\n        const newConversationId = Date.now(); // Use timestamp for unique ID\r\n        const newConversation = {\r\n            id: newConversationId,\r\n            name: `对话 ${updatedConversations.length + 1}`,\r\n            history: []\r\n        };\r\n\r\n        setConversations([...updatedConversations, newConversation]);\r\n        setCurrentConversationId(newConversationId);\r\n        setMessages([]); // Clear messages for the new conversation\r\n        setInput('');\r\n        setConfidence(0);\r\n        setIsWaitingForResponse(false);\r\n    };\r\n\r\n    const handleSwitchConversation = (id) => {\r\n        if (id === currentConversationId) return;\r\n\r\n        // Save the current conversation's history before switching.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\r\n\r\n        if (newCurrentConversation) {\r\n            setConversations(updatedConversations);\r\n            setCurrentConversationId(newCurrentConversation.id);\r\n            setMessages(newCurrentConversation.history || []);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConversation = (id) => {\r\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\r\n        setConversations(updatedConversations);\r\n\r\n        if (id === currentConversationId) {\r\n            if (updatedConversations.length > 0) {\r\n                const firstConv = updatedConversations[0];\r\n                setCurrentConversationId(firstConv.id);\r\n                setMessages(firstConv.history || []);\r\n            } else {\r\n                // If all conversations are deleted, create a new default one.\r\n                const newId = Date.now();\r\n                const newConv = { id: newId, name: '对话 1', history: [] };\r\n                setConversations([newConv]);\r\n                setCurrentConversationId(newId);\r\n                setMessages([]);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // 生成完整的回复\r\n    const generateResponse = async (userMessage) => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: userMessage,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userMessage }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 300));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                const finalChatHistory = [\r\n                    ...newChatHistory,\r\n                    { role: 'assistant', content: response.response }\r\n                ];\r\n                setChatHistory(finalChatHistory);\r\n                updateCurrentConversation(updatedMessages, finalChatHistory);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('生成响应时出错:', error);\r\n            setServerError(error.message || '服务器连接失败');\r\n            \r\n            // 移除未完成的bot消息\r\n            setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (input.trim() === '' || isWaitingForResponse) return;\r\n        \r\n        const userMessage = { \r\n            id: Date.now(),\r\n            text: input, \r\n            sender: 'user',\r\n            timestamp: new Date()\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, userMessage]);\r\n        const userInput = input;\r\n        setInput('');\r\n        setIsWaitingForResponse(true);\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n\r\n        try {\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userInput }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prevMessages => [...prevMessages, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 300)); // 增加延迟以便观察转换效果\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                updateCurrentConversation(updatedMessages);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n            setConfidence(response.confidence || 0);\r\n            \r\n        } catch (error) {\r\n            console.error('发送消息时出错:', error);\r\n            const errorMessage = { \r\n                id: Date.now() + 2,\r\n                text: '发送消息时出错: ' + (error.message || '未知错误'), \r\n                sender: 'bot',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\r\n            setServerError(error.message || '服务器连接失败');\r\n        } finally {\r\n            setIsWaitingForResponse(false);\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleRegenerateResponse = async () => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 获取最后一条消息作为重发的基础\r\n            const lastUserMessage = messages\r\n                .slice()\r\n                .reverse()\r\n                .find(msg => msg.sender === 'user');\r\n\r\n            if (!lastUserMessage) {\r\n                throw new Error('未找到可重发的消息');\r\n            }\r\n\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: lastUserMessage.text,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: lastUserMessage.text }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 300));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                updateCurrentConversation(updatedMessages);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n            setConfidence(response.confidence || 0);\r\n            \r\n        } catch (error) {\r\n            console.error('重发消息时出错:', error);\r\n            const errorMessage = { \r\n                id: Date.now() + 2,\r\n                text: '重发消息时出错: ' + (error.message || '未知错误'), \r\n                sender: 'bot',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\r\n            setServerError(error.message || '服务器连接失败');\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    // 辅助函数：更新当前对话\r\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\r\n        // 更新当前对话的历史\r\n        setConversations(prev => {\r\n            return prev.map(conv => {\r\n                if (conv.id === currentConversationId) {\r\n                    return { ...conv, history: updatedMessages };\r\n                }\r\n                return conv;\r\n            });\r\n        });\r\n    };\r\n\r\n    // 解析可视化状态\r\n    const parseVisualizationState = (step) => {\r\n        if (!step || !Array.isArray(step)) {\r\n            return [];\r\n        }\r\n\r\n        return step.map((tokenData, index) => {\r\n            // tokenData是 [token_text, color] 的格式\r\n            const [tokenText, color] = tokenData;\r\n            \r\n            return {\r\n                id: index,\r\n                char: tokenText,\r\n                confidence: getConfidenceFromColor(color),\r\n                color: color,\r\n                isGenerated: tokenText !== '[MASK]'\r\n            };\r\n        });\r\n    };\r\n\r\n    // 从颜色推断置信度（与app.py保持一致）\r\n    const getConfidenceFromColor = (color) => {\r\n        switch (color) {\r\n            case '#444444': return 0;     // [MASK] - 深灰色\r\n            case '#FF6666': return 0.2;   // 低置信度 - 红色\r\n            case '#FFAA33': return 0.5;   // 中置信度 - 橙色\r\n            case '#66CC66': return 0.8;   // 高置信度 - 绿色\r\n            case '#6699CC': return 1.0;   // 之前生成的token - 蓝色\r\n            default: return 0.5;\r\n        }\r\n    };\r\n\r\n    // 获取置信度颜色（与app.py保持一致）\r\n    const getColorFromConfidence = (confidence) => {\r\n        if (confidence < 0.3) return '#FF6666'; // 低置信度：红色\r\n        if (confidence < 0.7) return '#FFAA33'; // 中置信度：橙色\r\n        return '#66CC66';                       // 高置信度：绿色\r\n    };\r\n\r\n    // 处理按键按下事件\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSend();\r\n        }\r\n    };\r\n\r\n    // 检查服务器状态\r\n    useEffect(() => {\r\n        const checkStatus = async () => {\r\n            try {\r\n                const status = await getStatus();\r\n                setServerError(null);\r\n                setSystemStatus({\r\n                    backendConnected: true,\r\n                    device: status.device || 'Unknown',\r\n                    modelLoaded: true,\r\n                    lastCheck: new Date()\r\n                });\r\n            } catch (error) {\r\n                setServerError('服务器连接失败');\r\n                setSystemStatus({\r\n                    backendConnected: false,\r\n                    device: 'Unknown',\r\n                    modelLoaded: false,\r\n                    lastCheck: new Date()\r\n                });\r\n            }\r\n        };\r\n\r\n        checkStatus();\r\n        const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"diffusion-model\">\r\n            <Sidebar\r\n                conversations={conversations}\r\n                activeConversationId={currentConversationId}\r\n                onNewConversation={handleNewConversation}\r\n                onSelectConversation={handleSwitchConversation}\r\n                onDeleteConversation={handleDeleteConversation}\r\n                systemStatus={systemStatus}\r\n                isGenerating={isGenerating}\r\n            />\r\n            <div className=\"main-content\">\r\n                <div className=\"chat-container\">\r\n                    <MessageList \r\n                        messages={messages} \r\n                        isGenerating={isGenerating}\r\n                        serverError={serverError}\r\n                        getConfidenceColor={getColorFromConfidence}\r\n                        formatTime={(timestamp) => new Date(timestamp).toLocaleTimeString()}\r\n                        messagesEndRef={messagesEndRef}\r\n                    />\r\n                    <div className=\"input-area-container\">\r\n                        {/* 设置面板 - 移到输入区域上方 */}\r\n                        <div className=\"settings-container\">\r\n                            <details className=\"settings-details\">\r\n                                <summary className=\"settings-toggle\">⚙️ 模型设置</summary>\r\n                                <div className=\"settings-content\">\r\n                                    <SettingsPanel \r\n                                        settings={settings}\r\n                                        setSettings={setSettings}\r\n                                        isGenerating={isGenerating}\r\n                                    />\r\n                                </div>\r\n                            </details>\r\n                        </div>\r\n                        \r\n                        <InputArea \r\n                            inputValue={input}\r\n                            setInputValue={setInput}\r\n                            constraints={constraints}\r\n                            setConstraints={setConstraints}\r\n                            handleSend={handleSend}\r\n                            handleKeyPress={handleKeyPress}\r\n                            isGenerating={isGenerating}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            {/* 右侧设置边栏 - 只保留置信度颜色说明 */}\r\n            <div className=\"settings-sidebar\">\r\n                <ConfidenceIndicator />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}