{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendMessage, getStatus, generateText, checkServerStatus } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport './styles/Sidebar.css';\nimport './styles/DiffusionModel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [showIndicator, setShowIndicator] = useState(false);\n  const [indicatorPosition, setIndicatorPosition] = useState({\n    x: 20,\n    y: 100\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const [confidence, setConfidence] = useState(0);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [settings, setSettings] = useState({\n    temperature: 0.7,\n    top_p: 0.95,\n    gen_length: 50,\n    num_beams: 4,\n    steps: 32,\n    cfg_scale: 1.0\n  });\n\n  // --- Conversation Management State ---\n  const [conversations, setConversations] = useState([{\n    id: 0,\n    name: '对话 1',\n    history: []\n  }]);\n  const [currentConversationId, setCurrentConversationId] = useState(0);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // --- Conversation Management Handlers ---\n\n  const handleNewConversation = () => {\n    // Save the current conversation's history first.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n\n    // Create the new conversation.\n    const newConversationId = Date.now(); // Use timestamp for unique ID\n    const newConversation = {\n      id: newConversationId,\n      name: `对话 ${updatedConversations.length + 1}`,\n      history: []\n    };\n    setConversations([...updatedConversations, newConversation]);\n    setCurrentConversationId(newConversationId);\n    setMessages([]); // Clear messages for the new conversation\n    setInput('');\n    setConfidence(0);\n    setIsWaitingForResponse(false);\n  };\n  const handleSwitchConversation = id => {\n    if (id === currentConversationId) return;\n\n    // Save the current conversation's history before switching.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n    const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\n    if (newCurrentConversation) {\n      setConversations(updatedConversations);\n      setCurrentConversationId(newCurrentConversation.id);\n      setMessages(newCurrentConversation.history || []);\n    }\n  };\n  const handleDeleteConversation = id => {\n    const updatedConversations = conversations.filter(conv => conv.id !== id);\n    setConversations(updatedConversations);\n    if (id === currentConversationId) {\n      if (updatedConversations.length > 0) {\n        const firstConv = updatedConversations[0];\n        setCurrentConversationId(firstConv.id);\n        setMessages(firstConv.history || []);\n      } else {\n        // If all conversations are deleted, create a new default one.\n        const newId = Date.now();\n        const newConv = {\n          id: newId,\n          name: '对话 1',\n          history: []\n        };\n        setConversations([newConv]);\n        setCurrentConversationId(newId);\n        setMessages([]);\n      }\n    }\n  };\n\n  // 生成完整的回复\n  const generateResponse = async userMessage => {\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 添加用户消息\n      const userMsg = {\n        id: Date.now(),\n        text: userMessage,\n        sender: 'user',\n        timestamp: new Date(),\n        isGenerated: true\n      };\n      setMessages(prev => [...prev, userMsg]);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userMessage\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await sendMessage(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        const finalChatHistory = [...newChatHistory, {\n          role: 'assistant',\n          content: response.response\n        }];\n        setChatHistory(finalChatHistory);\n        updateCurrentConversation(updatedMessages, finalChatHistory);\n        return updatedMessages;\n      });\n    } catch (error) {\n      console.error('生成响应时出错:', error);\n      setServerError(error.message || '服务器连接失败');\n\n      // 移除未完成的bot消息\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleSend = async () => {\n    if (input.trim() === '' || isWaitingForResponse) return;\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput('');\n    setIsWaitingForResponse(true);\n    try {\n      // 调用后端API发送消息\n      const response = await sendMessage([{\n        role: 'user',\n        content: input\n      }]);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n      const botMessage = {\n        id: Date.now() + 1,\n        text: response.response,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setConfidence(response.confidence || 0);\n\n      // 保存到当前对话\n      const updatedMessages = [...messages, userMessage, botMessage];\n      updateCurrentConversation(updatedMessages);\n    } catch (error) {\n      console.error('发送消息时出错:', error);\n      const errorMessage = {\n        id: Date.now() + 2,\n        text: '发送消息时出错: ' + (error.message || '未知错误'),\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsWaitingForResponse(false);\n    }\n  };\n\n  // 辅助函数：更新当前对话\n  const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\n    // 更新当前对话的历史\n    setConversations(prev => {\n      return prev.map(conv => {\n        if (conv.id === currentConversationId) {\n          return {\n            ...conv,\n            history: updatedMessages\n          };\n        }\n        return conv;\n      });\n    });\n  };\n\n  // 解析可视化状态\n  const parseVisualizationState = step => {\n    if (!step || !Array.isArray(step.tokens)) {\n      return [];\n    }\n    return step.tokens.map((token, index) => ({\n      id: index,\n      char: token.text || '[MASK]',\n      confidence: token.confidence || 0,\n      color: getColorFromConfidence(token.confidence || 0),\n      isGenerated: true\n    }));\n  };\n\n  // 获取置信度颜色\n  const getColorFromConfidence = confidence => {\n    // 根据置信度返回颜色\n    if (confidence < 0.3) return '#ff4d4d'; // 低置信度：红色\n    if (confidence < 0.7) return '#ffaa33'; // 中置信度：橙色\n    return '#44cc44'; // 高置信度：绿色\n  };\n\n  // 处理按键按下事件\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // 检查服务器状态\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        await getStatus();\n        setServerError(null);\n      } catch (error) {\n        setServerError('服务器连接失败');\n      }\n    };\n    checkStatus();\n    const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      activeConversationId: currentConversationId,\n      onNewConversation: handleNewConversation,\n      onSelectConversation: handleSwitchConversation,\n      onDeleteConversation: handleDeleteConversation,\n      showIndicator: showIndicator,\n      onToggleIndicator: () => setShowIndicator(!showIndicator),\n      systemInfo: {\n        status: 'running',\n        model: 'LLaDA',\n        device: 'GPU'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          isGenerating: isGenerating,\n          serverError: serverError,\n          getConfidenceColor: getColorFromConfidence,\n          formatTime: timestamp => new Date(timestamp).toLocaleTimeString(),\n          messagesEndRef: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-area-container\",\n          children: /*#__PURE__*/_jsxDEV(InputArea, {\n            inputValue: input,\n            setInputValue: setInput,\n            constraints: constraints,\n            setConstraints: setConstraints,\n            handleSend: handleSend,\n            handleKeyPress: handleKeyPress,\n            isGenerating: isGenerating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status-dot ${serverError ? 'error' : 'connected'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-text\",\n            children: serverError ? '连接异常' : '已连接'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), confidence > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confidence-display\",\n          children: [\"\\u7F6E\\u4FE1\\u5EA6: \", (confidence * 100).toFixed(1), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6A21\\u578B\\u8BBE\\u7F6E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        setSettings: setSettings,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }, this), showIndicator && /*#__PURE__*/_jsxDEV(ConfidenceIndicator, {\n        isVisible: showIndicator,\n        position: indicatorPosition,\n        onClose: () => setShowIndicator(false),\n        onPositionChange: setIndicatorPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 9\n  }, this);\n};\n_s(DiffusionModel, \"H2htdl/3VbYNqm5YlWkPs5N6ZJ8=\");\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","generateText","checkServerStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsxDEV","_jsxDEV","DiffusionModel","_s","messages","setMessages","input","setInput","isGenerating","setIsGenerating","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","steps","cfg_scale","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","generateResponse","userMessage","userMsg","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","_","index","char","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","step","parseVisualizationState","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","handleSend","trim","prevMessages","errorMessage","isArray","token","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","checkStatus","interval","setInterval","clearInterval","className","children","activeConversationId","onNewConversation","onSelectConversation","onDeleteConversation","onToggleIndicator","systemInfo","status","model","device","fileName","_jsxFileName","lineNumber","columnNumber","getConfidenceColor","formatTime","toLocaleTimeString","inputValue","setInputValue","toFixed","isVisible","position","onClose","onPositionChange","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { sendMessage, getStatus, generateText, checkServerStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport './styles/Sidebar.css';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [showIndicator, setShowIndicator] = useState(false);\r\n    const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [constraints, setConstraints] = useState('');\r\n    const [serverError, setServerError] = useState(null);\r\n    const [confidence, setConfidence] = useState(0);\r\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\r\n    const [settings, setSettings] = useState({\r\n        temperature: 0.7,\r\n        top_p: 0.95,\r\n        gen_length: 50,\r\n        num_beams: 4,\r\n        steps: 32,\r\n        cfg_scale: 1.0\r\n    });\r\n\r\n    // --- Conversation Management State ---\r\n    const [conversations, setConversations] = useState([\r\n        { id: 0, name: '对话 1', history: [] }\r\n    ]);\r\n    const [currentConversationId, setCurrentConversationId] = useState(0);\r\n\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // --- Conversation Management Handlers ---\r\n\r\n    const handleNewConversation = () => {\r\n        // Save the current conversation's history first.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        // Create the new conversation.\r\n        const newConversationId = Date.now(); // Use timestamp for unique ID\r\n        const newConversation = {\r\n            id: newConversationId,\r\n            name: `对话 ${updatedConversations.length + 1}`,\r\n            history: []\r\n        };\r\n\r\n        setConversations([...updatedConversations, newConversation]);\r\n        setCurrentConversationId(newConversationId);\r\n        setMessages([]); // Clear messages for the new conversation\r\n        setInput('');\r\n        setConfidence(0);\r\n        setIsWaitingForResponse(false);\r\n    };\r\n\r\n    const handleSwitchConversation = (id) => {\r\n        if (id === currentConversationId) return;\r\n\r\n        // Save the current conversation's history before switching.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\r\n\r\n        if (newCurrentConversation) {\r\n            setConversations(updatedConversations);\r\n            setCurrentConversationId(newCurrentConversation.id);\r\n            setMessages(newCurrentConversation.history || []);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConversation = (id) => {\r\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\r\n        setConversations(updatedConversations);\r\n\r\n        if (id === currentConversationId) {\r\n            if (updatedConversations.length > 0) {\r\n                const firstConv = updatedConversations[0];\r\n                setCurrentConversationId(firstConv.id);\r\n                setMessages(firstConv.history || []);\r\n            } else {\r\n                // If all conversations are deleted, create a new default one.\r\n                const newId = Date.now();\r\n                const newConv = { id: newId, name: '对话 1', history: [] };\r\n                setConversations([newConv]);\r\n                setCurrentConversationId(newId);\r\n                setMessages([]);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // 生成完整的回复\r\n    const generateResponse = async (userMessage) => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: userMessage,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userMessage }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 200));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                const finalChatHistory = [\r\n                    ...newChatHistory,\r\n                    { role: 'assistant', content: response.response }\r\n                ];\r\n                setChatHistory(finalChatHistory);\r\n                updateCurrentConversation(updatedMessages, finalChatHistory);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('生成响应时出错:', error);\r\n            setServerError(error.message || '服务器连接失败');\r\n            \r\n            // 移除未完成的bot消息\r\n            setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (input.trim() === '' || isWaitingForResponse) return;\r\n        \r\n        const userMessage = { \r\n            id: Date.now(),\r\n            text: input, \r\n            sender: 'user',\r\n            timestamp: new Date()\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, userMessage]);\r\n        setInput('');\r\n        setIsWaitingForResponse(true);\r\n\r\n        try {\r\n            // 调用后端API发送消息\r\n            const response = await sendMessage([\r\n                { role: 'user', content: input }\r\n            ]);\r\n\r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            const botMessage = { \r\n                id: Date.now() + 1,\r\n                text: response.response, \r\n                sender: 'bot',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prevMessages => [...prevMessages, botMessage]);\r\n            setConfidence(response.confidence || 0);\r\n            \r\n            // 保存到当前对话\r\n            const updatedMessages = [...messages, userMessage, botMessage];\r\n            updateCurrentConversation(updatedMessages);\r\n        } catch (error) {\r\n            console.error('发送消息时出错:', error);\r\n            const errorMessage = { \r\n                id: Date.now() + 2,\r\n                text: '发送消息时出错: ' + (error.message || '未知错误'), \r\n                sender: 'bot',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsWaitingForResponse(false);\r\n        }\r\n    };\r\n\r\n    // 辅助函数：更新当前对话\r\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\r\n        // 更新当前对话的历史\r\n        setConversations(prev => {\r\n            return prev.map(conv => {\r\n                if (conv.id === currentConversationId) {\r\n                    return { ...conv, history: updatedMessages };\r\n                }\r\n                return conv;\r\n            });\r\n        });\r\n    };\r\n\r\n    // 解析可视化状态\r\n    const parseVisualizationState = (step) => {\r\n        if (!step || !Array.isArray(step.tokens)) {\r\n            return [];\r\n        }\r\n\r\n        return step.tokens.map((token, index) => ({\r\n            id: index,\r\n            char: token.text || '[MASK]',\r\n            confidence: token.confidence || 0,\r\n            color: getColorFromConfidence(token.confidence || 0),\r\n            isGenerated: true\r\n        }));\r\n    };\r\n\r\n    // 获取置信度颜色\r\n    const getColorFromConfidence = (confidence) => {\r\n        // 根据置信度返回颜色\r\n        if (confidence < 0.3) return '#ff4d4d'; // 低置信度：红色\r\n        if (confidence < 0.7) return '#ffaa33'; // 中置信度：橙色\r\n        return '#44cc44';                       // 高置信度：绿色\r\n    };\r\n\r\n    // 处理按键按下事件\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSend();\r\n        }\r\n    };\r\n\r\n    // 检查服务器状态\r\n    useEffect(() => {\r\n        const checkStatus = async () => {\r\n            try {\r\n                await getStatus();\r\n                setServerError(null);\r\n            } catch (error) {\r\n                setServerError('服务器连接失败');\r\n            }\r\n        };\r\n\r\n        checkStatus();\r\n        const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"diffusion-model\">\r\n            <Sidebar\r\n                conversations={conversations}\r\n                activeConversationId={currentConversationId}\r\n                onNewConversation={handleNewConversation}\r\n                onSelectConversation={handleSwitchConversation}\r\n                onDeleteConversation={handleDeleteConversation}\r\n                showIndicator={showIndicator}\r\n                onToggleIndicator={() => setShowIndicator(!showIndicator)}\r\n                systemInfo={{\r\n                    status: 'running',\r\n                    model: 'LLaDA',\r\n                    device: 'GPU'\r\n                }}\r\n            />\r\n            <div className=\"main-content\">\r\n                <div className=\"chat-container\">\r\n                    <MessageList \r\n                        messages={messages} \r\n                        isGenerating={isGenerating}\r\n                        serverError={serverError}\r\n                        getConfidenceColor={getColorFromConfidence}\r\n                        formatTime={(timestamp) => new Date(timestamp).toLocaleTimeString()}\r\n                        messagesEndRef={messagesEndRef}\r\n                    />\r\n                    <div className=\"input-area-container\">\r\n                        <InputArea \r\n                            inputValue={input}\r\n                            setInputValue={setInput}\r\n                            constraints={constraints}\r\n                            setConstraints={setConstraints}\r\n                            handleSend={handleSend}\r\n                            handleKeyPress={handleKeyPress}\r\n                            isGenerating={isGenerating}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n                {/* 状态栏 */}\r\n                <div className=\"status-bar\">\r\n                    <div className=\"status-indicator\">\r\n                        <div className={`status-dot ${serverError ? 'error' : 'connected'}`}></div>\r\n                        <span className=\"status-text\">\r\n                            {serverError ? '连接异常' : '已连接'}\r\n                        </span>\r\n                    </div>\r\n                    {confidence > 0 && (\r\n                        <div className=\"confidence-display\">\r\n                            置信度: {(confidence * 100).toFixed(1)}%\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            \r\n            {/* 右侧设置边栏 */}\r\n            <div className=\"settings-sidebar\">\r\n                <h3>模型设置</h3>\r\n                <SettingsPanel \r\n                    settings={settings}\r\n                    setSettings={setSettings}\r\n                    isGenerating={isGenerating}\r\n                />\r\n                \r\n                {/* 置信度指示器 */}\r\n                {showIndicator && (\r\n                    <ConfidenceIndicator \r\n                        isVisible={showIndicator}\r\n                        position={indicatorPosition}\r\n                        onClose={() => setShowIndicator(false)}\r\n                        onPositionChange={setIndicatorPosition}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}