{"ast":null,"code":"import React,{useState,useEffect}from'react';// Token组件，处理消失动画\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TokenComponent=_ref=>{let{token,index,confidenceClass,isGenerated,isGenerating,isFinalGenerated}=_ref;const[isDisappearing,setIsDisappearing]=useState(false);const[shouldRender,setShouldRender]=useState(true);const isMask=token.char==='[MASK]';const isEmpty=token.char&&token.char.trim()==='';const shouldDisappear=token.isGenerated&&isEmpty;useEffect(()=>{if(shouldDisappear&&!isDisappearing){// 开始消失动画\nsetIsDisappearing(true);// 400ms后（动画完成后）真正移除元素\nconst timer=setTimeout(()=>{setShouldRender(false);},400);return()=>clearTimeout(timer);}},[shouldDisappear,isDisappearing]);if(!shouldRender){return null;}return/*#__PURE__*/_jsx(\"span\",{className:`token ${confidenceClass} ${token.isGenerated&&!isMask?'just-generated':''} ${!token.isGenerated?'generating':''} ${isFinalGenerated?'final-generated':''} ${isDisappearing?'token-disappearing':''}`,style:{animationDelay:token.isGenerated&&!isMask?`${index*0.08}s`:'0s'},children:token.char},token.id||index);};const MessageList=_ref2=>{let{messages,isGenerating,serverError,getConfidenceColor,formatTime,messagesEndRef}=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[messages.map(message=>/*#__PURE__*/_jsx(\"div\",{className:`message ${message.sender}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.sender==='bot'&&message.tokens?// 优先显示token可视化，除非消息为空\nmessage.text&&message.text.trim()===''?// 消息为空时，删除token格子，显示空文本\nmessage.text:/*#__PURE__*/// 有token数据时，始终显示可视化样式\n_jsx(\"div\",{className:\"token-container\",children:message.tokens.map((token,index)=>{const isMask=token.char==='[MASK]';// 根据置信度确定CSS类名\nlet confidenceClass='';if(isMask){confidenceClass='mask-token';}else{// 根据置信度分配类名\nif(token.confidence<0.3){confidenceClass='confidence-low';}else if(token.confidence<0.7){confidenceClass='confidence-medium';}else{confidenceClass='confidence-high';}// 如果是之前生成的token（颜色为蓝色）\nif(token.color==='#6699CC'){confidenceClass='confidence-previous';}}return/*#__PURE__*/_jsx(TokenComponent,{token:token,index:index,confidenceClass:confidenceClass,isGenerated:token.isGenerated,isGenerating:!token.isGenerated,isFinalGenerated:message.isGenerated},token.id||index);})}):// 非bot消息或没有token数据时显示普通文本\nmessage.text}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:formatTime(message.timestamp)})]})},message.id)),isGenerating&&/*#__PURE__*/_jsxs(\"div\",{className:\"generating-indicator\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"generating-dots\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u6B63\\u5728\\u751F\\u6210\\u4E2D...\"})]}),serverError&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-content\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u9519\\u8BEF\\uFF1A\"}),\" \",serverError]})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]});};export default MessageList;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","TokenComponent","_ref","token","index","confidenceClass","isGenerated","isGenerating","isFinalGenerated","isDisappearing","setIsDisappearing","shouldRender","setShouldRender","isMask","char","isEmpty","trim","shouldDisappear","timer","setTimeout","clearTimeout","className","style","animationDelay","children","id","MessageList","_ref2","messages","serverError","getConfidenceColor","formatTime","messagesEndRef","map","message","sender","tokens","text","confidence","color","timestamp","ref"],"sources":["/root/LLaDA-main/lldm/src/components/MessageList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Token组件，处理消失动画\nconst TokenComponent = ({ token, index, confidenceClass, isGenerated, isGenerating, isFinalGenerated }) => {\n  const [isDisappearing, setIsDisappearing] = useState(false);\n  const [shouldRender, setShouldRender] = useState(true);\n  \n  const isMask = token.char === '[MASK]';\n  const isEmpty = token.char && token.char.trim() === '';\n  const shouldDisappear = token.isGenerated && isEmpty;\n  \n  useEffect(() => {\n    if (shouldDisappear && !isDisappearing) {\n      // 开始消失动画\n      setIsDisappearing(true);\n      \n      // 400ms后（动画完成后）真正移除元素\n      const timer = setTimeout(() => {\n        setShouldRender(false);\n      }, 400);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [shouldDisappear, isDisappearing]);\n  \n  if (!shouldRender) {\n    return null;\n  }\n  \n  return (\n    <span\n      key={token.id || index}\n      className={`token ${confidenceClass} ${\n        token.isGenerated && !isMask ? 'just-generated' : ''\n      } ${\n        !token.isGenerated ? 'generating' : ''\n      } ${\n        isFinalGenerated ? 'final-generated' : ''\n      } ${\n        isDisappearing ? 'token-disappearing' : ''\n      }`}\n      style={{ \n        animationDelay: token.isGenerated && !isMask ? `${index * 0.08}s` : '0s'\n      }}\n    >\n      {token.char}\n    </span>\n  );\n};\n\nconst MessageList = ({ \n  messages, \n  isGenerating, \n  serverError, \n  getConfidenceColor, \n  formatTime, \n  messagesEndRef \n}) => {\n  return (\n    <div className=\"messages-container\">\n      {messages.map((message) => (\n        <div key={message.id} className={`message ${message.sender}`}>\n          <div className=\"message-content\">\n            <div className=\"message-text\">\n              {message.sender === 'bot' && message.tokens ? (\n                // 优先显示token可视化，除非消息为空\n                message.text && message.text.trim() === '' ? (\n                  // 消息为空时，删除token格子，显示空文本\n                  message.text\n                ) : (\n                  // 有token数据时，始终显示可视化样式\n                  <div className=\"token-container\">\n                    {message.tokens.map((token, index) => {\n                      const isMask = token.char === '[MASK]';\n                      \n                      // 根据置信度确定CSS类名\n                      let confidenceClass = '';\n                      if (isMask) {\n                        confidenceClass = 'mask-token';\n                      } else {\n                        // 根据置信度分配类名\n                        if (token.confidence < 0.3) {\n                          confidenceClass = 'confidence-low';\n                        } else if (token.confidence < 0.7) {\n                          confidenceClass = 'confidence-medium';\n                        } else {\n                          confidenceClass = 'confidence-high';\n                        }\n                        \n                        // 如果是之前生成的token（颜色为蓝色）\n                        if (token.color === '#6699CC') {\n                          confidenceClass = 'confidence-previous';\n                        }\n                      }\n                      \n                      return (\n                        <TokenComponent\n                          key={token.id || index}\n                          token={token}\n                          index={index}\n                          confidenceClass={confidenceClass}\n                          isGenerated={token.isGenerated}\n                          isGenerating={!token.isGenerated}\n                          isFinalGenerated={message.isGenerated}\n                        />\n                      );\n                    })}\n                  </div>\n                )\n              ) : (\n                // 非bot消息或没有token数据时显示普通文本\n                message.text\n              )}\n            </div>\n            <div className=\"message-time\">{formatTime(message.timestamp)}</div>\n          </div>\n        </div>\n      ))}\n      \n      {isGenerating && (\n        <div className=\"generating-indicator\">\n          <div className=\"generating-dots\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n          <span>正在生成中...</span>\n        </div>\n      )}\n      \n      {serverError && (\n        <div className=\"error-message\">\n          <div className=\"error-content\">\n            <strong>错误：</strong> {serverError}\n          </div>\n        </div>\n      )}\n      \n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nexport default MessageList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}