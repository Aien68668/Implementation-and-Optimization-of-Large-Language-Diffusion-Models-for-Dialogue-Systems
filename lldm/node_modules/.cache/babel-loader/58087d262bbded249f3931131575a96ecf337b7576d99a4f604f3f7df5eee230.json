{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{sendMessage,getStatus,generateText,checkServerStatus,logger}from'./services/apiService';import ConfidenceIndicator from'./components/ConfidenceIndicator';import MessageList from'./components/MessageList';import SettingsPanel from'./components/SettingsPanel';import InputArea from'./components/InputArea';import Sidebar from'./components/Sidebar';import'./styles/Sidebar.css';import'./styles/DiffusionModel.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DiffusionModel=()=>{const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[isGenerating,setIsGenerating]=useState(false);const[chatHistory,setChatHistory]=useState([]);const[constraints,setConstraints]=useState('');const[serverError,setServerError]=useState(null);const[confidence,setConfidence]=useState(0);const[isWaitingForResponse,setIsWaitingForResponse]=useState(false);const[settings,setSettings]=useState({temperature:0.7,top_p:0.95,gen_length:50,num_beams:4,steps:32,cfg_scale:1.0});// --- Conversation Management State ---\nconst[conversations,setConversations]=useState([{id:0,name:'对话 1',history:[]}]);const[currentConversationId,setCurrentConversationId]=useState(0);const[systemStatus,setSystemStatus]=useState({backendConnected:false,device:'Unknown',modelLoaded:false,lastCheck:null});const messagesEndRef=useRef(null);useEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});},[messages]);// --- Conversation Management Handlers ---\nconst handleNewConversation=()=>{// Save the current conversation's history first.\nconst updatedConversations=conversations.map(conv=>conv.id===currentConversationId?{...conv,history:messages}:conv);// Create the new conversation.\nconst newConversationId=Date.now();// Use timestamp for unique ID\nconst newConversation={id:newConversationId,name:`对话 ${updatedConversations.length+1}`,history:[]};setConversations([...updatedConversations,newConversation]);setCurrentConversationId(newConversationId);setMessages([]);// Clear messages for the new conversation\nsetInput('');setConfidence(0);setIsWaitingForResponse(false);};const handleSwitchConversation=id=>{if(id===currentConversationId)return;// Save the current conversation's history before switching.\nconst updatedConversations=conversations.map(conv=>conv.id===currentConversationId?{...conv,history:messages}:conv);const newCurrentConversation=updatedConversations.find(conv=>conv.id===id);if(newCurrentConversation){setConversations(updatedConversations);setCurrentConversationId(newCurrentConversation.id);setMessages(newCurrentConversation.history||[]);}};const handleDeleteConversation=id=>{const updatedConversations=conversations.filter(conv=>conv.id!==id);setConversations(updatedConversations);if(id===currentConversationId){if(updatedConversations.length>0){const firstConv=updatedConversations[0];setCurrentConversationId(firstConv.id);setMessages(firstConv.history||[]);}else{// If all conversations are deleted, create a new default one.\nconst newId=Date.now();const newConv={id:newId,name:'对话 1',history:[]};setConversations([newConv]);setCurrentConversationId(newId);setMessages([]);}}};// 生成完整的回复\nconst generateResponse=async userMessage=>{setIsGenerating(true);setServerError(null);try{// 添加用户消息\nconst userMsg={id:Date.now(),text:userMessage,sender:'user',timestamp:new Date(),isGenerated:true};setMessages(prev=>[...prev,userMsg]);// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:userMessage}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prev=>[...prev,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,300));}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nconst finalChatHistory=[...newChatHistory,{role:'assistant',content:response.response}];setChatHistory(finalChatHistory);updateCurrentConversation(updatedMessages,finalChatHistory);return updatedMessages;});}catch(error){console.error('生成响应时出错:',error);setServerError(error.message||'服务器连接失败');// 移除未完成的bot消息\nsetMessages(prev=>prev.filter(msg=>msg.id!==Date.now()+1));}finally{setIsGenerating(false);}};const handleSend=async()=>{if(input.trim()===''||isWaitingForResponse)return;const requestStartTime=Date.now();const requestId=`frontend_${requestStartTime}_${Math.random().toString(36).substr(2,9)}`;logger.info(`[${requestId}] 开始处理用户发送请求`,{userInput:input,inputLength:input.length,conversationId:currentConversationId,currentMessagesCount:messages.length,settings:settings,constraints:constraints});const userMessage={id:Date.now(),text:input,sender:'user',timestamp:new Date()};setMessages(prevMessages=>[...prevMessages,userMessage]);const userInput=input;setInput('');setIsWaitingForResponse(true);setIsGenerating(true);setServerError(null);try{var _response$response,_response$visualizati;// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:userInput}];logger.info(`[${requestId}] 准备发送到后端`,{chatHistoryLength:newChatHistory.length,lastUserMessage:userInput,settingsUsed:settings});// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prevMessages=>[...prevMessages,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};logger.info(`[${requestId}] 发送API请求`,{endpoint:'/generate',messageCount:newChatHistory.length,settings:requestSettings});const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}logger.info(`[${requestId}] 收到后端响应`,{responseLength:(_response$response=response.response)===null||_response$response===void 0?void 0:_response$response.length,visualizationStepsCount:(_response$visualizati=response.visualization)===null||_response$visualizati===void 0?void 0:_response$visualizati.length,backendRequestId:response.request_id,backendDuration:response.duration});// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];logger.info(`[${requestId}] 开始可视化处理`,{visualizationStepsCount:visualizationSteps.length,animationDelay:300});for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,300));// 增加延迟以便观察转换效果\n}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nupdateCurrentConversation(updatedMessages);return updatedMessages;});setConfidence(response.confidence||0);const requestEndTime=Date.now();const totalDuration=requestEndTime-requestStartTime;logger.info(`[${requestId}] 请求处理完成`,{totalDuration:`${totalDuration}ms`,finalResponseLength:response.response.length,conversationUpdated:true});}catch(error){const requestEndTime=Date.now();const totalDuration=requestEndTime-requestStartTime;logger.error(`[${requestId}] 发送消息失败`,{errorMessage:error.message,errorType:error.name,errorStack:error.stack,totalDuration:`${totalDuration}ms`,userInput:userInput,settings:settings,conversationId:currentConversationId});const errorMessage={id:Date.now()+2,text:'发送消息时出错: '+(error.message||'未知错误'),sender:'bot',timestamp:new Date()};setMessages(prevMessages=>prevMessages.slice(0,-1).concat([errorMessage]));setServerError(error.message||'服务器连接失败');}finally{setIsWaitingForResponse(false);setIsGenerating(false);logger.debug(`[${requestId}] 请求状态重置完成`);}};const handleRegenerateResponse=async()=>{setIsGenerating(true);setServerError(null);try{// 获取最后一条消息作为重发的基础\nconst lastUserMessage=messages.slice().reverse().find(msg=>msg.sender==='user');if(!lastUserMessage){throw new Error('未找到可重发的消息');}// 添加用户消息\nconst userMsg={id:Date.now(),text:lastUserMessage.text,sender:'user',timestamp:new Date(),isGenerated:true};setMessages(prev=>[...prev,userMsg]);// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:lastUserMessage.text}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prev=>[...prev,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,300));}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nupdateCurrentConversation(updatedMessages);return updatedMessages;});setConfidence(response.confidence||0);}catch(error){console.error('重发消息时出错:',error);const errorMessage={id:Date.now()+2,text:'重发消息时出错: '+(error.message||'未知错误'),sender:'bot',timestamp:new Date()};setMessages(prevMessages=>prevMessages.slice(0,-1).concat([errorMessage]));setServerError(error.message||'服务器连接失败');}finally{setIsGenerating(false);}};// 辅助函数：更新当前对话\nconst updateCurrentConversation=(updatedMessages,finalChatHistory)=>{// 更新当前对话的历史\nsetConversations(prev=>{return prev.map(conv=>{if(conv.id===currentConversationId){return{...conv,history:updatedMessages};}return conv;});});};// 解析可视化状态\nconst parseVisualizationState=step=>{if(!step||!Array.isArray(step)){return[];}return step.map((tokenData,index)=>{// tokenData是 [token_text, color] 的格式\nconst[tokenText,color]=tokenData;return{id:index,char:tokenText,confidence:getConfidenceFromColor(color),color:color,isGenerated:tokenText!=='[MASK]'};});};// 从颜色推断置信度（与app.py保持一致）\nconst getConfidenceFromColor=color=>{switch(color){case'#444444':return 0;// [MASK] - 深灰色\ncase'#FF6666':return 0.2;// 低置信度 - 红色\ncase'#FFAA33':return 0.5;// 中置信度 - 橙色\ncase'#66CC66':return 0.8;// 高置信度 - 绿色\ncase'#6699CC':return 1.0;// 之前生成的token - 蓝色\ndefault:return 0.5;}};// 获取置信度颜色（与app.py保持一致）\nconst getColorFromConfidence=confidence=>{if(confidence<0.3)return'#FF6666';// 低置信度：红色\nif(confidence<0.7)return'#FFAA33';// 中置信度：橙色\nreturn'#66CC66';// 高置信度：绿色\n};// 处理按键按下事件\nconst handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSend();}};// 检查服务器状态\nuseEffect(()=>{const checkStatus=async()=>{try{const status=await getStatus();setServerError(null);setSystemStatus({backendConnected:true,device:status.device||'Unknown',modelLoaded:true,lastCheck:new Date()});}catch(error){setServerError('服务器连接失败');setSystemStatus({backendConnected:false,device:'Unknown',modelLoaded:false,lastCheck:new Date()});}};checkStatus();const interval=setInterval(checkStatus,30000);// 每30秒检查一次\nreturn()=>clearInterval(interval);},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"diffusion-model\",children:[/*#__PURE__*/_jsx(Sidebar,{conversations:conversations,activeConversationId:currentConversationId,onNewConversation:handleNewConversation,onSelectConversation:handleSwitchConversation,onDeleteConversation:handleDeleteConversation,systemStatus:systemStatus,isGenerating:isGenerating}),/*#__PURE__*/_jsx(\"div\",{className:\"main-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages,isGenerating:isGenerating,serverError:serverError,getConfidenceColor:getColorFromConfidence,formatTime:timestamp=>new Date(timestamp).toLocaleTimeString(),messagesEndRef:messagesEndRef}),/*#__PURE__*/_jsx(\"div\",{className:\"input-area-container\",children:/*#__PURE__*/_jsx(InputArea,{inputValue:input,setInputValue:setInput,constraints:constraints,setConstraints:setConstraints,handleSend:handleSend,handleKeyPress:handleKeyPress,isGenerating:isGenerating})})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"settings-sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"settings-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u6A21\\u578B\\u8BBE\\u7F6E\"}),/*#__PURE__*/_jsx(SettingsPanel,{settings:settings,setSettings:setSettings,isGenerating:isGenerating})]}),/*#__PURE__*/_jsx(\"div\",{className:\"confidence-section\",children:/*#__PURE__*/_jsx(ConfidenceIndicator,{})})]})]});};export default DiffusionModel;","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","generateText","checkServerStatus","logger","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsx","_jsx","jsxs","_jsxs","DiffusionModel","messages","setMessages","input","setInput","isGenerating","setIsGenerating","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","steps","cfg_scale","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","systemStatus","setSystemStatus","backendConnected","device","modelLoaded","lastCheck","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","generateResponse","userMessage","userMsg","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","_","index","char","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","step","parseVisualizationState","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","handleSend","trim","requestStartTime","requestId","Math","random","toString","substr","info","userInput","inputLength","conversationId","currentMessagesCount","prevMessages","_response$response","_response$visualizati","chatHistoryLength","lastUserMessage","settingsUsed","endpoint","messageCount","responseLength","visualizationStepsCount","backendRequestId","request_id","backendDuration","duration","animationDelay","requestEndTime","totalDuration","finalResponseLength","conversationUpdated","errorMessage","errorType","errorStack","stack","slice","concat","debug","handleRegenerateResponse","reverse","isArray","tokenData","tokenText","getConfidenceFromColor","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","checkStatus","status","interval","setInterval","clearInterval","className","children","activeConversationId","onNewConversation","onSelectConversation","onDeleteConversation","getConfidenceColor","formatTime","toLocaleTimeString","inputValue","setInputValue"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { sendMessage, getStatus, generateText, checkServerStatus, logger } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport './styles/Sidebar.css';\nimport './styles/DiffusionModel.css';\n\nconst DiffusionModel = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [chatHistory, setChatHistory] = useState([]);\n    const [constraints, setConstraints] = useState('');\n    const [serverError, setServerError] = useState(null);\n    const [confidence, setConfidence] = useState(0);\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n    const [settings, setSettings] = useState({\n        temperature: 0.7,\n        top_p: 0.95,\n        gen_length: 50,\n        num_beams: 4,\n        steps: 32,\n        cfg_scale: 1.0\n    });\n\n    // --- Conversation Management State ---\n    const [conversations, setConversations] = useState([\n        { id: 0, name: '对话 1', history: [] }\n    ]);\n    const [currentConversationId, setCurrentConversationId] = useState(0);\n    const [systemStatus, setSystemStatus] = useState({\n        backendConnected: false,\n        device: 'Unknown',\n        modelLoaded: false,\n        lastCheck: null\n    });\n\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    // --- Conversation Management Handlers ---\n\n    const handleNewConversation = () => {\n        // Save the current conversation's history first.\n        const updatedConversations = conversations.map(conv =>\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\n        );\n\n        // Create the new conversation.\n        const newConversationId = Date.now(); // Use timestamp for unique ID\n        const newConversation = {\n            id: newConversationId,\n            name: `对话 ${updatedConversations.length + 1}`,\n            history: []\n        };\n\n        setConversations([...updatedConversations, newConversation]);\n        setCurrentConversationId(newConversationId);\n        setMessages([]); // Clear messages for the new conversation\n        setInput('');\n        setConfidence(0);\n        setIsWaitingForResponse(false);\n    };\n\n    const handleSwitchConversation = (id) => {\n        if (id === currentConversationId) return;\n\n        // Save the current conversation's history before switching.\n        const updatedConversations = conversations.map(conv =>\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\n        );\n\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\n\n        if (newCurrentConversation) {\n            setConversations(updatedConversations);\n            setCurrentConversationId(newCurrentConversation.id);\n            setMessages(newCurrentConversation.history || []);\n        }\n    };\n\n    const handleDeleteConversation = (id) => {\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\n        setConversations(updatedConversations);\n\n        if (id === currentConversationId) {\n            if (updatedConversations.length > 0) {\n                const firstConv = updatedConversations[0];\n                setCurrentConversationId(firstConv.id);\n                setMessages(firstConv.history || []);\n            } else {\n                // If all conversations are deleted, create a new default one.\n                const newId = Date.now();\n                const newConv = { id: newId, name: '对话 1', history: [] };\n                setConversations([newConv]);\n                setCurrentConversationId(newId);\n                setMessages([]);\n            }\n        }\n    };\n\n\n    // 生成完整的回复\n    const generateResponse = async (userMessage) => {\n        setIsGenerating(true);\n        setServerError(null);\n        \n        try {\n            // 添加用户消息\n            const userMsg = {\n                id: Date.now(),\n                text: userMessage,\n                sender: 'user',\n                timestamp: new Date(),\n                isGenerated: true\n            };\n            \n            setMessages(prev => [...prev, userMsg]);\n\n            // 准备聊天历史\n            const newChatHistory = [\n                ...chatHistory,\n                { role: 'user', content: userMessage }\n            ];\n\n            // 创建初始的掩码消息\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n                id: index,\n                char: '[MASK]',\n                confidence: 0,\n                color: '#444444',\n                isGenerated: false\n            }));\n\n            const botMessage = {\n                id: Date.now() + 1,\n                text: '',\n                sender: 'bot',\n                timestamp: new Date(),\n                tokens: initialTokens,\n                isGenerated: false\n            };\n\n            setMessages(prev => [...prev, botMessage]);\n\n            // 调用后端API生成响应\n            const requestSettings = {\n                ...settings,\n                constraints: constraints\n            };\n\n            const response = await sendMessage(newChatHistory, requestSettings);\n            \n            if (response.error) {\n                throw new Error(response.error);\n            }\n\n            // 更新聊天历史\n            setChatHistory([\n                ...newChatHistory,\n                { role: 'assistant', content: response.response }\n            ]);\n\n            // 逐步显示可视化过程\n            const visualizationSteps = response.visualization || [];\n            \n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n                const step = visualizationSteps[stepIndex];\n                const tokens = parseVisualizationState(step);\n                \n                // 更新消息中的tokens\n                setMessages(prev => prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { ...msg, tokens };\n                    }\n                    return msg;\n                }));\n                \n                // 如果不是最后一步，等待一段时间再显示下一步\n                if (stepIndex < visualizationSteps.length - 1) {\n                    await new Promise(resolve => setTimeout(resolve, 300));\n                }\n            }\n\n            // 生成完成，设置最终文本\n            setMessages(prev => {\n                const updatedMessages = prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { \n                            ...msg, \n                            text: response.response,\n                            isGenerated: true \n                        };\n                    }\n                    return msg;\n                });\n                \n                // 更新当前对话\n                const finalChatHistory = [\n                    ...newChatHistory,\n                    { role: 'assistant', content: response.response }\n                ];\n                setChatHistory(finalChatHistory);\n                updateCurrentConversation(updatedMessages, finalChatHistory);\n                \n                return updatedMessages;\n            });\n\n        } catch (error) {\n            console.error('生成响应时出错:', error);\n            setServerError(error.message || '服务器连接失败');\n            \n            // 移除未完成的bot消息\n            setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\n        } finally {\n            setIsGenerating(false);\n        }\n    };\n\n    const handleSend = async () => {\n        if (input.trim() === '' || isWaitingForResponse) return;\n        \n        const requestStartTime = Date.now();\n        const requestId = `frontend_${requestStartTime}_${Math.random().toString(36).substr(2, 9)}`;\n        \n        logger.info(`[${requestId}] 开始处理用户发送请求`, {\n            userInput: input,\n            inputLength: input.length,\n            conversationId: currentConversationId,\n            currentMessagesCount: messages.length,\n            settings: settings,\n            constraints: constraints\n        });\n        \n        const userMessage = { \n            id: Date.now(),\n            text: input, \n            sender: 'user',\n            timestamp: new Date()\n        };\n        setMessages(prevMessages => [...prevMessages, userMessage]);\n        const userInput = input;\n        setInput('');\n        setIsWaitingForResponse(true);\n        setIsGenerating(true);\n        setServerError(null);\n\n        try {\n            // 准备聊天历史\n            const newChatHistory = [\n                ...chatHistory,\n                { role: 'user', content: userInput }\n            ];\n\n            logger.info(`[${requestId}] 准备发送到后端`, {\n                chatHistoryLength: newChatHistory.length,\n                lastUserMessage: userInput,\n                settingsUsed: settings\n            });\n\n            // 创建初始的掩码消息\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n                id: index,\n                char: '[MASK]',\n                confidence: 0,\n                color: '#444444',\n                isGenerated: false\n            }));\n\n            const botMessage = {\n                id: Date.now() + 1,\n                text: '',\n                sender: 'bot',\n                timestamp: new Date(),\n                tokens: initialTokens,\n                isGenerated: false\n            };\n\n            setMessages(prevMessages => [...prevMessages, botMessage]);\n\n            // 调用后端API生成响应\n            const requestSettings = {\n                ...settings,\n                constraints: constraints\n            };\n\n            logger.info(`[${requestId}] 发送API请求`, {\n                endpoint: '/generate',\n                messageCount: newChatHistory.length,\n                settings: requestSettings\n            });\n\n            const response = await sendMessage(newChatHistory, requestSettings);\n            \n            if (response.error) {\n                throw new Error(response.error);\n            }\n\n            logger.info(`[${requestId}] 收到后端响应`, {\n                responseLength: response.response?.length,\n                visualizationStepsCount: response.visualization?.length,\n                backendRequestId: response.request_id,\n                backendDuration: response.duration\n            });\n\n            // 更新聊天历史\n            setChatHistory([\n                ...newChatHistory,\n                { role: 'assistant', content: response.response }\n            ]);\n\n            // 逐步显示可视化过程\n            const visualizationSteps = response.visualization || [];\n            \n            logger.info(`[${requestId}] 开始可视化处理`, {\n                visualizationStepsCount: visualizationSteps.length,\n                animationDelay: 300\n            });\n            \n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n                const step = visualizationSteps[stepIndex];\n                const tokens = parseVisualizationState(step);\n                \n                // 更新消息中的tokens\n                setMessages(prev => prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { ...msg, tokens };\n                    }\n                    return msg;\n                }));\n                \n                // 如果不是最后一步，等待一段时间再显示下一步\n                if (stepIndex < visualizationSteps.length - 1) {\n                    await new Promise(resolve => setTimeout(resolve, 300)); // 增加延迟以便观察转换效果\n                }\n            }\n\n            // 生成完成，设置最终文本\n            setMessages(prev => {\n                const updatedMessages = prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { \n                            ...msg, \n                            text: response.response,\n                            isGenerated: true \n                        };\n                    }\n                    return msg;\n                });\n                \n                // 更新当前对话\n                updateCurrentConversation(updatedMessages);\n                \n                return updatedMessages;\n            });\n\n            setConfidence(response.confidence || 0);\n            \n            const requestEndTime = Date.now();\n            const totalDuration = requestEndTime - requestStartTime;\n            \n            logger.info(`[${requestId}] 请求处理完成`, {\n                totalDuration: `${totalDuration}ms`,\n                finalResponseLength: response.response.length,\n                conversationUpdated: true\n            });\n            \n        } catch (error) {\n            const requestEndTime = Date.now();\n            const totalDuration = requestEndTime - requestStartTime;\n            \n            logger.error(`[${requestId}] 发送消息失败`, {\n                errorMessage: error.message,\n                errorType: error.name,\n                errorStack: error.stack,\n                totalDuration: `${totalDuration}ms`,\n                userInput: userInput,\n                settings: settings,\n                conversationId: currentConversationId\n            });\n            \n            const errorMessage = { \n                id: Date.now() + 2,\n                text: '发送消息时出错: ' + (error.message || '未知错误'), \n                sender: 'bot',\n                timestamp: new Date()\n            };\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\n            setServerError(error.message || '服务器连接失败');\n        } finally {\n            setIsWaitingForResponse(false);\n            setIsGenerating(false);\n            \n            logger.debug(`[${requestId}] 请求状态重置完成`);\n        }\n    };\n\n    const handleRegenerateResponse = async () => {\n        setIsGenerating(true);\n        setServerError(null);\n        \n        try {\n            // 获取最后一条消息作为重发的基础\n            const lastUserMessage = messages\n                .slice()\n                .reverse()\n                .find(msg => msg.sender === 'user');\n\n            if (!lastUserMessage) {\n                throw new Error('未找到可重发的消息');\n            }\n\n            // 添加用户消息\n            const userMsg = {\n                id: Date.now(),\n                text: lastUserMessage.text,\n                sender: 'user',\n                timestamp: new Date(),\n                isGenerated: true\n            };\n            \n            setMessages(prev => [...prev, userMsg]);\n\n            // 准备聊天历史\n            const newChatHistory = [\n                ...chatHistory,\n                { role: 'user', content: lastUserMessage.text }\n            ];\n\n            // 创建初始的掩码消息\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n                id: index,\n                char: '[MASK]',\n                confidence: 0,\n                color: '#444444',\n                isGenerated: false\n            }));\n\n            const botMessage = {\n                id: Date.now() + 1,\n                text: '',\n                sender: 'bot',\n                timestamp: new Date(),\n                tokens: initialTokens,\n                isGenerated: false\n            };\n\n            setMessages(prev => [...prev, botMessage]);\n\n            // 调用后端API生成响应\n            const requestSettings = {\n                ...settings,\n                constraints: constraints\n            };\n\n            const response = await sendMessage(newChatHistory, requestSettings);\n            \n            if (response.error) {\n                throw new Error(response.error);\n            }\n\n            // 更新聊天历史\n            setChatHistory([\n                ...newChatHistory,\n                { role: 'assistant', content: response.response }\n            ]);\n\n            // 逐步显示可视化过程\n            const visualizationSteps = response.visualization || [];\n            \n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n                const step = visualizationSteps[stepIndex];\n                const tokens = parseVisualizationState(step);\n                \n                // 更新消息中的tokens\n                setMessages(prev => prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { ...msg, tokens };\n                    }\n                    return msg;\n                }));\n                \n                // 如果不是最后一步，等待一段时间再显示下一步\n                if (stepIndex < visualizationSteps.length - 1) {\n                    await new Promise(resolve => setTimeout(resolve, 300));\n                }\n            }\n\n            // 生成完成，设置最终文本\n            setMessages(prev => {\n                const updatedMessages = prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { \n                            ...msg, \n                            text: response.response,\n                            isGenerated: true \n                        };\n                    }\n                    return msg;\n                });\n                \n                // 更新当前对话\n                updateCurrentConversation(updatedMessages);\n                \n                return updatedMessages;\n            });\n\n            setConfidence(response.confidence || 0);\n            \n        } catch (error) {\n            console.error('重发消息时出错:', error);\n            const errorMessage = { \n                id: Date.now() + 2,\n                text: '重发消息时出错: ' + (error.message || '未知错误'), \n                sender: 'bot',\n                timestamp: new Date()\n            };\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\n            setServerError(error.message || '服务器连接失败');\n        } finally {\n            setIsGenerating(false);\n        }\n    };\n\n    // 辅助函数：更新当前对话\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\n        // 更新当前对话的历史\n        setConversations(prev => {\n            return prev.map(conv => {\n                if (conv.id === currentConversationId) {\n                    return { ...conv, history: updatedMessages };\n                }\n                return conv;\n            });\n        });\n    };\n\n    // 解析可视化状态\n    const parseVisualizationState = (step) => {\n        if (!step || !Array.isArray(step)) {\n            return [];\n        }\n\n        return step.map((tokenData, index) => {\n            // tokenData是 [token_text, color] 的格式\n            const [tokenText, color] = tokenData;\n            \n            return {\n                id: index,\n                char: tokenText,\n                confidence: getConfidenceFromColor(color),\n                color: color,\n                isGenerated: tokenText !== '[MASK]'\n            };\n        });\n    };\n\n    // 从颜色推断置信度（与app.py保持一致）\n    const getConfidenceFromColor = (color) => {\n        switch (color) {\n            case '#444444': return 0;     // [MASK] - 深灰色\n            case '#FF6666': return 0.2;   // 低置信度 - 红色\n            case '#FFAA33': return 0.5;   // 中置信度 - 橙色\n            case '#66CC66': return 0.8;   // 高置信度 - 绿色\n            case '#6699CC': return 1.0;   // 之前生成的token - 蓝色\n            default: return 0.5;\n        }\n    };\n\n    // 获取置信度颜色（与app.py保持一致）\n    const getColorFromConfidence = (confidence) => {\n        if (confidence < 0.3) return '#FF6666'; // 低置信度：红色\n        if (confidence < 0.7) return '#FFAA33'; // 中置信度：橙色\n        return '#66CC66';                       // 高置信度：绿色\n    };\n\n    // 处理按键按下事件\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSend();\n        }\n    };\n\n    // 检查服务器状态\n    useEffect(() => {\n        const checkStatus = async () => {\n            try {\n                const status = await getStatus();\n                setServerError(null);\n                setSystemStatus({\n                    backendConnected: true,\n                    device: status.device || 'Unknown',\n                    modelLoaded: true,\n                    lastCheck: new Date()\n                });\n            } catch (error) {\n                setServerError('服务器连接失败');\n                setSystemStatus({\n                    backendConnected: false,\n                    device: 'Unknown',\n                    modelLoaded: false,\n                    lastCheck: new Date()\n                });\n            }\n        };\n\n        checkStatus();\n        const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"diffusion-model\">\n            <Sidebar\n                conversations={conversations}\n                activeConversationId={currentConversationId}\n                onNewConversation={handleNewConversation}\n                onSelectConversation={handleSwitchConversation}\n                onDeleteConversation={handleDeleteConversation}\n                systemStatus={systemStatus}\n                isGenerating={isGenerating}\n            />\n            <div className=\"main-content\">\n                <div className=\"chat-container\">\n                    <MessageList \n                        messages={messages} \n                        isGenerating={isGenerating}\n                        serverError={serverError}\n                        getConfidenceColor={getColorFromConfidence}\n                        formatTime={(timestamp) => new Date(timestamp).toLocaleTimeString()}\n                        messagesEndRef={messagesEndRef}\n                    />\n                    <div className=\"input-area-container\">\n                        <InputArea \n                            inputValue={input}\n                            setInputValue={setInput}\n                            constraints={constraints}\n                            setConstraints={setConstraints}\n                            handleSend={handleSend}\n                            handleKeyPress={handleKeyPress}\n                            isGenerating={isGenerating}\n                        />\n                    </div>\n                </div>\n            </div>\n            \n            {/* 右侧设置边栏 - 模型设置和置信度颜色说明 */}\n            <div className=\"settings-sidebar\">\n                <div className=\"settings-section\">\n                    <h3>模型设置</h3>\n                    <SettingsPanel \n                        settings={settings}\n                        setSettings={setSettings}\n                        isGenerating={isGenerating}\n                    />\n                </div>\n                \n                <div className=\"confidence-section\">\n                    <ConfidenceIndicator />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DiffusionModel;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,WAAW,CAAEC,SAAS,CAAEC,YAAY,CAAEC,iBAAiB,CAAEC,MAAM,KAAQ,uBAAuB,CACvG,MAAO,CAAAC,mBAAmB,KAAM,kCAAkC,CAClE,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAC1C,MAAO,sBAAsB,CAC7B,MAAO,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErC,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CACzB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACoB,KAAK,CAAEC,QAAQ,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACsB,YAAY,CAAEC,eAAe,CAAC,CAAGvB,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACwB,WAAW,CAAEC,cAAc,CAAC,CAAGzB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAAC0B,WAAW,CAAEC,cAAc,CAAC,CAAG3B,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAAC4B,WAAW,CAAEC,cAAc,CAAC,CAAG7B,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAAC8B,UAAU,CAAEC,aAAa,CAAC,CAAG/B,QAAQ,CAAC,CAAC,CAAC,CAC/C,KAAM,CAACgC,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGjC,QAAQ,CAAC,KAAK,CAAC,CACvE,KAAM,CAACkC,QAAQ,CAAEC,WAAW,CAAC,CAAGnC,QAAQ,CAAC,CACrCoC,WAAW,CAAE,GAAG,CAChBC,KAAK,CAAE,IAAI,CACXC,UAAU,CAAE,EAAE,CACdC,SAAS,CAAE,CAAC,CACZC,KAAK,CAAE,EAAE,CACTC,SAAS,CAAE,GACf,CAAC,CAAC,CAEF;AACA,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAG3C,QAAQ,CAAC,CAC/C,CAAE4C,EAAE,CAAE,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAE,EAAG,CAAC,CACvC,CAAC,CACF,KAAM,CAACC,qBAAqB,CAAEC,wBAAwB,CAAC,CAAGhD,QAAQ,CAAC,CAAC,CAAC,CACrE,KAAM,CAACiD,YAAY,CAAEC,eAAe,CAAC,CAAGlD,QAAQ,CAAC,CAC7CmD,gBAAgB,CAAE,KAAK,CACvBC,MAAM,CAAE,SAAS,CACjBC,WAAW,CAAE,KAAK,CAClBC,SAAS,CAAE,IACf,CAAC,CAAC,CAEF,KAAM,CAAAC,cAAc,CAAGrD,MAAM,CAAC,IAAI,CAAC,CAEnCD,SAAS,CAAC,IAAM,KAAAuD,qBAAA,CACZ,CAAAA,qBAAA,CAAAD,cAAc,CAACE,OAAO,UAAAD,qBAAA,iBAAtBA,qBAAA,CAAwBE,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CAClE,CAAC,CAAE,CAACzC,QAAQ,CAAC,CAAC,CAEd;AAEA,KAAM,CAAA0C,qBAAqB,CAAGA,CAAA,GAAM,CAChC;AACA,KAAM,CAAAC,oBAAoB,CAAGnB,aAAa,CAACoB,GAAG,CAACC,IAAI,EAC/CA,IAAI,CAACnB,EAAE,GAAKG,qBAAqB,CAAG,CAAE,GAAGgB,IAAI,CAAEjB,OAAO,CAAE5B,QAAS,CAAC,CAAG6C,IACzE,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE;AACtC,KAAM,CAAAC,eAAe,CAAG,CACpBvB,EAAE,CAAEoB,iBAAiB,CACrBnB,IAAI,CAAE,MAAMgB,oBAAoB,CAACO,MAAM,CAAG,CAAC,EAAE,CAC7CtB,OAAO,CAAE,EACb,CAAC,CAEDH,gBAAgB,CAAC,CAAC,GAAGkB,oBAAoB,CAAEM,eAAe,CAAC,CAAC,CAC5DnB,wBAAwB,CAACgB,iBAAiB,CAAC,CAC3C7C,WAAW,CAAC,EAAE,CAAC,CAAE;AACjBE,QAAQ,CAAC,EAAE,CAAC,CACZU,aAAa,CAAC,CAAC,CAAC,CAChBE,uBAAuB,CAAC,KAAK,CAAC,CAClC,CAAC,CAED,KAAM,CAAAoC,wBAAwB,CAAIzB,EAAE,EAAK,CACrC,GAAIA,EAAE,GAAKG,qBAAqB,CAAE,OAElC;AACA,KAAM,CAAAc,oBAAoB,CAAGnB,aAAa,CAACoB,GAAG,CAACC,IAAI,EAC/CA,IAAI,CAACnB,EAAE,GAAKG,qBAAqB,CAAG,CAAE,GAAGgB,IAAI,CAAEjB,OAAO,CAAE5B,QAAS,CAAC,CAAG6C,IACzE,CAAC,CAED,KAAM,CAAAO,sBAAsB,CAAGT,oBAAoB,CAACU,IAAI,CAACR,IAAI,EAAIA,IAAI,CAACnB,EAAE,GAAKA,EAAE,CAAC,CAEhF,GAAI0B,sBAAsB,CAAE,CACxB3B,gBAAgB,CAACkB,oBAAoB,CAAC,CACtCb,wBAAwB,CAACsB,sBAAsB,CAAC1B,EAAE,CAAC,CACnDzB,WAAW,CAACmD,sBAAsB,CAACxB,OAAO,EAAI,EAAE,CAAC,CACrD,CACJ,CAAC,CAED,KAAM,CAAA0B,wBAAwB,CAAI5B,EAAE,EAAK,CACrC,KAAM,CAAAiB,oBAAoB,CAAGnB,aAAa,CAAC+B,MAAM,CAACV,IAAI,EAAIA,IAAI,CAACnB,EAAE,GAAKA,EAAE,CAAC,CACzED,gBAAgB,CAACkB,oBAAoB,CAAC,CAEtC,GAAIjB,EAAE,GAAKG,qBAAqB,CAAE,CAC9B,GAAIc,oBAAoB,CAACO,MAAM,CAAG,CAAC,CAAE,CACjC,KAAM,CAAAM,SAAS,CAAGb,oBAAoB,CAAC,CAAC,CAAC,CACzCb,wBAAwB,CAAC0B,SAAS,CAAC9B,EAAE,CAAC,CACtCzB,WAAW,CAACuD,SAAS,CAAC5B,OAAO,EAAI,EAAE,CAAC,CACxC,CAAC,IAAM,CACH;AACA,KAAM,CAAA6B,KAAK,CAAGV,IAAI,CAACC,GAAG,CAAC,CAAC,CACxB,KAAM,CAAAU,OAAO,CAAG,CAAEhC,EAAE,CAAE+B,KAAK,CAAE9B,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAE,EAAG,CAAC,CACxDH,gBAAgB,CAAC,CAACiC,OAAO,CAAC,CAAC,CAC3B5B,wBAAwB,CAAC2B,KAAK,CAAC,CAC/BxD,WAAW,CAAC,EAAE,CAAC,CACnB,CACJ,CACJ,CAAC,CAGD;AACA,KAAM,CAAA0D,gBAAgB,CAAG,KAAO,CAAAC,WAAW,EAAK,CAC5CvD,eAAe,CAAC,IAAI,CAAC,CACrBM,cAAc,CAAC,IAAI,CAAC,CAEpB,GAAI,CACA;AACA,KAAM,CAAAkD,OAAO,CAAG,CACZnC,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CACdc,IAAI,CAAEF,WAAW,CACjBG,MAAM,CAAE,MAAM,CACdC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CAAC,CACrBkB,WAAW,CAAE,IACjB,CAAC,CAEDhE,WAAW,CAACiE,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEL,OAAO,CAAC,CAAC,CAEvC;AACA,KAAM,CAAAM,cAAc,CAAG,CACnB,GAAG7D,WAAW,CACd,CAAE8D,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAET,WAAY,CAAC,CACzC,CAED;AACA,KAAM,CAAAU,aAAa,CAAGC,KAAK,CAACvD,QAAQ,CAACI,UAAU,CAAC,CAACoD,IAAI,CAAC,IAAI,CAAC,CAAC5B,GAAG,CAAC,CAAC6B,CAAC,CAAEC,KAAK,IAAM,CAC3EhD,EAAE,CAAEgD,KAAK,CACTC,IAAI,CAAE,QAAQ,CACd/D,UAAU,CAAE,CAAC,CACbgE,KAAK,CAAE,SAAS,CAChBX,WAAW,CAAE,KACjB,CAAC,CAAC,CAAC,CAEH,KAAM,CAAAY,UAAU,CAAG,CACfnD,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAAC,CAClBc,IAAI,CAAE,EAAE,CACRC,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CAAC,CACrB+B,MAAM,CAAER,aAAa,CACrBL,WAAW,CAAE,KACjB,CAAC,CAEDhE,WAAW,CAACiE,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEW,UAAU,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAE,eAAe,CAAG,CACpB,GAAG/D,QAAQ,CACXR,WAAW,CAAEA,WACjB,CAAC,CAED,KAAM,CAAAwE,QAAQ,CAAG,KAAM,CAAA/F,WAAW,CAACkF,cAAc,CAAEY,eAAe,CAAC,CAEnE,GAAIC,QAAQ,CAACC,KAAK,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACF,QAAQ,CAACC,KAAK,CAAC,CACnC,CAEA;AACA1E,cAAc,CAAC,CACX,GAAG4D,cAAc,CACjB,CAAEC,IAAI,CAAE,WAAW,CAAEC,OAAO,CAAEW,QAAQ,CAACA,QAAS,CAAC,CACpD,CAAC,CAEF;AACA,KAAM,CAAAG,kBAAkB,CAAGH,QAAQ,CAACI,aAAa,EAAI,EAAE,CAEvD,IAAK,GAAI,CAAAC,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAGF,kBAAkB,CAACjC,MAAM,CAAEmC,SAAS,EAAE,CAAE,CACxE,KAAM,CAAAC,IAAI,CAAGH,kBAAkB,CAACE,SAAS,CAAC,CAC1C,KAAM,CAAAP,MAAM,CAAGS,uBAAuB,CAACD,IAAI,CAAC,CAE5C;AACArF,WAAW,CAACiE,IAAI,EAAIA,IAAI,CAACtB,GAAG,CAAC4C,GAAG,EAAI,CAChC,GAAIA,GAAG,CAAC9D,EAAE,GAAKmD,UAAU,CAACnD,EAAE,CAAE,CAC1B,MAAO,CAAE,GAAG8D,GAAG,CAAEV,MAAO,CAAC,CAC7B,CACA,MAAO,CAAAU,GAAG,CACd,CAAC,CAAC,CAAC,CAEH;AACA,GAAIH,SAAS,CAAGF,kBAAkB,CAACjC,MAAM,CAAG,CAAC,CAAE,CAC3C,KAAM,IAAI,CAAAuC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAC1D,CACJ,CAEA;AACAzF,WAAW,CAACiE,IAAI,EAAI,CAChB,KAAM,CAAA0B,eAAe,CAAG1B,IAAI,CAACtB,GAAG,CAAC4C,GAAG,EAAI,CACpC,GAAIA,GAAG,CAAC9D,EAAE,GAAKmD,UAAU,CAACnD,EAAE,CAAE,CAC1B,MAAO,CACH,GAAG8D,GAAG,CACN1B,IAAI,CAAEkB,QAAQ,CAACA,QAAQ,CACvBf,WAAW,CAAE,IACjB,CAAC,CACL,CACA,MAAO,CAAAuB,GAAG,CACd,CAAC,CAAC,CAEF;AACA,KAAM,CAAAK,gBAAgB,CAAG,CACrB,GAAG1B,cAAc,CACjB,CAAEC,IAAI,CAAE,WAAW,CAAEC,OAAO,CAAEW,QAAQ,CAACA,QAAS,CAAC,CACpD,CACDzE,cAAc,CAACsF,gBAAgB,CAAC,CAChCC,yBAAyB,CAACF,eAAe,CAAEC,gBAAgB,CAAC,CAE5D,MAAO,CAAAD,eAAe,CAC1B,CAAC,CAAC,CAEN,CAAE,MAAOX,KAAK,CAAE,CACZc,OAAO,CAACd,KAAK,CAAC,UAAU,CAAEA,KAAK,CAAC,CAChCtE,cAAc,CAACsE,KAAK,CAACe,OAAO,EAAI,SAAS,CAAC,CAE1C;AACA/F,WAAW,CAACiE,IAAI,EAAIA,IAAI,CAACX,MAAM,CAACiC,GAAG,EAAIA,GAAG,CAAC9D,EAAE,GAAKqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CACtE,CAAC,OAAS,CACN3C,eAAe,CAAC,KAAK,CAAC,CAC1B,CACJ,CAAC,CAED,KAAM,CAAA4F,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAI/F,KAAK,CAACgG,IAAI,CAAC,CAAC,GAAK,EAAE,EAAIpF,oBAAoB,CAAE,OAEjD,KAAM,CAAAqF,gBAAgB,CAAGpD,IAAI,CAACC,GAAG,CAAC,CAAC,CACnC,KAAM,CAAAoD,SAAS,CAAG,YAAYD,gBAAgB,IAAIE,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CAE3FnH,MAAM,CAACoH,IAAI,CAAC,IAAIL,SAAS,cAAc,CAAE,CACrCM,SAAS,CAAExG,KAAK,CAChByG,WAAW,CAAEzG,KAAK,CAACgD,MAAM,CACzB0D,cAAc,CAAE/E,qBAAqB,CACrCgF,oBAAoB,CAAE7G,QAAQ,CAACkD,MAAM,CACrClC,QAAQ,CAAEA,QAAQ,CAClBR,WAAW,CAAEA,WACjB,CAAC,CAAC,CAEF,KAAM,CAAAoD,WAAW,CAAG,CAChBlC,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CACdc,IAAI,CAAE5D,KAAK,CACX6D,MAAM,CAAE,MAAM,CACdC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CACxB,CAAC,CACD9C,WAAW,CAAC6G,YAAY,EAAI,CAAC,GAAGA,YAAY,CAAElD,WAAW,CAAC,CAAC,CAC3D,KAAM,CAAA8C,SAAS,CAAGxG,KAAK,CACvBC,QAAQ,CAAC,EAAE,CAAC,CACZY,uBAAuB,CAAC,IAAI,CAAC,CAC7BV,eAAe,CAAC,IAAI,CAAC,CACrBM,cAAc,CAAC,IAAI,CAAC,CAEpB,GAAI,KAAAoG,kBAAA,CAAAC,qBAAA,CACA;AACA,KAAM,CAAA7C,cAAc,CAAG,CACnB,GAAG7D,WAAW,CACd,CAAE8D,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAEqC,SAAU,CAAC,CACvC,CAEDrH,MAAM,CAACoH,IAAI,CAAC,IAAIL,SAAS,WAAW,CAAE,CAClCa,iBAAiB,CAAE9C,cAAc,CAACjB,MAAM,CACxCgE,eAAe,CAAER,SAAS,CAC1BS,YAAY,CAAEnG,QAClB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAsD,aAAa,CAAGC,KAAK,CAACvD,QAAQ,CAACI,UAAU,CAAC,CAACoD,IAAI,CAAC,IAAI,CAAC,CAAC5B,GAAG,CAAC,CAAC6B,CAAC,CAAEC,KAAK,IAAM,CAC3EhD,EAAE,CAAEgD,KAAK,CACTC,IAAI,CAAE,QAAQ,CACd/D,UAAU,CAAE,CAAC,CACbgE,KAAK,CAAE,SAAS,CAChBX,WAAW,CAAE,KACjB,CAAC,CAAC,CAAC,CAEH,KAAM,CAAAY,UAAU,CAAG,CACfnD,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAAC,CAClBc,IAAI,CAAE,EAAE,CACRC,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CAAC,CACrB+B,MAAM,CAAER,aAAa,CACrBL,WAAW,CAAE,KACjB,CAAC,CAEDhE,WAAW,CAAC6G,YAAY,EAAI,CAAC,GAAGA,YAAY,CAAEjC,UAAU,CAAC,CAAC,CAE1D;AACA,KAAM,CAAAE,eAAe,CAAG,CACpB,GAAG/D,QAAQ,CACXR,WAAW,CAAEA,WACjB,CAAC,CAEDnB,MAAM,CAACoH,IAAI,CAAC,IAAIL,SAAS,WAAW,CAAE,CAClCgB,QAAQ,CAAE,WAAW,CACrBC,YAAY,CAAElD,cAAc,CAACjB,MAAM,CACnClC,QAAQ,CAAE+D,eACd,CAAC,CAAC,CAEF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA/F,WAAW,CAACkF,cAAc,CAAEY,eAAe,CAAC,CAEnE,GAAIC,QAAQ,CAACC,KAAK,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACF,QAAQ,CAACC,KAAK,CAAC,CACnC,CAEA5F,MAAM,CAACoH,IAAI,CAAC,IAAIL,SAAS,UAAU,CAAE,CACjCkB,cAAc,EAAAP,kBAAA,CAAE/B,QAAQ,CAACA,QAAQ,UAAA+B,kBAAA,iBAAjBA,kBAAA,CAAmB7D,MAAM,CACzCqE,uBAAuB,EAAAP,qBAAA,CAAEhC,QAAQ,CAACI,aAAa,UAAA4B,qBAAA,iBAAtBA,qBAAA,CAAwB9D,MAAM,CACvDsE,gBAAgB,CAAExC,QAAQ,CAACyC,UAAU,CACrCC,eAAe,CAAE1C,QAAQ,CAAC2C,QAC9B,CAAC,CAAC,CAEF;AACApH,cAAc,CAAC,CACX,GAAG4D,cAAc,CACjB,CAAEC,IAAI,CAAE,WAAW,CAAEC,OAAO,CAAEW,QAAQ,CAACA,QAAS,CAAC,CACpD,CAAC,CAEF;AACA,KAAM,CAAAG,kBAAkB,CAAGH,QAAQ,CAACI,aAAa,EAAI,EAAE,CAEvD/F,MAAM,CAACoH,IAAI,CAAC,IAAIL,SAAS,WAAW,CAAE,CAClCmB,uBAAuB,CAAEpC,kBAAkB,CAACjC,MAAM,CAClD0E,cAAc,CAAE,GACpB,CAAC,CAAC,CAEF,IAAK,GAAI,CAAAvC,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAGF,kBAAkB,CAACjC,MAAM,CAAEmC,SAAS,EAAE,CAAE,CACxE,KAAM,CAAAC,IAAI,CAAGH,kBAAkB,CAACE,SAAS,CAAC,CAC1C,KAAM,CAAAP,MAAM,CAAGS,uBAAuB,CAACD,IAAI,CAAC,CAE5C;AACArF,WAAW,CAACiE,IAAI,EAAIA,IAAI,CAACtB,GAAG,CAAC4C,GAAG,EAAI,CAChC,GAAIA,GAAG,CAAC9D,EAAE,GAAKmD,UAAU,CAACnD,EAAE,CAAE,CAC1B,MAAO,CAAE,GAAG8D,GAAG,CAAEV,MAAO,CAAC,CAC7B,CACA,MAAO,CAAAU,GAAG,CACd,CAAC,CAAC,CAAC,CAEH;AACA,GAAIH,SAAS,CAAGF,kBAAkB,CAACjC,MAAM,CAAG,CAAC,CAAE,CAC3C,KAAM,IAAI,CAAAuC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAAE;AAC5D,CACJ,CAEA;AACAzF,WAAW,CAACiE,IAAI,EAAI,CAChB,KAAM,CAAA0B,eAAe,CAAG1B,IAAI,CAACtB,GAAG,CAAC4C,GAAG,EAAI,CACpC,GAAIA,GAAG,CAAC9D,EAAE,GAAKmD,UAAU,CAACnD,EAAE,CAAE,CAC1B,MAAO,CACH,GAAG8D,GAAG,CACN1B,IAAI,CAAEkB,QAAQ,CAACA,QAAQ,CACvBf,WAAW,CAAE,IACjB,CAAC,CACL,CACA,MAAO,CAAAuB,GAAG,CACd,CAAC,CAAC,CAEF;AACAM,yBAAyB,CAACF,eAAe,CAAC,CAE1C,MAAO,CAAAA,eAAe,CAC1B,CAAC,CAAC,CAEF/E,aAAa,CAACmE,QAAQ,CAACpE,UAAU,EAAI,CAAC,CAAC,CAEvC,KAAM,CAAAiH,cAAc,CAAG9E,IAAI,CAACC,GAAG,CAAC,CAAC,CACjC,KAAM,CAAA8E,aAAa,CAAGD,cAAc,CAAG1B,gBAAgB,CAEvD9G,MAAM,CAACoH,IAAI,CAAC,IAAIL,SAAS,UAAU,CAAE,CACjC0B,aAAa,CAAE,GAAGA,aAAa,IAAI,CACnCC,mBAAmB,CAAE/C,QAAQ,CAACA,QAAQ,CAAC9B,MAAM,CAC7C8E,mBAAmB,CAAE,IACzB,CAAC,CAAC,CAEN,CAAE,MAAO/C,KAAK,CAAE,CACZ,KAAM,CAAA4C,cAAc,CAAG9E,IAAI,CAACC,GAAG,CAAC,CAAC,CACjC,KAAM,CAAA8E,aAAa,CAAGD,cAAc,CAAG1B,gBAAgB,CAEvD9G,MAAM,CAAC4F,KAAK,CAAC,IAAImB,SAAS,UAAU,CAAE,CAClC6B,YAAY,CAAEhD,KAAK,CAACe,OAAO,CAC3BkC,SAAS,CAAEjD,KAAK,CAACtD,IAAI,CACrBwG,UAAU,CAAElD,KAAK,CAACmD,KAAK,CACvBN,aAAa,CAAE,GAAGA,aAAa,IAAI,CACnCpB,SAAS,CAAEA,SAAS,CACpB1F,QAAQ,CAAEA,QAAQ,CAClB4F,cAAc,CAAE/E,qBACpB,CAAC,CAAC,CAEF,KAAM,CAAAoG,YAAY,CAAG,CACjBvG,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAAC,CAClBc,IAAI,CAAE,WAAW,EAAImB,KAAK,CAACe,OAAO,EAAI,MAAM,CAAC,CAC7CjC,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CACxB,CAAC,CACD9C,WAAW,CAAC6G,YAAY,EAAIA,YAAY,CAACuB,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAACL,YAAY,CAAC,CAAC,CAAC,CAC7EtH,cAAc,CAACsE,KAAK,CAACe,OAAO,EAAI,SAAS,CAAC,CAC9C,CAAC,OAAS,CACNjF,uBAAuB,CAAC,KAAK,CAAC,CAC9BV,eAAe,CAAC,KAAK,CAAC,CAEtBhB,MAAM,CAACkJ,KAAK,CAAC,IAAInC,SAAS,YAAY,CAAC,CAC3C,CACJ,CAAC,CAED,KAAM,CAAAoC,wBAAwB,CAAG,KAAAA,CAAA,GAAY,CACzCnI,eAAe,CAAC,IAAI,CAAC,CACrBM,cAAc,CAAC,IAAI,CAAC,CAEpB,GAAI,CACA;AACA,KAAM,CAAAuG,eAAe,CAAGlH,QAAQ,CAC3BqI,KAAK,CAAC,CAAC,CACPI,OAAO,CAAC,CAAC,CACTpF,IAAI,CAACmC,GAAG,EAAIA,GAAG,CAACzB,MAAM,GAAK,MAAM,CAAC,CAEvC,GAAI,CAACmD,eAAe,CAAE,CAClB,KAAM,IAAI,CAAAhC,KAAK,CAAC,WAAW,CAAC,CAChC,CAEA;AACA,KAAM,CAAArB,OAAO,CAAG,CACZnC,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CACdc,IAAI,CAAEoD,eAAe,CAACpD,IAAI,CAC1BC,MAAM,CAAE,MAAM,CACdC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CAAC,CACrBkB,WAAW,CAAE,IACjB,CAAC,CAEDhE,WAAW,CAACiE,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEL,OAAO,CAAC,CAAC,CAEvC;AACA,KAAM,CAAAM,cAAc,CAAG,CACnB,GAAG7D,WAAW,CACd,CAAE8D,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAE6C,eAAe,CAACpD,IAAK,CAAC,CAClD,CAED;AACA,KAAM,CAAAQ,aAAa,CAAGC,KAAK,CAACvD,QAAQ,CAACI,UAAU,CAAC,CAACoD,IAAI,CAAC,IAAI,CAAC,CAAC5B,GAAG,CAAC,CAAC6B,CAAC,CAAEC,KAAK,IAAM,CAC3EhD,EAAE,CAAEgD,KAAK,CACTC,IAAI,CAAE,QAAQ,CACd/D,UAAU,CAAE,CAAC,CACbgE,KAAK,CAAE,SAAS,CAChBX,WAAW,CAAE,KACjB,CAAC,CAAC,CAAC,CAEH,KAAM,CAAAY,UAAU,CAAG,CACfnD,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAAC,CAClBc,IAAI,CAAE,EAAE,CACRC,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CAAC,CACrB+B,MAAM,CAAER,aAAa,CACrBL,WAAW,CAAE,KACjB,CAAC,CAEDhE,WAAW,CAACiE,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEW,UAAU,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAE,eAAe,CAAG,CACpB,GAAG/D,QAAQ,CACXR,WAAW,CAAEA,WACjB,CAAC,CAED,KAAM,CAAAwE,QAAQ,CAAG,KAAM,CAAA/F,WAAW,CAACkF,cAAc,CAAEY,eAAe,CAAC,CAEnE,GAAIC,QAAQ,CAACC,KAAK,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACF,QAAQ,CAACC,KAAK,CAAC,CACnC,CAEA;AACA1E,cAAc,CAAC,CACX,GAAG4D,cAAc,CACjB,CAAEC,IAAI,CAAE,WAAW,CAAEC,OAAO,CAAEW,QAAQ,CAACA,QAAS,CAAC,CACpD,CAAC,CAEF;AACA,KAAM,CAAAG,kBAAkB,CAAGH,QAAQ,CAACI,aAAa,EAAI,EAAE,CAEvD,IAAK,GAAI,CAAAC,SAAS,CAAG,CAAC,CAAEA,SAAS,CAAGF,kBAAkB,CAACjC,MAAM,CAAEmC,SAAS,EAAE,CAAE,CACxE,KAAM,CAAAC,IAAI,CAAGH,kBAAkB,CAACE,SAAS,CAAC,CAC1C,KAAM,CAAAP,MAAM,CAAGS,uBAAuB,CAACD,IAAI,CAAC,CAE5C;AACArF,WAAW,CAACiE,IAAI,EAAIA,IAAI,CAACtB,GAAG,CAAC4C,GAAG,EAAI,CAChC,GAAIA,GAAG,CAAC9D,EAAE,GAAKmD,UAAU,CAACnD,EAAE,CAAE,CAC1B,MAAO,CAAE,GAAG8D,GAAG,CAAEV,MAAO,CAAC,CAC7B,CACA,MAAO,CAAAU,GAAG,CACd,CAAC,CAAC,CAAC,CAEH;AACA,GAAIH,SAAS,CAAGF,kBAAkB,CAACjC,MAAM,CAAG,CAAC,CAAE,CAC3C,KAAM,IAAI,CAAAuC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAC1D,CACJ,CAEA;AACAzF,WAAW,CAACiE,IAAI,EAAI,CAChB,KAAM,CAAA0B,eAAe,CAAG1B,IAAI,CAACtB,GAAG,CAAC4C,GAAG,EAAI,CACpC,GAAIA,GAAG,CAAC9D,EAAE,GAAKmD,UAAU,CAACnD,EAAE,CAAE,CAC1B,MAAO,CACH,GAAG8D,GAAG,CACN1B,IAAI,CAAEkB,QAAQ,CAACA,QAAQ,CACvBf,WAAW,CAAE,IACjB,CAAC,CACL,CACA,MAAO,CAAAuB,GAAG,CACd,CAAC,CAAC,CAEF;AACAM,yBAAyB,CAACF,eAAe,CAAC,CAE1C,MAAO,CAAAA,eAAe,CAC1B,CAAC,CAAC,CAEF/E,aAAa,CAACmE,QAAQ,CAACpE,UAAU,EAAI,CAAC,CAAC,CAE3C,CAAE,MAAOqE,KAAK,CAAE,CACZc,OAAO,CAACd,KAAK,CAAC,UAAU,CAAEA,KAAK,CAAC,CAChC,KAAM,CAAAgD,YAAY,CAAG,CACjBvG,EAAE,CAAEqB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,CAAC,CAClBc,IAAI,CAAE,WAAW,EAAImB,KAAK,CAACe,OAAO,EAAI,MAAM,CAAC,CAC7CjC,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAjB,IAAI,CAAC,CACxB,CAAC,CACD9C,WAAW,CAAC6G,YAAY,EAAIA,YAAY,CAACuB,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAACL,YAAY,CAAC,CAAC,CAAC,CAC7EtH,cAAc,CAACsE,KAAK,CAACe,OAAO,EAAI,SAAS,CAAC,CAC9C,CAAC,OAAS,CACN3F,eAAe,CAAC,KAAK,CAAC,CAC1B,CACJ,CAAC,CAED;AACA,KAAM,CAAAyF,yBAAyB,CAAGA,CAACF,eAAe,CAAEC,gBAAgB,GAAK,CACrE;AACApE,gBAAgB,CAACyC,IAAI,EAAI,CACrB,MAAO,CAAAA,IAAI,CAACtB,GAAG,CAACC,IAAI,EAAI,CACpB,GAAIA,IAAI,CAACnB,EAAE,GAAKG,qBAAqB,CAAE,CACnC,MAAO,CAAE,GAAGgB,IAAI,CAAEjB,OAAO,CAAEgE,eAAgB,CAAC,CAChD,CACA,MAAO,CAAA/C,IAAI,CACf,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,CAED;AACA,KAAM,CAAA0C,uBAAuB,CAAID,IAAI,EAAK,CACtC,GAAI,CAACA,IAAI,EAAI,CAACf,KAAK,CAACmE,OAAO,CAACpD,IAAI,CAAC,CAAE,CAC/B,MAAO,EAAE,CACb,CAEA,MAAO,CAAAA,IAAI,CAAC1C,GAAG,CAAC,CAAC+F,SAAS,CAAEjE,KAAK,GAAK,CAClC;AACA,KAAM,CAACkE,SAAS,CAAEhE,KAAK,CAAC,CAAG+D,SAAS,CAEpC,MAAO,CACHjH,EAAE,CAAEgD,KAAK,CACTC,IAAI,CAAEiE,SAAS,CACfhI,UAAU,CAAEiI,sBAAsB,CAACjE,KAAK,CAAC,CACzCA,KAAK,CAAEA,KAAK,CACZX,WAAW,CAAE2E,SAAS,GAAK,QAC/B,CAAC,CACL,CAAC,CAAC,CACN,CAAC,CAED;AACA,KAAM,CAAAC,sBAAsB,CAAIjE,KAAK,EAAK,CACtC,OAAQA,KAAK,EACT,IAAK,SAAS,CAAE,MAAO,EAAC,CAAM;AAC9B,IAAK,SAAS,CAAE,MAAO,IAAG,CAAI;AAC9B,IAAK,SAAS,CAAE,MAAO,IAAG,CAAI;AAC9B,IAAK,SAAS,CAAE,MAAO,IAAG,CAAI;AAC9B,IAAK,SAAS,CAAE,MAAO,IAAG,CAAI;AAC9B,QAAS,MAAO,IAAG,CACvB,CACJ,CAAC,CAED;AACA,KAAM,CAAAkE,sBAAsB,CAAIlI,UAAU,EAAK,CAC3C,GAAIA,UAAU,CAAG,GAAG,CAAE,MAAO,SAAS,CAAE;AACxC,GAAIA,UAAU,CAAG,GAAG,CAAE,MAAO,SAAS,CAAE;AACxC,MAAO,SAAS,CAAwB;AAC5C,CAAC,CAED;AACA,KAAM,CAAAmI,cAAc,CAAIC,CAAC,EAAK,CAC1B,GAAIA,CAAC,CAACC,GAAG,GAAK,OAAO,EAAI,CAACD,CAAC,CAACE,QAAQ,CAAE,CAClCF,CAAC,CAACG,cAAc,CAAC,CAAC,CAClBlD,UAAU,CAAC,CAAC,CAChB,CACJ,CAAC,CAED;AACAlH,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAqK,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAnK,SAAS,CAAC,CAAC,CAChCyB,cAAc,CAAC,IAAI,CAAC,CACpBqB,eAAe,CAAC,CACZC,gBAAgB,CAAE,IAAI,CACtBC,MAAM,CAAEmH,MAAM,CAACnH,MAAM,EAAI,SAAS,CAClCC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,GAAI,CAAAW,IAAI,CAAC,CACxB,CAAC,CAAC,CACN,CAAE,MAAOkC,KAAK,CAAE,CACZtE,cAAc,CAAC,SAAS,CAAC,CACzBqB,eAAe,CAAC,CACZC,gBAAgB,CAAE,KAAK,CACvBC,MAAM,CAAE,SAAS,CACjBC,WAAW,CAAE,KAAK,CAClBC,SAAS,CAAE,GAAI,CAAAW,IAAI,CAAC,CACxB,CAAC,CAAC,CACN,CACJ,CAAC,CAEDqG,WAAW,CAAC,CAAC,CACb,KAAM,CAAAE,QAAQ,CAAGC,WAAW,CAACH,WAAW,CAAE,KAAK,CAAC,CAAE;AAElD,MAAO,IAAMI,aAAa,CAACF,QAAQ,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAEN,mBACIxJ,KAAA,QAAK2J,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC5B9J,IAAA,CAACF,OAAO,EACJ8B,aAAa,CAAEA,aAAc,CAC7BmI,oBAAoB,CAAE9H,qBAAsB,CAC5C+H,iBAAiB,CAAElH,qBAAsB,CACzCmH,oBAAoB,CAAE1G,wBAAyB,CAC/C2G,oBAAoB,CAAExG,wBAAyB,CAC/CvB,YAAY,CAAEA,YAAa,CAC3B3B,YAAY,CAAEA,YAAa,CAC9B,CAAC,cACFR,IAAA,QAAK6J,SAAS,CAAC,cAAc,CAAAC,QAAA,cACzB5J,KAAA,QAAK2J,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC3B9J,IAAA,CAACL,WAAW,EACRS,QAAQ,CAAEA,QAAS,CACnBI,YAAY,CAAEA,YAAa,CAC3BM,WAAW,CAAEA,WAAY,CACzBqJ,kBAAkB,CAAEjB,sBAAuB,CAC3CkB,UAAU,CAAGhG,SAAS,EAAK,GAAI,CAAAjB,IAAI,CAACiB,SAAS,CAAC,CAACiG,kBAAkB,CAAC,CAAE,CACpE5H,cAAc,CAAEA,cAAe,CAClC,CAAC,cACFzC,IAAA,QAAK6J,SAAS,CAAC,sBAAsB,CAAAC,QAAA,cACjC9J,IAAA,CAACH,SAAS,EACNyK,UAAU,CAAEhK,KAAM,CAClBiK,aAAa,CAAEhK,QAAS,CACxBK,WAAW,CAAEA,WAAY,CACzBC,cAAc,CAAEA,cAAe,CAC/BwF,UAAU,CAAEA,UAAW,CACvB8C,cAAc,CAAEA,cAAe,CAC/B3I,YAAY,CAAEA,YAAa,CAC9B,CAAC,CACD,CAAC,EACL,CAAC,CACL,CAAC,cAGNN,KAAA,QAAK2J,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7B5J,KAAA,QAAK2J,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7B9J,IAAA,OAAA8J,QAAA,CAAI,0BAAI,CAAI,CAAC,cACb9J,IAAA,CAACJ,aAAa,EACVwB,QAAQ,CAAEA,QAAS,CACnBC,WAAW,CAAEA,WAAY,CACzBb,YAAY,CAAEA,YAAa,CAC9B,CAAC,EACD,CAAC,cAENR,IAAA,QAAK6J,SAAS,CAAC,oBAAoB,CAAAC,QAAA,cAC/B9J,IAAA,CAACN,mBAAmB,GAAE,CAAC,CACtB,CAAC,EACL,CAAC,EACL,CAAC,CAEd,CAAC,CAED,cAAe,CAAAS,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}