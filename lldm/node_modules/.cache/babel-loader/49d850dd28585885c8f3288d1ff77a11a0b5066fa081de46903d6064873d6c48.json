{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendMessage, getStatus, generateText, checkServerStatus } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport './styles/Sidebar.css';\nimport './styles/DiffusionModel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const [confidence, setConfidence] = useState(0);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [settings, setSettings] = useState({\n    temperature: 0.7,\n    top_p: 0.95,\n    gen_length: 50,\n    num_beams: 4,\n    steps: 32,\n    cfg_scale: 1.0\n  });\n\n  // --- Conversation Management State ---\n  const [conversations, setConversations] = useState([{\n    id: 0,\n    name: '对话 1',\n    history: []\n  }]);\n  const [currentConversationId, setCurrentConversationId] = useState(0);\n  const [systemStatus, setSystemStatus] = useState({\n    backendConnected: false,\n    device: 'Unknown',\n    modelLoaded: false,\n    lastCheck: null\n  });\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // --- Conversation Management Handlers ---\n\n  const handleNewConversation = () => {\n    // Save the current conversation's history first.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n\n    // Create the new conversation.\n    const newConversationId = Date.now(); // Use timestamp for unique ID\n    const newConversation = {\n      id: newConversationId,\n      name: `对话 ${updatedConversations.length + 1}`,\n      history: []\n    };\n    setConversations([...updatedConversations, newConversation]);\n    setCurrentConversationId(newConversationId);\n    setMessages([]); // Clear messages for the new conversation\n    setInput('');\n    setConfidence(0);\n    setIsWaitingForResponse(false);\n  };\n  const handleSwitchConversation = id => {\n    if (id === currentConversationId) return;\n\n    // Save the current conversation's history before switching.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n    const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\n    if (newCurrentConversation) {\n      setConversations(updatedConversations);\n      setCurrentConversationId(newCurrentConversation.id);\n      setMessages(newCurrentConversation.history || []);\n    }\n  };\n  const handleDeleteConversation = id => {\n    const updatedConversations = conversations.filter(conv => conv.id !== id);\n    setConversations(updatedConversations);\n    if (id === currentConversationId) {\n      if (updatedConversations.length > 0) {\n        const firstConv = updatedConversations[0];\n        setCurrentConversationId(firstConv.id);\n        setMessages(firstConv.history || []);\n      } else {\n        // If all conversations are deleted, create a new default one.\n        const newId = Date.now();\n        const newConv = {\n          id: newId,\n          name: '对话 1',\n          history: []\n        };\n        setConversations([newConv]);\n        setCurrentConversationId(newId);\n        setMessages([]);\n      }\n    }\n  };\n\n  // 生成完整的回复\n  const generateResponse = async userMessage => {\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 添加用户消息\n      const userMsg = {\n        id: Date.now(),\n        text: userMessage,\n        sender: 'user',\n        timestamp: new Date(),\n        isGenerated: true\n      };\n      setMessages(prev => [...prev, userMsg]);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userMessage\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await sendMessage(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        const finalChatHistory = [...newChatHistory, {\n          role: 'assistant',\n          content: response.response\n        }];\n        setChatHistory(finalChatHistory);\n        updateCurrentConversation(updatedMessages, finalChatHistory);\n        return updatedMessages;\n      });\n    } catch (error) {\n      console.error('生成响应时出错:', error);\n      setServerError(error.message || '服务器连接失败');\n\n      // 移除未完成的bot消息\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleSend = async () => {\n    if (input.trim() === '' || isWaitingForResponse) return;\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    const userInput = input;\n    setInput('');\n    setIsWaitingForResponse(true);\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userInput\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await sendMessage(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 300)); // 增加延迟以便观察转换效果\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        updateCurrentConversation(updatedMessages);\n        return updatedMessages;\n      });\n      setConfidence(response.confidence || 0);\n    } catch (error) {\n      console.error('发送消息时出错:', error);\n      const errorMessage = {\n        id: Date.now() + 2,\n        text: '发送消息时出错: ' + (error.message || '未知错误'),\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\n      setServerError(error.message || '服务器连接失败');\n    } finally {\n      setIsWaitingForResponse(false);\n      setIsGenerating(false);\n    }\n  };\n  const handleRegenerateResponse = async () => {\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 获取最后一条消息作为重发的基础\n      const lastUserMessage = messages.slice().reverse().find(msg => msg.sender === 'user');\n      if (!lastUserMessage) {\n        throw new Error('未找到可重发的消息');\n      }\n\n      // 添加用户消息\n      const userMsg = {\n        id: Date.now(),\n        text: lastUserMessage.text,\n        sender: 'user',\n        timestamp: new Date(),\n        isGenerated: true\n      };\n      setMessages(prev => [...prev, userMsg]);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: lastUserMessage.text\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await sendMessage(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        updateCurrentConversation(updatedMessages);\n        return updatedMessages;\n      });\n      setConfidence(response.confidence || 0);\n    } catch (error) {\n      console.error('重发消息时出错:', error);\n      const errorMessage = {\n        id: Date.now() + 2,\n        text: '重发消息时出错: ' + (error.message || '未知错误'),\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\n      setServerError(error.message || '服务器连接失败');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // 辅助函数：更新当前对话\n  const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\n    // 更新当前对话的历史\n    setConversations(prev => {\n      return prev.map(conv => {\n        if (conv.id === currentConversationId) {\n          return {\n            ...conv,\n            history: updatedMessages\n          };\n        }\n        return conv;\n      });\n    });\n  };\n\n  // 解析可视化状态\n  const parseVisualizationState = step => {\n    if (!step || !Array.isArray(step)) {\n      return [];\n    }\n    return step.map((tokenData, index) => {\n      // tokenData是 [token_text, color] 的格式\n      const [tokenText, color] = tokenData;\n      return {\n        id: index,\n        char: tokenText,\n        confidence: getConfidenceFromColor(color),\n        color: color,\n        isGenerated: tokenText !== '[MASK]'\n      };\n    });\n  };\n\n  // 从颜色推断置信度（与app.py保持一致）\n  const getConfidenceFromColor = color => {\n    switch (color) {\n      case '#444444':\n        return 0;\n      // [MASK] - 深灰色\n      case '#FF6666':\n        return 0.2;\n      // 低置信度 - 红色\n      case '#FFAA33':\n        return 0.5;\n      // 中置信度 - 橙色\n      case '#66CC66':\n        return 0.8;\n      // 高置信度 - 绿色\n      case '#6699CC':\n        return 1.0;\n      // 之前生成的token - 蓝色\n      default:\n        return 0.5;\n    }\n  };\n\n  // 获取置信度颜色（与app.py保持一致）\n  const getColorFromConfidence = confidence => {\n    if (confidence < 0.3) return '#FF6666'; // 低置信度：红色\n    if (confidence < 0.7) return '#FFAA33'; // 中置信度：橙色\n    return '#66CC66'; // 高置信度：绿色\n  };\n\n  // 处理按键按下事件\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // 检查服务器状态\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const status = await getStatus();\n        setServerError(null);\n        setSystemStatus({\n          backendConnected: true,\n          device: status.device || 'Unknown',\n          modelLoaded: true,\n          lastCheck: new Date()\n        });\n      } catch (error) {\n        setServerError('服务器连接失败');\n        setSystemStatus({\n          backendConnected: false,\n          device: 'Unknown',\n          modelLoaded: false,\n          lastCheck: new Date()\n        });\n      }\n    };\n    checkStatus();\n    const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      activeConversationId: currentConversationId,\n      onNewConversation: handleNewConversation,\n      onSelectConversation: handleSwitchConversation,\n      onDeleteConversation: handleDeleteConversation,\n      systemStatus: systemStatus,\n      isGenerating: isGenerating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          isGenerating: isGenerating,\n          serverError: serverError,\n          getConfidenceColor: getColorFromConfidence,\n          formatTime: timestamp => new Date(timestamp).toLocaleTimeString(),\n          messagesEndRef: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-area-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"settings-container\",\n            children: /*#__PURE__*/_jsxDEV(\"details\", {\n              className: \"settings-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n                className: \"settings-toggle\",\n                children: \"\\u2699\\uFE0F \\u6A21\\u578B\\u8BBE\\u7F6E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"settings-content\",\n                children: /*#__PURE__*/_jsxDEV(SettingsPanel, {\n                  settings: settings,\n                  setSettings: setSettings,\n                  isGenerating: isGenerating\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(InputArea, {\n            inputValue: input,\n            setInputValue: setInput,\n            constraints: constraints,\n            setConstraints: setConstraints,\n            handleSend: handleSend,\n            handleKeyPress: handleKeyPress,\n            isGenerating: isGenerating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-sidebar\",\n      children: /*#__PURE__*/_jsxDEV(ConfidenceIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 562,\n    columnNumber: 9\n  }, this);\n};\n_s(DiffusionModel, \"eU8Ipz2+maVMBXs5EnASSC/WOUM=\");\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","generateText","checkServerStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsxDEV","_jsxDEV","DiffusionModel","_s","messages","setMessages","input","setInput","isGenerating","setIsGenerating","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","steps","cfg_scale","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","systemStatus","setSystemStatus","backendConnected","device","modelLoaded","lastCheck","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","generateResponse","userMessage","userMsg","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","_","index","char","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","step","parseVisualizationState","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","handleSend","trim","prevMessages","userInput","errorMessage","slice","concat","handleRegenerateResponse","lastUserMessage","reverse","isArray","tokenData","tokenText","getConfidenceFromColor","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","checkStatus","status","interval","setInterval","clearInterval","className","children","activeConversationId","onNewConversation","onSelectConversation","onDeleteConversation","fileName","_jsxFileName","lineNumber","columnNumber","getConfidenceColor","formatTime","toLocaleTimeString","inputValue","setInputValue","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { sendMessage, getStatus, generateText, checkServerStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport './styles/Sidebar.css';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [constraints, setConstraints] = useState('');\r\n    const [serverError, setServerError] = useState(null);\r\n    const [confidence, setConfidence] = useState(0);\r\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\r\n    const [settings, setSettings] = useState({\r\n        temperature: 0.7,\r\n        top_p: 0.95,\r\n        gen_length: 50,\r\n        num_beams: 4,\r\n        steps: 32,\r\n        cfg_scale: 1.0\r\n    });\r\n\r\n    // --- Conversation Management State ---\r\n    const [conversations, setConversations] = useState([\r\n        { id: 0, name: '对话 1', history: [] }\r\n    ]);\r\n    const [currentConversationId, setCurrentConversationId] = useState(0);\r\n    const [systemStatus, setSystemStatus] = useState({\r\n        backendConnected: false,\r\n        device: 'Unknown',\r\n        modelLoaded: false,\r\n        lastCheck: null\r\n    });\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // --- Conversation Management Handlers ---\r\n\r\n    const handleNewConversation = () => {\r\n        // Save the current conversation's history first.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        // Create the new conversation.\r\n        const newConversationId = Date.now(); // Use timestamp for unique ID\r\n        const newConversation = {\r\n            id: newConversationId,\r\n            name: `对话 ${updatedConversations.length + 1}`,\r\n            history: []\r\n        };\r\n\r\n        setConversations([...updatedConversations, newConversation]);\r\n        setCurrentConversationId(newConversationId);\r\n        setMessages([]); // Clear messages for the new conversation\r\n        setInput('');\r\n        setConfidence(0);\r\n        setIsWaitingForResponse(false);\r\n    };\r\n\r\n    const handleSwitchConversation = (id) => {\r\n        if (id === currentConversationId) return;\r\n\r\n        // Save the current conversation's history before switching.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\r\n\r\n        if (newCurrentConversation) {\r\n            setConversations(updatedConversations);\r\n            setCurrentConversationId(newCurrentConversation.id);\r\n            setMessages(newCurrentConversation.history || []);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConversation = (id) => {\r\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\r\n        setConversations(updatedConversations);\r\n\r\n        if (id === currentConversationId) {\r\n            if (updatedConversations.length > 0) {\r\n                const firstConv = updatedConversations[0];\r\n                setCurrentConversationId(firstConv.id);\r\n                setMessages(firstConv.history || []);\r\n            } else {\r\n                // If all conversations are deleted, create a new default one.\r\n                const newId = Date.now();\r\n                const newConv = { id: newId, name: '对话 1', history: [] };\r\n                setConversations([newConv]);\r\n                setCurrentConversationId(newId);\r\n                setMessages([]);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // 生成完整的回复\r\n    const generateResponse = async (userMessage) => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: userMessage,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userMessage }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 300));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                const finalChatHistory = [\r\n                    ...newChatHistory,\r\n                    { role: 'assistant', content: response.response }\r\n                ];\r\n                setChatHistory(finalChatHistory);\r\n                updateCurrentConversation(updatedMessages, finalChatHistory);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('生成响应时出错:', error);\r\n            setServerError(error.message || '服务器连接失败');\r\n            \r\n            // 移除未完成的bot消息\r\n            setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (input.trim() === '' || isWaitingForResponse) return;\r\n        \r\n        const userMessage = { \r\n            id: Date.now(),\r\n            text: input, \r\n            sender: 'user',\r\n            timestamp: new Date()\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, userMessage]);\r\n        const userInput = input;\r\n        setInput('');\r\n        setIsWaitingForResponse(true);\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n\r\n        try {\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userInput }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prevMessages => [...prevMessages, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 300)); // 增加延迟以便观察转换效果\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                updateCurrentConversation(updatedMessages);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n            setConfidence(response.confidence || 0);\r\n            \r\n        } catch (error) {\r\n            console.error('发送消息时出错:', error);\r\n            const errorMessage = { \r\n                id: Date.now() + 2,\r\n                text: '发送消息时出错: ' + (error.message || '未知错误'), \r\n                sender: 'bot',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\r\n            setServerError(error.message || '服务器连接失败');\r\n        } finally {\r\n            setIsWaitingForResponse(false);\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleRegenerateResponse = async () => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 获取最后一条消息作为重发的基础\r\n            const lastUserMessage = messages\r\n                .slice()\r\n                .reverse()\r\n                .find(msg => msg.sender === 'user');\r\n\r\n            if (!lastUserMessage) {\r\n                throw new Error('未找到可重发的消息');\r\n            }\r\n\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: lastUserMessage.text,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: lastUserMessage.text }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 300));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                updateCurrentConversation(updatedMessages);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n            setConfidence(response.confidence || 0);\r\n            \r\n        } catch (error) {\r\n            console.error('重发消息时出错:', error);\r\n            const errorMessage = { \r\n                id: Date.now() + 2,\r\n                text: '重发消息时出错: ' + (error.message || '未知错误'), \r\n                sender: 'bot',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\r\n            setServerError(error.message || '服务器连接失败');\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    // 辅助函数：更新当前对话\r\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\r\n        // 更新当前对话的历史\r\n        setConversations(prev => {\r\n            return prev.map(conv => {\r\n                if (conv.id === currentConversationId) {\r\n                    return { ...conv, history: updatedMessages };\r\n                }\r\n                return conv;\r\n            });\r\n        });\r\n    };\r\n\r\n    // 解析可视化状态\r\n    const parseVisualizationState = (step) => {\r\n        if (!step || !Array.isArray(step)) {\r\n            return [];\r\n        }\r\n\r\n        return step.map((tokenData, index) => {\r\n            // tokenData是 [token_text, color] 的格式\r\n            const [tokenText, color] = tokenData;\r\n            \r\n            return {\r\n                id: index,\r\n                char: tokenText,\r\n                confidence: getConfidenceFromColor(color),\r\n                color: color,\r\n                isGenerated: tokenText !== '[MASK]'\r\n            };\r\n        });\r\n    };\r\n\r\n    // 从颜色推断置信度（与app.py保持一致）\r\n    const getConfidenceFromColor = (color) => {\r\n        switch (color) {\r\n            case '#444444': return 0;     // [MASK] - 深灰色\r\n            case '#FF6666': return 0.2;   // 低置信度 - 红色\r\n            case '#FFAA33': return 0.5;   // 中置信度 - 橙色\r\n            case '#66CC66': return 0.8;   // 高置信度 - 绿色\r\n            case '#6699CC': return 1.0;   // 之前生成的token - 蓝色\r\n            default: return 0.5;\r\n        }\r\n    };\r\n\r\n    // 获取置信度颜色（与app.py保持一致）\r\n    const getColorFromConfidence = (confidence) => {\r\n        if (confidence < 0.3) return '#FF6666'; // 低置信度：红色\r\n        if (confidence < 0.7) return '#FFAA33'; // 中置信度：橙色\r\n        return '#66CC66';                       // 高置信度：绿色\r\n    };\r\n\r\n    // 处理按键按下事件\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSend();\r\n        }\r\n    };\r\n\r\n    // 检查服务器状态\r\n    useEffect(() => {\r\n        const checkStatus = async () => {\r\n            try {\r\n                const status = await getStatus();\r\n                setServerError(null);\r\n                setSystemStatus({\r\n                    backendConnected: true,\r\n                    device: status.device || 'Unknown',\r\n                    modelLoaded: true,\r\n                    lastCheck: new Date()\r\n                });\r\n            } catch (error) {\r\n                setServerError('服务器连接失败');\r\n                setSystemStatus({\r\n                    backendConnected: false,\r\n                    device: 'Unknown',\r\n                    modelLoaded: false,\r\n                    lastCheck: new Date()\r\n                });\r\n            }\r\n        };\r\n\r\n        checkStatus();\r\n        const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"diffusion-model\">\r\n            <Sidebar\r\n                conversations={conversations}\r\n                activeConversationId={currentConversationId}\r\n                onNewConversation={handleNewConversation}\r\n                onSelectConversation={handleSwitchConversation}\r\n                onDeleteConversation={handleDeleteConversation}\r\n                systemStatus={systemStatus}\r\n                isGenerating={isGenerating}\r\n            />\r\n            <div className=\"main-content\">\r\n                <div className=\"chat-container\">\r\n                    <MessageList \r\n                        messages={messages} \r\n                        isGenerating={isGenerating}\r\n                        serverError={serverError}\r\n                        getConfidenceColor={getColorFromConfidence}\r\n                        formatTime={(timestamp) => new Date(timestamp).toLocaleTimeString()}\r\n                        messagesEndRef={messagesEndRef}\r\n                    />\r\n                    <div className=\"input-area-container\">\r\n                        {/* 设置面板 - 移到输入区域上方 */}\r\n                        <div className=\"settings-container\">\r\n                            <details className=\"settings-details\">\r\n                                <summary className=\"settings-toggle\">⚙️ 模型设置</summary>\r\n                                <div className=\"settings-content\">\r\n                                    <SettingsPanel \r\n                                        settings={settings}\r\n                                        setSettings={setSettings}\r\n                                        isGenerating={isGenerating}\r\n                                    />\r\n                                </div>\r\n                            </details>\r\n                        </div>\r\n                        \r\n                        <InputArea \r\n                            inputValue={input}\r\n                            setInputValue={setInput}\r\n                            constraints={constraints}\r\n                            setConstraints={setConstraints}\r\n                            handleSend={handleSend}\r\n                            handleKeyPress={handleKeyPress}\r\n                            isGenerating={isGenerating}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            {/* 右侧设置边栏 - 只保留置信度颜色说明 */}\r\n            <div className=\"settings-sidebar\">\r\n                <ConfidenceIndicator />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}