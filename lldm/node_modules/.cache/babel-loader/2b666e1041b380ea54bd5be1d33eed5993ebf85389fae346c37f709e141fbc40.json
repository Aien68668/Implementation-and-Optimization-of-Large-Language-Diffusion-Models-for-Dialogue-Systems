{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{sendMessage,getStatus}from'./services/apiService';import ConfidenceIndicator from'./components/ConfidenceIndicator';import MessageList from'./components/MessageList';import SettingsPanel from'./components/SettingsPanel';import InputArea from'./components/InputArea';import Sidebar from'./components/Sidebar';import'./styles/Sidebar.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DiffusionModel=()=>{const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[isGenerating,setIsGenerating]=useState(false);const[showIndicator,setShowIndicator]=useState(false);const[indicatorPosition,setIndicatorPosition]=useState({x:20,y:100});const[chatHistory,setChatHistory]=useState([]);const[constraints,setConstraints]=useState('');const[serverError,setServerError]=useState(null);const[confidence,setConfidence]=useState(0);const[isWaitingForResponse,setIsWaitingForResponse]=useState(false);const[settings,setSettings]=useState({temperature:0.7,top_p:0.95,gen_length:50,num_beams:4});// --- Conversation Management State ---\nconst[conversations,setConversations]=useState([{id:0,name:'对话 1',history:[]}]);const[currentConversationId,setCurrentConversationId]=useState(0);const messagesEndRef=useRef(null);useEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});},[messages]);// --- Conversation Management Handlers ---\nconst handleNewConversation=()=>{// Save the current conversation's history first.\nconst updatedConversations=conversations.map(conv=>conv.id===currentConversationId?{...conv,history:messages}:conv);// Create the new conversation.\nconst newConversationId=Date.now();// Use timestamp for unique ID\nconst newConversation={id:newConversationId,name:`对话 ${updatedConversations.length+1}`,history:[]};setConversations([...updatedConversations,newConversation]);setCurrentConversationId(newConversationId);setMessages([]);// Clear messages for the new conversation\nsetInput('');setConfidence(0);setIsWaitingForResponse(false);};const handleSwitchConversation=id=>{if(id===currentConversationId)return;// Save the current conversation's history before switching.\nconst updatedConversations=conversations.map(conv=>conv.id===currentConversationId?{...conv,history:messages}:conv);const newCurrentConversation=updatedConversations.find(conv=>conv.id===id);if(newCurrentConversation){setConversations(updatedConversations);setCurrentConversationId(newCurrentConversation.id);setMessages(newCurrentConversation.history||[]);}};const handleDeleteConversation=id=>{const updatedConversations=conversations.filter(conv=>conv.id!==id);setConversations(updatedConversations);if(id===currentConversationId){if(updatedConversations.length>0){const firstConv=updatedConversations[0];setCurrentConversationId(firstConv.id);setMessages(firstConv.history||[]);}else{// If all conversations are deleted, create a new default one.\nconst newId=Date.now();const newConv={id:newId,name:'对话 1',history:[]};setConversations([newConv]);setCurrentConversationId(newId);setMessages([]);}}};// 生成完整的回复\nconst generateResponse=async userMessage=>{setIsGenerating(true);setServerError(null);try{// 添加用户消息\nconst userMsg={id:Date.now(),text:userMessage,sender:'user',timestamp:new Date(),isGenerated:true};setMessages(prev=>[...prev,userMsg]);// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:userMessage}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prev=>[...prev,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await sendMessage(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,200));}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nconst finalChatHistory=[...newChatHistory,{role:'assistant',content:response.response}];setChatHistory(finalChatHistory);updateCurrentConversation(updatedMessages,finalChatHistory);return updatedMessages;});}catch(error){console.error('生成响应时出错:',error);setServerError(error.message||'服务器连接失败');// 移除未完成的bot消息\nsetMessages(prev=>prev.filter(msg=>msg.id!==Date.now()+1));}finally{setIsGenerating(false);}};const handleSend=async()=>{if(input.trim()===''||isWaitingForResponse)return;const userMessage={text:input,sender:'user'};setMessages(prevMessages=>[...prevMessages,userMessage]);setInput('');setIsWaitingForResponse(true);try{// 调用后端API发送消息\nconst response=await sendMessage([{role:'user',content:input}]);if(response.error){throw new Error(response.error);}const botMessage={text:response.response,sender:'bot'};setMessages(prevMessages=>[...prevMessages,botMessage]);setConfidence(response.confidence||0);// 保存到当前对话\nconst updatedMessages=[...messages,userMessage,botMessage];updateCurrentConversation(updatedMessages);}catch(error){console.error('发送消息时出错:',error);const errorMessage={text:'发送消息时出错: '+(error.message||'未知错误'),sender:'bot'};setMessages(prevMessages=>[...prevMessages,errorMessage]);}finally{setIsWaitingForResponse(false);}};// 辅助函数：更新当前对话\nconst updateCurrentConversation=(updatedMessages,finalChatHistory)=>{// 更新当前对话的历史\nsetConversations(prev=>{return prev.map(conv=>{if(conv.id===currentConversationId){return{...conv,history:updatedMessages};}return conv;});});};// 解析可视化状态\nconst parseVisualizationState=step=>{if(!step||!Array.isArray(step.tokens)){return[];}return step.tokens.map((token,index)=>({id:index,char:token.text||'[MASK]',confidence:token.confidence||0,color:getColorFromConfidence(token.confidence||0),isGenerated:true}));};// 获取置信度颜色\nconst getColorFromConfidence=confidence=>{// 根据置信度返回颜色\nif(confidence<0.3)return'#ff4d4d';// 低置信度：红色\nif(confidence<0.7)return'#ffaa33';// 中置信度：橙色\nreturn'#44cc44';// 高置信度：绿色\n};// 处理按键按下事件\nconst handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSend();}};return/*#__PURE__*/_jsxs(\"div\",{className:\"diffusion-model-container\",children:[/*#__PURE__*/_jsx(Sidebar,{conversations:conversations,currentConversationId:currentConversationId,onNewConversation:handleNewConversation,onSwitchConversation:handleSwitchConversation,onDeleteConversation:handleDeleteConversation}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages}),/*#__PURE__*/_jsx(\"div\",{className:\"input-area-container\",children:/*#__PURE__*/_jsx(InputArea,{inputValue:input,setInputValue:setInput,constraints:constraints,setConstraints:setConstraints,handleSend:handleSend,handleKeyPress:handleKeyPress,isGenerating:isGenerating})}),/*#__PURE__*/_jsx(SettingsPanel,{settings:settings,setSettings:setSettings,isGenerating:isGenerating})]})]});};export default DiffusionModel;","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsx","_jsx","jsxs","_jsxs","DiffusionModel","messages","setMessages","input","setInput","isGenerating","setIsGenerating","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","generateResponse","userMessage","userMsg","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","_","index","char","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","step","parseVisualizationState","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","handleSend","trim","prevMessages","errorMessage","isArray","token","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","className","children","onNewConversation","onSwitchConversation","onDeleteConversation","inputValue","setInputValue"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { sendMessage, getStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport './styles/Sidebar.css';\r\n\r\nconst DiffusionModel = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [showIndicator, setShowIndicator] = useState(false);\r\n    const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [constraints, setConstraints] = useState('');\r\n    const [serverError, setServerError] = useState(null);\r\n    const [confidence, setConfidence] = useState(0);\r\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\r\n    const [settings, setSettings] = useState({\r\n        temperature: 0.7,\r\n        top_p: 0.95,\r\n        gen_length: 50,\r\n        num_beams: 4\r\n    });\r\n\r\n    // --- Conversation Management State ---\r\n    const [conversations, setConversations] = useState([\r\n        { id: 0, name: '对话 1', history: [] }\r\n    ]);\r\n    const [currentConversationId, setCurrentConversationId] = useState(0);\r\n\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // --- Conversation Management Handlers ---\r\n\r\n    const handleNewConversation = () => {\r\n        // Save the current conversation's history first.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        // Create the new conversation.\r\n        const newConversationId = Date.now(); // Use timestamp for unique ID\r\n        const newConversation = {\r\n            id: newConversationId,\r\n            name: `对话 ${updatedConversations.length + 1}`,\r\n            history: []\r\n        };\r\n\r\n        setConversations([...updatedConversations, newConversation]);\r\n        setCurrentConversationId(newConversationId);\r\n        setMessages([]); // Clear messages for the new conversation\r\n        setInput('');\r\n        setConfidence(0);\r\n        setIsWaitingForResponse(false);\r\n    };\r\n\r\n    const handleSwitchConversation = (id) => {\r\n        if (id === currentConversationId) return;\r\n\r\n        // Save the current conversation's history before switching.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\r\n\r\n        if (newCurrentConversation) {\r\n            setConversations(updatedConversations);\r\n            setCurrentConversationId(newCurrentConversation.id);\r\n            setMessages(newCurrentConversation.history || []);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConversation = (id) => {\r\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\r\n        setConversations(updatedConversations);\r\n\r\n        if (id === currentConversationId) {\r\n            if (updatedConversations.length > 0) {\r\n                const firstConv = updatedConversations[0];\r\n                setCurrentConversationId(firstConv.id);\r\n                setMessages(firstConv.history || []);\r\n            } else {\r\n                // If all conversations are deleted, create a new default one.\r\n                const newId = Date.now();\r\n                const newConv = { id: newId, name: '对话 1', history: [] };\r\n                setConversations([newConv]);\r\n                setCurrentConversationId(newId);\r\n                setMessages([]);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // 生成完整的回复\r\n    const generateResponse = async (userMessage) => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: userMessage,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userMessage }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await sendMessage(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 200));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                const finalChatHistory = [\r\n                    ...newChatHistory,\r\n                    { role: 'assistant', content: response.response }\r\n                ];\r\n                setChatHistory(finalChatHistory);\r\n                updateCurrentConversation(updatedMessages, finalChatHistory);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('生成响应时出错:', error);\r\n            setServerError(error.message || '服务器连接失败');\r\n            \r\n            // 移除未完成的bot消息\r\n            setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (input.trim() === '' || isWaitingForResponse) return;\r\n        \r\n        const userMessage = { text: input, sender: 'user' };\r\n        setMessages(prevMessages => [...prevMessages, userMessage]);\r\n        setInput('');\r\n        setIsWaitingForResponse(true);\r\n\r\n        try {\r\n            // 调用后端API发送消息\r\n            const response = await sendMessage([\r\n                { role: 'user', content: input }\r\n            ]);\r\n\r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            const botMessage = { text: response.response, sender: 'bot' };\r\n            setMessages(prevMessages => [...prevMessages, botMessage]);\r\n            setConfidence(response.confidence || 0);\r\n            \r\n            // 保存到当前对话\r\n            const updatedMessages = [...messages, userMessage, botMessage];\r\n            updateCurrentConversation(updatedMessages);\r\n        } catch (error) {\r\n            console.error('发送消息时出错:', error);\r\n            const errorMessage = { text: '发送消息时出错: ' + (error.message || '未知错误'), sender: 'bot' };\r\n            setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsWaitingForResponse(false);\r\n        }\r\n    };\r\n\r\n    // 辅助函数：更新当前对话\r\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\r\n        // 更新当前对话的历史\r\n        setConversations(prev => {\r\n            return prev.map(conv => {\r\n                if (conv.id === currentConversationId) {\r\n                    return { ...conv, history: updatedMessages };\r\n                }\r\n                return conv;\r\n            });\r\n        });\r\n    };\r\n\r\n    // 解析可视化状态\r\n    const parseVisualizationState = (step) => {\r\n        if (!step || !Array.isArray(step.tokens)) {\r\n            return [];\r\n        }\r\n\r\n        return step.tokens.map((token, index) => ({\r\n            id: index,\r\n            char: token.text || '[MASK]',\r\n            confidence: token.confidence || 0,\r\n            color: getColorFromConfidence(token.confidence || 0),\r\n            isGenerated: true\r\n        }));\r\n    };\r\n\r\n    // 获取置信度颜色\r\n    const getColorFromConfidence = (confidence) => {\r\n        // 根据置信度返回颜色\r\n        if (confidence < 0.3) return '#ff4d4d'; // 低置信度：红色\r\n        if (confidence < 0.7) return '#ffaa33'; // 中置信度：橙色\r\n        return '#44cc44';                       // 高置信度：绿色\r\n    };\r\n\r\n    // 处理按键按下事件\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSend();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"diffusion-model-container\">\r\n            <Sidebar\r\n                conversations={conversations}\r\n                currentConversationId={currentConversationId}\r\n                onNewConversation={handleNewConversation}\r\n                onSwitchConversation={handleSwitchConversation}\r\n                onDeleteConversation={handleDeleteConversation}\r\n            />\r\n            <div className=\"main-content\">\r\n                <MessageList messages={messages} />\r\n                <div className=\"input-area-container\">\r\n                    <InputArea \r\n                        inputValue={input}\r\n                        setInputValue={setInput}\r\n                        constraints={constraints}\r\n                        setConstraints={setConstraints}\r\n                        handleSend={handleSend}\r\n                        handleKeyPress={handleKeyPress}\r\n                        isGenerating={isGenerating}\r\n                    />\r\n                </div>\r\n                \r\n                <SettingsPanel \r\n                    settings={settings}\r\n                    setSettings={setSettings}\r\n                    isGenerating={isGenerating}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}