{"ast":null,"code":"import axios from'axios';// 后端API基础URL\nconst API_BASE_URL='http://localhost:9000';// 详细日志记录功能\nclass APILogger{constructor(){this.logs=[];this.maxLogs=1000;// 最大保存1000条日志\n}log(level,message){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const logEntry={timestamp:new Date().toISOString(),level,message,data:data?JSON.parse(JSON.stringify(data)):null,id:Date.now()+Math.random()};this.logs.push(logEntry);// 保持日志数量在限制内\nif(this.logs.length>this.maxLogs){this.logs=this.logs.slice(-this.maxLogs);}// 同时输出到控制台\nconst consoleMethod=level==='error'?'error':level==='warn'?'warn':'log';console[consoleMethod](`[API-${level.toUpperCase()}] ${message}`,data||'');// 发送到后端日志（如果需要）\nthis.sendToBackend(logEntry);}async sendToBackend(logEntry){// 可选：将前端日志发送到后端保存\ntry{// 这里可以实现发送到后端的逻辑\n// await api.post('/log', logEntry);\n}catch(error){// 静默失败，避免无限循环\n}}info(message,data){this.log('info',message,data);}warn(message,data){this.log('warn',message,data);}error(message,data){this.log('error',message,data);}debug(message,data){this.log('debug',message,data);}getLogs(){return this.logs;}clearLogs(){this.logs=[];}exportLogs(){const logData=JSON.stringify(this.logs,null,2);const blob=new Blob([logData],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`frontend-logs-${new Date().toISOString().replace(/[:.]/g,'-')}.json`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);}}// 创建全局日志记录器\nconst logger=new APILogger();window.apiLogger=logger;// 使其在控制台中可访问\n// 创建axios实例\nconst api=axios.create({baseURL:API_BASE_URL,timeout:60000,// 60秒超时\nheaders:{'Content-Type':'application/json'}});// 请求拦截器 - 详细记录\napi.interceptors.request.use(config=>{const requestId=`req_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;config.metadata={requestId,startTime:Date.now()};logger.info(`发送API请求 [${requestId}]`,{method:config.method.toUpperCase(),url:config.url,baseURL:config.baseURL,headers:config.headers,data:config.data,timeout:config.timeout});return config;},error=>{logger.error('请求配置错误',{message:error.message,stack:error.stack,config:error.config});return Promise.reject(error);});// 响应拦截器 - 详细记录\napi.interceptors.response.use(response=>{const{requestId,startTime}=response.config.metadata||{};const duration=Date.now()-startTime;logger.info(`收到API响应 [${requestId}]`,{status:response.status,statusText:response.statusText,headers:response.headers,data:response.data,duration:`${duration}ms`,url:response.config.url});return response;},error=>{var _error$config,_error$response,_error$response2,_error$response3,_error$config2;const{requestId,startTime}=((_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.metadata)||{};const duration=startTime?Date.now()-startTime:0;logger.error(`API请求失败 [${requestId}]`,{message:error.message,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,statusText:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.statusText,data:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data,duration:duration?`${duration}ms`:'unknown',url:(_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.url,stack:error.stack});return Promise.reject(error);});// 发送消息到后端API\nexport const sendMessage=async function(messages){let settings=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const startTime=Date.now();try{var _messages,_messages2,_messages2$content,_response$data$respon,_response$data$visual;logger.info('开始发送消息',{messageCount:messages.length,lastMessageRole:(_messages=messages[messages.length-1])===null||_messages===void 0?void 0:_messages.role,lastMessageLength:(_messages2=messages[messages.length-1])===null||_messages2===void 0?void 0:(_messages2$content=_messages2.content)===null||_messages2$content===void 0?void 0:_messages2$content.length,settings:settings});// 详细记录每条消息（调试模式）\nif(process.env.REACT_APP_LOG_LEVEL==='debug'){messages.forEach((msg,index)=>{var _msg$content;logger.debug(`消息 ${index+1}`,{role:msg.role,content:msg.content,contentLength:(_msg$content=msg.content)===null||_msg$content===void 0?void 0:_msg$content.length});});}const response=await api.post('/generate',{messages,settings});const duration=Date.now()-startTime;logger.info('消息发送成功',{responseLength:(_response$data$respon=response.data.response)===null||_response$data$respon===void 0?void 0:_response$data$respon.length,visualizationSteps:(_response$data$visual=response.data.visualization)===null||_response$data$visual===void 0?void 0:_response$data$visual.length,duration:`${duration}ms`,requestId:response.data.request_id});return response.data;}catch(error){var _error$response4,_error$response5;const duration=Date.now()-startTime;logger.error('发送消息失败',{errorMessage:error.message,errorType:error.name,responseStatus:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status,responseData:(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data,duration:`${duration}ms`,messageCount:messages.length,settings:settings});throw error;}};// generateText 函数 - 为了兼容性\nexport const generateText=sendMessage;// 检查服务器状态\nexport const getStatus=async()=>{try{logger.debug('检查服务器状态');const response=await api.get('/health');logger.info('服务器状态检查成功',{status:response.data.status,device:response.data.device,responseTime:response.headers['response-time']||'unknown'});return response.data;}catch(error){var _error$response6,_error$response7;logger.error('服务器状态检查失败',{errorMessage:error.message,errorType:error.name,responseStatus:(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status,responseData:(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data});throw error;}};// checkServerStatus 函数 - 为了兼容性\nexport const checkServerStatus=getStatus;// 导出日志记录器供其他组件使用\nexport{logger};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","APILogger","constructor","logs","maxLogs","log","level","message","data","arguments","length","undefined","logEntry","timestamp","Date","toISOString","JSON","parse","stringify","id","now","Math","random","push","slice","consoleMethod","console","toUpperCase","sendToBackend","error","info","warn","debug","getLogs","clearLogs","exportLogs","logData","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","replace","body","appendChild","click","removeChild","revokeObjectURL","logger","window","apiLogger","api","create","baseURL","timeout","headers","interceptors","request","use","config","requestId","toString","substr","metadata","startTime","method","stack","Promise","reject","response","duration","status","statusText","_error$config","_error$response","_error$response2","_error$response3","_error$config2","sendMessage","messages","settings","_messages","_messages2","_messages2$content","_response$data$respon","_response$data$visual","messageCount","lastMessageRole","role","lastMessageLength","content","process","env","REACT_APP_LOG_LEVEL","forEach","msg","index","_msg$content","contentLength","post","responseLength","visualizationSteps","visualization","request_id","_error$response4","_error$response5","errorMessage","errorType","name","responseStatus","responseData","generateText","getStatus","get","device","responseTime","_error$response6","_error$response7","checkServerStatus"],"sources":["/root/LLaDA-main/lldm/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// 后端API基础URL\nconst API_BASE_URL = 'http://localhost:9000';\n\n// 详细日志记录功能\nclass APILogger {\n  constructor() {\n    this.logs = [];\n    this.maxLogs = 1000; // 最大保存1000条日志\n  }\n\n  log(level, message, data = null) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      data: data ? JSON.parse(JSON.stringify(data)) : null,\n      id: Date.now() + Math.random()\n    };\n    \n    this.logs.push(logEntry);\n    \n    // 保持日志数量在限制内\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(-this.maxLogs);\n    }\n    \n    // 同时输出到控制台\n    const consoleMethod = level === 'error' ? 'error' : level === 'warn' ? 'warn' : 'log';\n    console[consoleMethod](`[API-${level.toUpperCase()}] ${message}`, data || '');\n    \n    // 发送到后端日志（如果需要）\n    this.sendToBackend(logEntry);\n  }\n\n  async sendToBackend(logEntry) {\n    // 可选：将前端日志发送到后端保存\n    try {\n      // 这里可以实现发送到后端的逻辑\n      // await api.post('/log', logEntry);\n    } catch (error) {\n      // 静默失败，避免无限循环\n    }\n  }\n\n  info(message, data) {\n    this.log('info', message, data);\n  }\n\n  warn(message, data) {\n    this.log('warn', message, data);\n  }\n\n  error(message, data) {\n    this.log('error', message, data);\n  }\n\n  debug(message, data) {\n    this.log('debug', message, data);\n  }\n\n  getLogs() {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  exportLogs() {\n    const logData = JSON.stringify(this.logs, null, 2);\n    const blob = new Blob([logData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `frontend-logs-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// 创建全局日志记录器\nconst logger = new APILogger();\nwindow.apiLogger = logger; // 使其在控制台中可访问\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000, // 60秒超时\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 详细记录\napi.interceptors.request.use(\n  (config) => {\n    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    config.metadata = { requestId, startTime: Date.now() };\n    \n    logger.info(`发送API请求 [${requestId}]`, {\n      method: config.method.toUpperCase(),\n      url: config.url,\n      baseURL: config.baseURL,\n      headers: config.headers,\n      data: config.data,\n      timeout: config.timeout\n    });\n    \n    return config;\n  },\n  (error) => {\n    logger.error('请求配置错误', {\n      message: error.message,\n      stack: error.stack,\n      config: error.config\n    });\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 详细记录\napi.interceptors.response.use(\n  (response) => {\n    const { requestId, startTime } = response.config.metadata || {};\n    const duration = Date.now() - startTime;\n    \n    logger.info(`收到API响应 [${requestId}]`, {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      data: response.data,\n      duration: `${duration}ms`,\n      url: response.config.url\n    });\n    \n    return response;\n  },\n  (error) => {\n    const { requestId, startTime } = error.config?.metadata || {};\n    const duration = startTime ? Date.now() - startTime : 0;\n    \n    logger.error(`API请求失败 [${requestId}]`, {\n      message: error.message,\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      data: error.response?.data,\n      duration: duration ? `${duration}ms` : 'unknown',\n      url: error.config?.url,\n      stack: error.stack\n    });\n    \n    return Promise.reject(error);\n  }\n);\n\n// 发送消息到后端API\nexport const sendMessage = async (messages, settings = {}) => {\n  const startTime = Date.now();\n  \n  try {\n    logger.info('开始发送消息', {\n      messageCount: messages.length,\n      lastMessageRole: messages[messages.length - 1]?.role,\n      lastMessageLength: messages[messages.length - 1]?.content?.length,\n      settings: settings\n    });\n    \n    // 详细记录每条消息（调试模式）\n    if (process.env.REACT_APP_LOG_LEVEL === 'debug') {\n      messages.forEach((msg, index) => {\n        logger.debug(`消息 ${index + 1}`, {\n          role: msg.role,\n          content: msg.content,\n          contentLength: msg.content?.length\n        });\n      });\n    }\n    \n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    \n    const duration = Date.now() - startTime;\n    \n    logger.info('消息发送成功', {\n      responseLength: response.data.response?.length,\n      visualizationSteps: response.data.visualization?.length,\n      duration: `${duration}ms`,\n      requestId: response.data.request_id\n    });\n    \n    return response.data;\n    \n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('发送消息失败', {\n      errorMessage: error.message,\n      errorType: error.name,\n      responseStatus: error.response?.status,\n      responseData: error.response?.data,\n      duration: `${duration}ms`,\n      messageCount: messages.length,\n      settings: settings\n    });\n    \n    throw error;\n  }\n};\n\n// generateText 函数 - 为了兼容性\nexport const generateText = sendMessage;\n\n// 检查服务器状态\nexport const getStatus = async () => {\n  try {\n    logger.debug('检查服务器状态');\n    \n    const response = await api.get('/health');\n    \n    logger.info('服务器状态检查成功', {\n      status: response.data.status,\n      device: response.data.device,\n      responseTime: response.headers['response-time'] || 'unknown'\n    });\n    \n    return response.data;\n    \n  } catch (error) {\n    logger.error('服务器状态检查失败', {\n      errorMessage: error.message,\n      errorType: error.name,\n      responseStatus: error.response?.status,\n      responseData: error.response?.data\n    });\n    \n    throw error;\n  }\n};\n\n// checkServerStatus 函数 - 为了兼容性\nexport const checkServerStatus = getStatus;\n\n// 导出日志记录器供其他组件使用\nexport { logger };\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}