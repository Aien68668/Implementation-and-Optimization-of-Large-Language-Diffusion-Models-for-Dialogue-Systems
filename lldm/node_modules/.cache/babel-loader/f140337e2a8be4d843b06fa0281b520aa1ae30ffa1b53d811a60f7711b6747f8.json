{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { generateText } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport { getConfidenceColor, parseVisualizationState, formatTime, generateInitialTokens } from './utils/helpers';\nimport './styles/DiffusionModel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"欢迎使用LLaDA扩散语言模型可视化系统！\",\n    sender: 'bot',\n    timestamp: new Date(),\n    isGenerated: true\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [showIndicator, setShowIndicator] = useState(false);\n  const [indicatorPosition, setIndicatorPosition] = useState({\n    x: 20,\n    y: 100\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // 生成设置\n  const [settings, setSettings] = useState({\n    gen_length: 64,\n    steps: 32,\n    temperature: 0.0,\n    cfg_scale: 0.0,\n    block_length: 32,\n    remasking: 'low_confidence',\n    constraints: ''\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // 生成完整的回复\n  const generateResponse = async userMessage => {\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 添加用户消息\n      const userMsg = {\n        id: Date.now(),\n        text: userMessage,\n        sender: 'user',\n        timestamp: new Date(),\n        isGenerated: true\n      };\n      setMessages(prev => [...prev, userMsg]);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userMessage\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await generateText(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => prev.map(msg => {\n        if (msg.id === botMessage.id) {\n          return {\n            ...msg,\n            text: response.response,\n            isGenerated: true\n          };\n        }\n        return msg;\n      }));\n    } catch (error) {\n      console.error('生成响应时出错:', error);\n      setServerError(error.message || '服务器连接失败');\n\n      // 移除未完成的bot消息\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleSend = () => {\n    if (inputValue.trim() === '' || isGenerating) return;\n    const message = inputValue.trim();\n    setInputValue('');\n    generateResponse(message);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"LLaDA\\u6269\\u6563\\u8BED\\u8A00\\u6A21\\u578B\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u89C2\\u5BDF\\u4ECE [MASK] \\u5230\\u6700\\u7EC8\\u6587\\u672C\\u7684\\u751F\\u6210\\u8FC7\\u7A0B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-indicator-btn\",\n        onClick: () => setShowIndicator(!showIndicator),\n        title: showIndicator ? \"隐藏置信度指示器\" : \"显示置信度指示器\",\n        children: showIndicator ? \"隐藏指示器\" : \"显示指示器\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfidenceIndicator, {\n      isVisible: showIndicator,\n      onClose: () => setShowIndicator(false),\n      position: indicatorPosition,\n      onPositionChange: setIndicatorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages,\n        isGenerating: isGenerating,\n        serverError: serverError,\n        getConfidenceColor: getConfidenceColor,\n        formatTime: formatTime,\n        messagesEndRef: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        setSettings: setSettings,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputArea, {\n        inputValue: inputValue,\n        setInputValue: setInputValue,\n        constraints: constraints,\n        setConstraints: setConstraints,\n        handleSend: handleSend,\n        handleKeyPress: handleKeyPress,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(DiffusionModel, \"W4I/7TZWSNx3o8D/XCPbAGBOqlg=\");\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","generateText","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","getConfidenceColor","parseVisualizationState","formatTime","generateInitialTokens","jsxDEV","_jsxDEV","DiffusionModel","_s","messages","setMessages","id","text","sender","timestamp","Date","isGenerated","inputValue","setInputValue","isGenerating","setIsGenerating","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","messagesEndRef","settings","setSettings","gen_length","steps","temperature","cfg_scale","block_length","remasking","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","generateResponse","userMessage","userMsg","now","prev","newChatHistory","role","content","initialTokens","Array","fill","map","_","index","char","confidence","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","length","step","msg","Promise","resolve","setTimeout","console","message","filter","handleSend","trim","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","isVisible","onClose","position","onPositionChange","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { generateText } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport { getConfidenceColor, parseVisualizationState, formatTime, generateInitialTokens } from './utils/helpers';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n  const [messages, setMessages] = useState([\r\n    { id: 1, text: \"欢迎使用LLaDA扩散语言模型可视化系统！\", sender: 'bot', timestamp: new Date(), isGenerated: true }\r\n  ]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [showIndicator, setShowIndicator] = useState(false);\r\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [constraints, setConstraints] = useState('');\r\n  const [serverError, setServerError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // 生成设置\r\n  const [settings, setSettings] = useState({\r\n    gen_length: 64,\r\n    steps: 32,\r\n    temperature: 0.0,\r\n    cfg_scale: 0.0,\r\n    block_length: 32,\r\n    remasking: 'low_confidence',\r\n    constraints: ''\r\n  });\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // 生成完整的回复\r\n  const generateResponse = async (userMessage) => {\r\n    setIsGenerating(true);\r\n    setServerError(null);\r\n    \r\n    try {\r\n      // 添加用户消息\r\n      const userMsg = {\r\n        id: Date.now(),\r\n        text: userMessage,\r\n        sender: 'user',\r\n        timestamp: new Date(),\r\n        isGenerated: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, userMsg]);\r\n\r\n      // 准备聊天历史\r\n      const newChatHistory = [\r\n        ...chatHistory,\r\n        { role: 'user', content: userMessage }\r\n      ];\r\n\r\n      // 创建初始的掩码消息\r\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n        id: index,\r\n        char: '[MASK]',\r\n        confidence: 0,\r\n        color: '#444444',\r\n        isGenerated: false\r\n      }));\r\n\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: '',\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        tokens: initialTokens,\r\n        isGenerated: false\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n\r\n      // 调用后端API生成响应\r\n      const requestSettings = {\r\n        ...settings,\r\n        constraints: constraints\r\n      };\r\n\r\n      const response = await generateText(newChatHistory, requestSettings);\r\n      \r\n      if (response.error) {\r\n        throw new Error(response.error);\r\n      }\r\n\r\n      // 更新聊天历史\r\n      setChatHistory([\r\n        ...newChatHistory,\r\n        { role: 'assistant', content: response.response }\r\n      ]);\r\n\r\n      // 逐步显示可视化过程\r\n      const visualizationSteps = response.visualization || [];\r\n      \r\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n        const step = visualizationSteps[stepIndex];\r\n        const tokens = parseVisualizationState(step);\r\n        \r\n        // 更新消息中的tokens\r\n        setMessages(prev => prev.map(msg => {\r\n          if (msg.id === botMessage.id) {\r\n            return { ...msg, tokens };\r\n          }\r\n          return msg;\r\n        }));\r\n        \r\n        // 如果不是最后一步，等待一段时间再显示下一步\r\n        if (stepIndex < visualizationSteps.length - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, 200));\r\n        }\r\n      }\r\n\r\n      // 生成完成，设置最终文本\r\n      setMessages(prev => prev.map(msg => {\r\n        if (msg.id === botMessage.id) {\r\n          return { \r\n            ...msg, \r\n            text: response.response,\r\n            isGenerated: true \r\n          };\r\n        }\r\n        return msg;\r\n      }));\r\n\r\n    } catch (error) {\r\n      console.error('生成响应时出错:', error);\r\n      setServerError(error.message || '服务器连接失败');\r\n      \r\n      // 移除未完成的bot消息\r\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (inputValue.trim() === '' || isGenerating) return;\r\n    \r\n    const message = inputValue.trim();\r\n    setInputValue('');\r\n    generateResponse(message);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"diffusion-model\">\r\n      <header className=\"app-header\">\r\n        <h1>LLaDA扩散语言模型可视化系统</h1>\r\n        <p>观察从 [MASK] 到最终文本的生成过程</p>\r\n        <button \r\n          className=\"toggle-indicator-btn\"\r\n          onClick={() => setShowIndicator(!showIndicator)}\r\n          title={showIndicator ? \"隐藏置信度指示器\" : \"显示置信度指示器\"}\r\n        >\r\n          {showIndicator ? \"隐藏指示器\" : \"显示指示器\"}\r\n        </button>\r\n      </header>\r\n      \r\n      <ConfidenceIndicator \r\n        isVisible={showIndicator}\r\n        onClose={() => setShowIndicator(false)}\r\n        position={indicatorPosition}\r\n        onPositionChange={setIndicatorPosition}\r\n      />\r\n      \r\n      <div className=\"chat-container\">\r\n        <MessageList \r\n          messages={messages}\r\n          isGenerating={isGenerating}\r\n          serverError={serverError}\r\n          getConfidenceColor={getConfidenceColor}\r\n          formatTime={formatTime}\r\n          messagesEndRef={messagesEndRef}\r\n        />\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          setSettings={setSettings}\r\n          isGenerating={isGenerating}\r\n        />\r\n        \r\n        <InputArea \r\n          inputValue={inputValue}\r\n          setInputValue={setInputValue}\r\n          constraints={constraints}\r\n          setConstraints={setConstraints}\r\n          handleSend={handleSend}\r\n          handleKeyPress={handleKeyPress}\r\n          isGenerating={isGenerating}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}