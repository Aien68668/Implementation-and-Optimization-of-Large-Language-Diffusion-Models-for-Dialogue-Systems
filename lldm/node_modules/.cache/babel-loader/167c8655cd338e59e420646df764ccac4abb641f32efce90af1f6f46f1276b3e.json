{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendMessage, getStatus } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport './styles/Sidebar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [showIndicator, setShowIndicator] = useState(false);\n  const [indicatorPosition, setIndicatorPosition] = useState({\n    x: 20,\n    y: 100\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const [confidence, setConfidence] = useState(0);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [settings, setSettings] = useState({\n    temperature: 0.7,\n    top_p: 0.95,\n    gen_length: 50,\n    num_beams: 4\n  });\n\n  // --- Conversation Management State ---\n  const [conversations, setConversations] = useState([{\n    id: 0,\n    name: '对话 1',\n    history: []\n  }]);\n  const [currentConversationId, setCurrentConversationId] = useState(0);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // --- Conversation Management Handlers ---\n\n  const handleNewConversation = () => {\n    // Save the current conversation's history first.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n\n    // Create the new conversation.\n    const newConversationId = Date.now(); // Use timestamp for unique ID\n    const newConversation = {\n      id: newConversationId,\n      name: `对话 ${updatedConversations.length + 1}`,\n      history: []\n    };\n    setConversations([...updatedConversations, newConversation]);\n    setCurrentConversationId(newConversationId);\n    setMessages([]); // Clear messages for the new conversation\n    setInput('');\n    setConfidence(0);\n    setIsWaitingForResponse(false);\n  };\n  const handleSwitchConversation = id => {\n    if (id === currentConversationId) return;\n\n    // Save the current conversation's history before switching.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n    const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\n    if (newCurrentConversation) {\n      setConversations(updatedConversations);\n      setCurrentConversationId(newCurrentConversation.id);\n      setMessages(newCurrentConversation.history || []);\n    }\n  };\n  const handleDeleteConversation = id => {\n    const updatedConversations = conversations.filter(conv => conv.id !== id);\n    setConversations(updatedConversations);\n    if (id === currentConversationId) {\n      if (updatedConversations.length > 0) {\n        const firstConv = updatedConversations[0];\n        setCurrentConversationId(firstConv.id);\n        setMessages(firstConv.history || []);\n      } else {\n        // If all conversations are deleted, create a new default one.\n        const newId = Date.now();\n        const newConv = {\n          id: newId,\n          name: '对话 1',\n          history: []\n        };\n        setConversations([newConv]);\n        setCurrentConversationId(newId);\n        setMessages([]);\n      }\n    }\n  };\n\n  // 生成完整的回复\n  const generateResponse = async userMessage => {\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 添加用户消息\n      const userMsg = {\n        id: Date.now(),\n        text: userMessage,\n        sender: 'user',\n        timestamp: new Date(),\n        isGenerated: true\n      };\n      setMessages(prev => [...prev, userMsg]);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userMessage\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await generateText(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        const finalChatHistory = [...newChatHistory, {\n          role: 'assistant',\n          content: response.response\n        }];\n        setChatHistory(finalChatHistory);\n        updateCurrentConversation(updatedMessages, finalChatHistory);\n        return updatedMessages;\n      });\n    } catch (error) {\n      console.error('生成响应时出错:', error);\n      setServerError(error.message || '服务器连接失败');\n\n      // 移除未完成的bot消息\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleSend = async () => {\n    if (input.trim() === '' || isWaitingForResponse) return;\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput('');\n    setIsWaitingForResponse(true);\n    try {\n      // 调用后端API发送消息\n      const response = await generateText(input);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n      const botMessage = {\n        text: response.response,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setConfidence(response.confidence);\n    } catch (error) {\n      console.error('发送消息时出错:', error);\n      const errorMessage = {\n        text: '发送消息时出错: ' + (error.message || '未知错误'),\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsWaitingForResponse(false);\n    }\n  };\n\n  // 辅助函数：更新当前对话\n  const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\n    // 更新当前对话的历史\n    setConversations(prev => {\n      return prev.map(conv => {\n        if (conv.id === currentConversationId) {\n          return {\n            ...conv,\n            history: updatedMessages\n          };\n        }\n        return conv;\n      });\n    });\n  };\n\n  // 解析可视化状态\n  const parseVisualizationState = step => {\n    if (!step || !Array.isArray(step.tokens)) {\n      return [];\n    }\n    return step.tokens.map((token, index) => ({\n      id: index,\n      char: token.text || '[MASK]',\n      confidence: token.confidence || 0,\n      color: getColorFromConfidence(token.confidence || 0),\n      isGenerated: true\n    }));\n  };\n\n  // 获取置信度颜色\n  const getColorFromConfidence = confidence => {\n    // 根据置信度返回颜色\n    if (confidence < 0.3) return '#ff4d4d'; // 低置信度：红色\n    if (confidence < 0.7) return '#ffaa33'; // 中置信度：橙色\n    return '#44cc44'; // 高置信度：绿色\n  };\n\n  // 处理按键按下事件\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      currentConversationId: currentConversationId,\n      onNewConversation: handleNewConversation,\n      onSwitchConversation: handleSwitchConversation,\n      onDeleteConversation: handleDeleteConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area-container\",\n        children: /*#__PURE__*/_jsxDEV(InputArea, {\n          inputValue: input,\n          setInputValue: setInput,\n          constraints: constraints,\n          setConstraints: setConstraints,\n          handleSend: handleSend,\n          handleKeyPress: handleKeyPress,\n          isGenerating: isGenerating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        setSettings: setSettings,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 9\n  }, this);\n};\n_s(DiffusionModel, \"R5Aypj801UKbiEOfX/8DNOgSzOM=\");\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsxDEV","_jsxDEV","DiffusionModel","_s","messages","setMessages","input","setInput","isGenerating","setIsGenerating","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","generateResponse","userMessage","userMsg","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","_","index","char","color","botMessage","tokens","requestSettings","response","generateText","error","Error","visualizationSteps","visualization","stepIndex","step","parseVisualizationState","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","handleSend","trim","prevMessages","errorMessage","isArray","token","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","className","children","onNewConversation","onSwitchConversation","onDeleteConversation","fileName","_jsxFileName","lineNumber","columnNumber","inputValue","setInputValue","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { sendMessage, getStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport './styles/Sidebar.css';\r\n\r\nconst DiffusionModel = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [showIndicator, setShowIndicator] = useState(false);\r\n    const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [constraints, setConstraints] = useState('');\r\n    const [serverError, setServerError] = useState(null);\r\n    const [confidence, setConfidence] = useState(0);\r\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\r\n    const [settings, setSettings] = useState({\r\n        temperature: 0.7,\r\n        top_p: 0.95,\r\n        gen_length: 50,\r\n        num_beams: 4\r\n    });\r\n\r\n    // --- Conversation Management State ---\r\n    const [conversations, setConversations] = useState([\r\n        { id: 0, name: '对话 1', history: [] }\r\n    ]);\r\n    const [currentConversationId, setCurrentConversationId] = useState(0);\r\n\r\n\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // --- Conversation Management Handlers ---\r\n\r\n    const handleNewConversation = () => {\r\n        // Save the current conversation's history first.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        // Create the new conversation.\r\n        const newConversationId = Date.now(); // Use timestamp for unique ID\r\n        const newConversation = {\r\n            id: newConversationId,\r\n            name: `对话 ${updatedConversations.length + 1}`,\r\n            history: []\r\n        };\r\n\r\n        setConversations([...updatedConversations, newConversation]);\r\n        setCurrentConversationId(newConversationId);\r\n        setMessages([]); // Clear messages for the new conversation\r\n        setInput('');\r\n        setConfidence(0);\r\n        setIsWaitingForResponse(false);\r\n    };\r\n\r\n    const handleSwitchConversation = (id) => {\r\n        if (id === currentConversationId) return;\r\n\r\n        // Save the current conversation's history before switching.\r\n        const updatedConversations = conversations.map(conv =>\r\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\r\n        );\r\n\r\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\r\n\r\n        if (newCurrentConversation) {\r\n            setConversations(updatedConversations);\r\n            setCurrentConversationId(newCurrentConversation.id);\r\n            setMessages(newCurrentConversation.history || []);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConversation = (id) => {\r\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\r\n        setConversations(updatedConversations);\r\n\r\n        if (id === currentConversationId) {\r\n            if (updatedConversations.length > 0) {\r\n                const firstConv = updatedConversations[0];\r\n                setCurrentConversationId(firstConv.id);\r\n                setMessages(firstConv.history || []);\r\n            } else {\r\n                // If all conversations are deleted, create a new default one.\r\n                const newId = Date.now();\r\n                const newConv = { id: newId, name: '对话 1', history: [] };\r\n                setConversations([newConv]);\r\n                setCurrentConversationId(newId);\r\n                setMessages([]);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // 生成完整的回复\r\n    const generateResponse = async (userMessage) => {\r\n        setIsGenerating(true);\r\n        setServerError(null);\r\n        \r\n        try {\r\n            // 添加用户消息\r\n            const userMsg = {\r\n                id: Date.now(),\r\n                text: userMessage,\r\n                sender: 'user',\r\n                timestamp: new Date(),\r\n                isGenerated: true\r\n            };\r\n            \r\n            setMessages(prev => [...prev, userMsg]);\r\n\r\n            // 准备聊天历史\r\n            const newChatHistory = [\r\n                ...chatHistory,\r\n                { role: 'user', content: userMessage }\r\n            ];\r\n\r\n            // 创建初始的掩码消息\r\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n                id: index,\r\n                char: '[MASK]',\r\n                confidence: 0,\r\n                color: '#444444',\r\n                isGenerated: false\r\n            }));\r\n\r\n            const botMessage = {\r\n                id: Date.now() + 1,\r\n                text: '',\r\n                sender: 'bot',\r\n                timestamp: new Date(),\r\n                tokens: initialTokens,\r\n                isGenerated: false\r\n            };\r\n\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n            // 调用后端API生成响应\r\n            const requestSettings = {\r\n                ...settings,\r\n                constraints: constraints\r\n            };\r\n\r\n            const response = await generateText(newChatHistory, requestSettings);\r\n            \r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            // 更新聊天历史\r\n            setChatHistory([\r\n                ...newChatHistory,\r\n                { role: 'assistant', content: response.response }\r\n            ]);\r\n\r\n            // 逐步显示可视化过程\r\n            const visualizationSteps = response.visualization || [];\r\n            \r\n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n                const step = visualizationSteps[stepIndex];\r\n                const tokens = parseVisualizationState(step);\r\n                \r\n                // 更新消息中的tokens\r\n                setMessages(prev => prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { ...msg, tokens };\r\n                    }\r\n                    return msg;\r\n                }));\r\n                \r\n                // 如果不是最后一步，等待一段时间再显示下一步\r\n                if (stepIndex < visualizationSteps.length - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, 200));\r\n                }\r\n            }\r\n\r\n            // 生成完成，设置最终文本\r\n            setMessages(prev => {\r\n                const updatedMessages = prev.map(msg => {\r\n                    if (msg.id === botMessage.id) {\r\n                        return { \r\n                            ...msg, \r\n                            text: response.response,\r\n                            isGenerated: true \r\n                        };\r\n                    }\r\n                    return msg;\r\n                });\r\n                \r\n                // 更新当前对话\r\n                const finalChatHistory = [\r\n                    ...newChatHistory,\r\n                    { role: 'assistant', content: response.response }\r\n                ];\r\n                setChatHistory(finalChatHistory);\r\n                updateCurrentConversation(updatedMessages, finalChatHistory);\r\n                \r\n                return updatedMessages;\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('生成响应时出错:', error);\r\n            setServerError(error.message || '服务器连接失败');\r\n            \r\n            // 移除未完成的bot消息\r\n            setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n        } finally {\r\n            setIsGenerating(false);\r\n        }\r\n    };\r\n\r\n    const handleSend = async () => {\r\n        if (input.trim() === '' || isWaitingForResponse) return;\r\n        \r\n        const userMessage = { text: input, sender: 'user' };\r\n        setMessages(prevMessages => [...prevMessages, userMessage]);\r\n        setInput('');\r\n        setIsWaitingForResponse(true);\r\n\r\n        try {\r\n            // 调用后端API发送消息\r\n            const response = await generateText(input);\r\n\r\n            if (response.error) {\r\n                throw new Error(response.error);\r\n            }\r\n\r\n            const botMessage = { text: response.response, sender: 'bot' };\r\n            setMessages(prevMessages => [...prevMessages, botMessage]);\r\n            setConfidence(response.confidence);\r\n        } catch (error) {\r\n            console.error('发送消息时出错:', error);\r\n            const errorMessage = { text: '发送消息时出错: ' + (error.message || '未知错误'), sender: 'bot' };\r\n            setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsWaitingForResponse(false);\r\n        }\r\n    };\r\n\r\n    // 辅助函数：更新当前对话\r\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\r\n        // 更新当前对话的历史\r\n        setConversations(prev => {\r\n            return prev.map(conv => {\r\n                if (conv.id === currentConversationId) {\r\n                    return { ...conv, history: updatedMessages };\r\n                }\r\n                return conv;\r\n            });\r\n        });\r\n    };\r\n\r\n    // 解析可视化状态\r\n    const parseVisualizationState = (step) => {\r\n        if (!step || !Array.isArray(step.tokens)) {\r\n            return [];\r\n        }\r\n\r\n        return step.tokens.map((token, index) => ({\r\n            id: index,\r\n            char: token.text || '[MASK]',\r\n            confidence: token.confidence || 0,\r\n            color: getColorFromConfidence(token.confidence || 0),\r\n            isGenerated: true\r\n        }));\r\n    };\r\n\r\n    // 获取置信度颜色\r\n    const getColorFromConfidence = (confidence) => {\r\n        // 根据置信度返回颜色\r\n        if (confidence < 0.3) return '#ff4d4d'; // 低置信度：红色\r\n        if (confidence < 0.7) return '#ffaa33'; // 中置信度：橙色\r\n        return '#44cc44';                       // 高置信度：绿色\r\n    };\r\n\r\n    // 处理按键按下事件\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSend();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"diffusion-model-container\">\r\n            <Sidebar\r\n                conversations={conversations}\r\n                currentConversationId={currentConversationId}\r\n                onNewConversation={handleNewConversation}\r\n                onSwitchConversation={handleSwitchConversation}\r\n                onDeleteConversation={handleDeleteConversation}\r\n            />\r\n            <div className=\"main-content\">\r\n                <MessageList messages={messages} />\r\n                <div className=\"input-area-container\">\r\n                    <InputArea \r\n                        inputValue={input}\r\n                        setInputValue={setInput}\r\n                        constraints={constraints}\r\n                        setConstraints={setConstraints}\r\n                        handleSend={handleSend}\r\n                        handleKeyPress={handleKeyPress}\r\n                        isGenerating={isGenerating}\r\n                    />\r\n                </div>\r\n                \r\n                <SettingsPanel \r\n                    settings={settings}\r\n                    setSettings={setSettings}\r\n                    isGenerating={isGenerating}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}