{"ast":null,"code":"// 根据置信度获取颜色\nexport const getConfidenceColor = confidence => {\n  if (confidence === 0) return '#666'; // 灰色表示MASK\n  if (confidence < 0.3) return '#FF6666'; // 红色表示低置信度\n  if (confidence < 0.7) return '#FFAA33'; // 橙色表示中置信度\n  return '#66CC66'; // 绿色表示高置信度\n};\n\n// 将可视化状态转换为token数组\nexport const parseVisualizationState = visualizationState => {\n  return visualizationState.map((item, index) => ({\n    id: index,\n    char: item[0],\n    confidence: item[0] === '[MASK]' ? 0 : 1.0,\n    color: item[1],\n    isGenerated: item[0] !== '[MASK]'\n  }));\n};\n\n// 格式化时间\nexport const formatTime = timestamp => {\n  return timestamp.toLocaleTimeString('zh-CN', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n// 生成初始tokens\nexport const generateInitialTokens = length => {\n  return Array(length).fill(null).map((_, index) => ({\n    id: index,\n    char: '[MASK]',\n    confidence: 0,\n    color: '#444444',\n    isGenerated: false\n  }));\n};","map":{"version":3,"names":["getConfidenceColor","confidence","parseVisualizationState","visualizationState","map","item","index","id","char","color","isGenerated","formatTime","timestamp","toLocaleTimeString","hour","minute","generateInitialTokens","length","Array","fill","_"],"sources":["/root/LLaDA-main/lldm/src/utils/helpers.js"],"sourcesContent":["// 根据置信度获取颜色\nexport const getConfidenceColor = (confidence) => {\n  if (confidence === 0) return '#666'; // 灰色表示MASK\n  if (confidence < 0.3) return '#FF6666'; // 红色表示低置信度\n  if (confidence < 0.7) return '#FFAA33'; // 橙色表示中置信度\n  return '#66CC66'; // 绿色表示高置信度\n};\n\n// 将可视化状态转换为token数组\nexport const parseVisualizationState = (visualizationState) => {\n  return visualizationState.map((item, index) => ({\n    id: index,\n    char: item[0],\n    confidence: item[0] === '[MASK]' ? 0 : 1.0,\n    color: item[1],\n    isGenerated: item[0] !== '[MASK]'\n  }));\n};\n\n// 格式化时间\nexport const formatTime = (timestamp) => {\n  return timestamp.toLocaleTimeString('zh-CN', { \n    hour: '2-digit', \n    minute: '2-digit' \n  });\n};\n\n// 生成初始tokens\nexport const generateInitialTokens = (length) => {\n  return Array(length).fill(null).map((_, index) => ({\n    id: index,\n    char: '[MASK]',\n    confidence: 0,\n    color: '#444444',\n    isGenerated: false\n  }));\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,UAAU,IAAK;EAChD,IAAIA,UAAU,KAAK,CAAC,EAAE,OAAO,MAAM,CAAC,CAAC;EACrC,IAAIA,UAAU,GAAG,GAAG,EAAE,OAAO,SAAS,CAAC,CAAC;EACxC,IAAIA,UAAU,GAAG,GAAG,EAAE,OAAO,SAAS,CAAC,CAAC;EACxC,OAAO,SAAS,CAAC,CAAC;AACpB,CAAC;;AAED;AACA,OAAO,MAAMC,uBAAuB,GAAIC,kBAAkB,IAAK;EAC7D,OAAOA,kBAAkB,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;IAC9CC,EAAE,EAAED,KAAK;IACTE,IAAI,EAAEH,IAAI,CAAC,CAAC,CAAC;IACbJ,UAAU,EAAEI,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,GAAG;IAC1CI,KAAK,EAAEJ,IAAI,CAAC,CAAC,CAAC;IACdK,WAAW,EAAEL,IAAI,CAAC,CAAC,CAAC,KAAK;EAC3B,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAIC,SAAS,IAAK;EACvC,OAAOA,SAAS,CAACC,kBAAkB,CAAC,OAAO,EAAE;IAC3CC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAIC,MAAM,IAAK;EAC/C,OAAOC,KAAK,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAACf,GAAG,CAAC,CAACgB,CAAC,EAAEd,KAAK,MAAM;IACjDC,EAAE,EAAED,KAAK;IACTE,IAAI,EAAE,QAAQ;IACdP,UAAU,EAAE,CAAC;IACbQ,KAAK,EAAE,SAAS;IAChBC,WAAW,EAAE;EACf,CAAC,CAAC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}