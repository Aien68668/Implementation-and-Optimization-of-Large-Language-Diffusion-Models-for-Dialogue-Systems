{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MessageList=_ref=>{let{messages,isGenerating,serverError,getConfidenceColor,formatTime,messagesEndRef}=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[messages.map(message=>/*#__PURE__*/_jsx(\"div\",{className:`message ${message.sender}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.sender==='bot'&&message.tokens?// 优先显示token可视化，除非消息为空\nmessage.text&&message.text.trim()===''?// 消息为空时，删除token格子，显示空文本\nmessage.text:/*#__PURE__*/// 有token数据时，显示可视化样式\n_jsx(\"div\",{className:\"token-container\",children:message.tokens.filter((token,index)=>{// 简单过滤：过滤掉空的已生成token（但保留MASK）\nconst isMask=token.char==='[MASK]';const isEmpty=!token.char||token.char.trim()==='';// 如果是已生成的空token（非MASK），直接不显示\nif(token.isGenerated&&isEmpty&&!isMask){return false;}return true;}).map((token,filteredIndex)=>{const isMask=token.char==='[MASK]';// 根据置信度确定CSS类名\nlet confidenceClass='';if(isMask){confidenceClass='mask-token';}else{// 根据置信度分配类名\nif(token.confidence<0.3){confidenceClass='confidence-low';}else if(token.confidence<0.7){confidenceClass='confidence-medium';}else{confidenceClass='confidence-high';}// 如果是之前生成的token（颜色为蓝色）\nif(token.color==='#6699CC'){confidenceClass='confidence-previous';}}return/*#__PURE__*/_jsx(\"span\",{className:`token ${confidenceClass} ${token.isGenerated&&!isMask?'just-generated':''} ${!token.isGenerated?'generating':''} ${message.isGenerated?'final-generated':''}`,style:{animationDelay:token.isGenerated&&!isMask?`${filteredIndex*0.08}s`:'0s'},children:token.char},`${message.id}_${token.id||filteredIndex}_${token.char}`);})}):// 非bot消息或没有token数据时显示普通文本\nmessage.text}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:formatTime(message.timestamp)})]})},message.id)),isGenerating&&/*#__PURE__*/_jsxs(\"div\",{className:\"generating-indicator\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"generating-dots\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u6B63\\u5728\\u751F\\u6210\\u4E2D...\"})]}),serverError&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-content\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u9519\\u8BEF\\uFF1A\"}),\" \",serverError]})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]});};export default MessageList;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","MessageList","_ref","messages","isGenerating","serverError","getConfidenceColor","formatTime","messagesEndRef","className","children","map","message","sender","tokens","text","trim","filter","token","index","isMask","char","isEmpty","isGenerated","filteredIndex","confidenceClass","confidence","color","style","animationDelay","id","timestamp","ref"],"sources":["/root/LLaDA-main/lldm/src/components/MessageList.js"],"sourcesContent":["import React from 'react';\n\nconst MessageList = ({ \n  messages, \n  isGenerating, \n  serverError, \n  getConfidenceColor, \n  formatTime, \n  messagesEndRef \n}) => {\n  \n  return (\n    <div className=\"messages-container\">\n      {messages.map((message) => (\n        <div key={message.id} className={`message ${message.sender}`}>\n          <div className=\"message-content\">\n            <div className=\"message-text\">\n              {message.sender === 'bot' && message.tokens ? (\n                // 优先显示token可视化，除非消息为空\n                message.text && message.text.trim() === '' ? (\n                  // 消息为空时，删除token格子，显示空文本\n                  message.text\n                ) : (\n                  // 有token数据时，显示可视化样式\n                  <div className=\"token-container\">\n                    {message.tokens\n                      .filter((token, index) => {\n                        // 简单过滤：过滤掉空的已生成token（但保留MASK）\n                        const isMask = token.char === '[MASK]';\n                        const isEmpty = !token.char || token.char.trim() === '';\n                        \n                        // 如果是已生成的空token（非MASK），直接不显示\n                        if (token.isGenerated && isEmpty && !isMask) {\n                          return false;\n                        }\n                        \n                        return true;\n                      })\n                      .map((token, filteredIndex) => {\n                        const isMask = token.char === '[MASK]';\n                        \n                        // 根据置信度确定CSS类名\n                        let confidenceClass = '';\n                        if (isMask) {\n                          confidenceClass = 'mask-token';\n                        } else {\n                          // 根据置信度分配类名\n                          if (token.confidence < 0.3) {\n                            confidenceClass = 'confidence-low';\n                          } else if (token.confidence < 0.7) {\n                            confidenceClass = 'confidence-medium';\n                          } else {\n                            confidenceClass = 'confidence-high';\n                          }\n                          \n                          // 如果是之前生成的token（颜色为蓝色）\n                          if (token.color === '#6699CC') {\n                            confidenceClass = 'confidence-previous';\n                          }\n                        }\n                        \n                        return (\n                          <span\n                            key={`${message.id}_${token.id || filteredIndex}_${token.char}`}\n                            className={`token ${confidenceClass} ${\n                              token.isGenerated && !isMask ? 'just-generated' : ''\n                            } ${\n                              !token.isGenerated ? 'generating' : ''\n                            } ${\n                              message.isGenerated ? 'final-generated' : ''\n                            }`}\n                            style={{ \n                              animationDelay: token.isGenerated && !isMask ? `${filteredIndex * 0.08}s` : '0s'\n                            }}\n                          >\n                            {token.char}\n                          </span>\n                        );\n                      })}\n                  </div>\n                )\n              ) : (\n                // 非bot消息或没有token数据时显示普通文本\n                message.text\n              )}\n            </div>\n            <div className=\"message-time\">{formatTime(message.timestamp)}</div>\n          </div>\n        </div>\n      ))}\n      \n      {isGenerating && (\n        <div className=\"generating-indicator\">\n          <div className=\"generating-dots\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n          <span>正在生成中...</span>\n        </div>\n      )}\n      \n      {serverError && (\n        <div className=\"error-message\">\n          <div className=\"error-content\">\n            <strong>错误：</strong> {serverError}\n          </div>\n        </div>\n      )}\n      \n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nexport default MessageList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}