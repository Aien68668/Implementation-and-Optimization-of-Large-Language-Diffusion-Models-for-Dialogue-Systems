{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport { useTextGeneration, useMessages, useSettings } from './hooks';\nimport { MODEL_CONFIG, UI_CONFIG } from './constants';\nimport { getConfidenceColor, parseVisualizationState, formatTime } from './utils/helpers';\nimport './styles/DiffusionModel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  // 使用自定义hooks\n  const {\n    isGenerating,\n    error: serverError,\n    generateText\n  } = useTextGeneration();\n  const {\n    messages,\n    messagesEndRef,\n    addMessage,\n    updateMessage\n  } = useMessages([{\n    id: 1,\n    text: \"欢迎使用LLaDA扩散语言模型可视化系统！\",\n    sender: UI_CONFIG.MESSAGE_TYPES.BOT,\n    timestamp: new Date(),\n    isGenerated: true\n  }]);\n  const {\n    settings,\n    updateSetting\n  } = useSettings(MODEL_CONFIG.DEFAULT_SETTINGS);\n\n  // 本地状态\n  const [inputValue, setInputValue] = useState('');\n  const [showIndicator, setShowIndicator] = useState(false);\n  const [indicatorPosition, setIndicatorPosition] = useState({\n    x: 20,\n    y: 100\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n\n  // 生成完整的回复\n  const generateResponse = async userMessage => {\n    try {\n      // 添加用户消息\n      const userMsg = {\n        text: userMessage,\n        sender: UI_CONFIG.MESSAGE_TYPES.USER,\n        isGenerated: true\n      };\n      const userMsgWithId = addMessage(userMsg);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userMessage\n      }];\n\n      // 创建初始的机器人消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: MODEL_CONFIG.CONFIDENCE_COLORS.MASK,\n        isGenerated: false\n      }));\n      const botMsg = {\n        text: '',\n        sender: UI_CONFIG.MESSAGE_TYPES.BOT,\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      const botMsgWithId = addMessage(botMsg);\n\n      // 调用生成API\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await generateText(newChatHistory, requestSettings,\n      // 进度回调\n      async (step, stepIndex, progress) => {\n        const tokens = parseVisualizationState(step);\n        updateMessage(botMsgWithId.id, {\n          tokens\n        });\n      });\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 设置最终文本\n      updateMessage(botMsgWithId.id, {\n        text: response.response,\n        isGenerated: true\n      });\n    } catch (error) {\n      console.error('生成响应时出错:', error);\n      // 错误处理已由hook处理\n    }\n  };\n  const handleSend = () => {\n    if (inputValue.trim() === '' || isGenerating) return;\n    const message = inputValue.trim();\n    setInputValue('');\n    generateResponse(message);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"LLaDA\\u6269\\u6563\\u8BED\\u8A00\\u6A21\\u578B\\u53EF\\u89C6\\u5316\\u7CFB\\u7EDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u89C2\\u5BDF\\u4ECE [MASK] \\u5230\\u6700\\u7EC8\\u6587\\u672C\\u7684\\u751F\\u6210\\u8FC7\\u7A0B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-indicator-btn\",\n        onClick: () => setShowIndicator(!showIndicator),\n        title: showIndicator ? \"隐藏置信度指示器\" : \"显示置信度指示器\",\n        children: showIndicator ? \"隐藏指示器\" : \"显示指示器\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfidenceIndicator, {\n      isVisible: showIndicator,\n      onClose: () => setShowIndicator(false),\n      position: indicatorPosition,\n      onPositionChange: setIndicatorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages,\n        isGenerating: isGenerating,\n        serverError: serverError,\n        getConfidenceColor: getConfidenceColor,\n        formatTime: formatTime,\n        messagesEndRef: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        setSettings: updateSetting,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputArea, {\n        inputValue: inputValue,\n        setInputValue: setInputValue,\n        constraints: constraints,\n        setConstraints: setConstraints,\n        handleSend: handleSend,\n        handleKeyPress: handleKeyPress,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(DiffusionModel, \"ZyZHxBe52EY+9Eu30FMPpodpQKs=\", false, function () {\n  return [useTextGeneration, useMessages, useSettings];\n});\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","useTextGeneration","useMessages","useSettings","MODEL_CONFIG","UI_CONFIG","getConfidenceColor","parseVisualizationState","formatTime","jsxDEV","_jsxDEV","DiffusionModel","_s","isGenerating","error","serverError","generateText","messages","messagesEndRef","addMessage","updateMessage","id","text","sender","MESSAGE_TYPES","BOT","timestamp","Date","isGenerated","settings","updateSetting","DEFAULT_SETTINGS","inputValue","setInputValue","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","generateResponse","userMessage","userMsg","USER","userMsgWithId","newChatHistory","role","content","initialTokens","Array","gen_length","fill","map","_","index","char","confidence","color","CONFIDENCE_COLORS","MASK","botMsg","tokens","botMsgWithId","requestSettings","response","step","stepIndex","progress","console","handleSend","trim","message","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","isVisible","onClose","position","onPositionChange","setSettings","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport { useTextGeneration, useMessages, useSettings } from './hooks';\r\nimport { MODEL_CONFIG, UI_CONFIG } from './constants';\r\nimport { getConfidenceColor, parseVisualizationState, formatTime } from './utils/helpers';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n  // 使用自定义hooks\r\n  const { isGenerating, error: serverError, generateText } = useTextGeneration();\r\n  const { messages, messagesEndRef, addMessage, updateMessage } = useMessages([\r\n    { \r\n      id: 1, \r\n      text: \"欢迎使用LLaDA扩散语言模型可视化系统！\", \r\n      sender: UI_CONFIG.MESSAGE_TYPES.BOT, \r\n      timestamp: new Date(), \r\n      isGenerated: true \r\n    }\r\n  ]);\r\n  const { settings, updateSetting } = useSettings(MODEL_CONFIG.DEFAULT_SETTINGS);\r\n\r\n  // 本地状态\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [showIndicator, setShowIndicator] = useState(false);\r\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [constraints, setConstraints] = useState('');\r\n\r\n  // 生成完整的回复\r\n  const generateResponse = async (userMessage) => {\r\n    try {\r\n      // 添加用户消息\r\n      const userMsg = {\r\n        text: userMessage,\r\n        sender: UI_CONFIG.MESSAGE_TYPES.USER,\r\n        isGenerated: true\r\n      };\r\n      \r\n      const userMsgWithId = addMessage(userMsg);\r\n\r\n      // 准备聊天历史\r\n      const newChatHistory = [\r\n        ...chatHistory,\r\n        { role: 'user', content: userMessage }\r\n      ];\r\n\r\n      // 创建初始的机器人消息\r\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n        id: index,\r\n        char: '[MASK]',\r\n        confidence: 0,\r\n        color: MODEL_CONFIG.CONFIDENCE_COLORS.MASK,\r\n        isGenerated: false\r\n      }));\r\n\r\n      const botMsg = {\r\n        text: '',\r\n        sender: UI_CONFIG.MESSAGE_TYPES.BOT,\r\n        tokens: initialTokens,\r\n        isGenerated: false\r\n      };\r\n\r\n      const botMsgWithId = addMessage(botMsg);\r\n\r\n      // 调用生成API\r\n      const requestSettings = {\r\n        ...settings,\r\n        constraints: constraints\r\n      };\r\n\r\n      const response = await generateText(\r\n        newChatHistory, \r\n        requestSettings,\r\n        // 进度回调\r\n        async (step, stepIndex, progress) => {\r\n          const tokens = parseVisualizationState(step);\r\n          updateMessage(botMsgWithId.id, { tokens });\r\n        }\r\n      );\r\n\r\n      // 更新聊天历史\r\n      setChatHistory([\r\n        ...newChatHistory,\r\n        { role: 'assistant', content: response.response }\r\n      ]);\r\n\r\n      // 设置最终文本\r\n      updateMessage(botMsgWithId.id, { \r\n        text: response.response,\r\n        isGenerated: true \r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('生成响应时出错:', error);\r\n      // 错误处理已由hook处理\r\n    }\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (inputValue.trim() === '' || isGenerating) return;\r\n    \r\n    const message = inputValue.trim();\r\n    setInputValue('');\r\n    generateResponse(message);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"diffusion-model\">\r\n      <header className=\"app-header\">\r\n        <h1>LLaDA扩散语言模型可视化系统</h1>\r\n        <p>观察从 [MASK] 到最终文本的生成过程</p>\r\n        <button \r\n          className=\"toggle-indicator-btn\"\r\n          onClick={() => setShowIndicator(!showIndicator)}\r\n          title={showIndicator ? \"隐藏置信度指示器\" : \"显示置信度指示器\"}\r\n        >\r\n          {showIndicator ? \"隐藏指示器\" : \"显示指示器\"}\r\n        </button>\r\n      </header>\r\n      \r\n      <ConfidenceIndicator \r\n        isVisible={showIndicator}\r\n        onClose={() => setShowIndicator(false)}\r\n        position={indicatorPosition}\r\n        onPositionChange={setIndicatorPosition}\r\n      />\r\n      \r\n      <div className=\"chat-container\">\r\n        <MessageList \r\n          messages={messages}\r\n          isGenerating={isGenerating}\r\n          serverError={serverError}\r\n          getConfidenceColor={getConfidenceColor}\r\n          formatTime={formatTime}\r\n          messagesEndRef={messagesEndRef}\r\n        />\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          setSettings={updateSetting}\r\n          isGenerating={isGenerating}\r\n        />\r\n        \r\n        <InputArea \r\n          inputValue={inputValue}\r\n          setInputValue={setInputValue}\r\n          constraints={constraints}\r\n          setConstraints={setConstraints}\r\n          handleSend={handleSend}\r\n          handleKeyPress={handleKeyPress}\r\n          isGenerating={isGenerating}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}