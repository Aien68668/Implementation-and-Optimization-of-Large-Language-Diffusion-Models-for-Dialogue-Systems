{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { generateText, checkServerStatus } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport { getConfidenceColor, parseVisualizationState, formatTime, generateInitialTokens } from './utils/helpers';\nimport './styles/DiffusionModel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  // 对话管理状态\n  const [conversations, setConversations] = useState([]);\n  const [activeConversationId, setActiveConversationId] = useState(null);\n  const [systemInfo, setSystemInfo] = useState({\n    status: 'unknown',\n    device: 'unknown'\n  });\n\n  // 当前对话的消息\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [showIndicator, setShowIndicator] = useState(false);\n  const [indicatorPosition, setIndicatorPosition] = useState({\n    x: 20,\n    y: 100\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // 生成设置\n  const [settings, setSettings] = useState({\n    gen_length: 64,\n    steps: 32,\n    temperature: 0.0,\n    cfg_scale: 0.0,\n    block_length: 32,\n    remasking: 'low_confidence',\n    constraints: ''\n  });\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // 生成完整的回复\n  const generateResponse = async userMessage => {\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      // 添加用户消息\n      const userMsg = {\n        id: Date.now(),\n        text: userMessage,\n        sender: 'user',\n        timestamp: new Date(),\n        isGenerated: true\n      };\n      setMessages(prev => [...prev, userMsg]);\n\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userMessage\n      }];\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      const response = await generateText(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        const finalChatHistory = [...newChatHistory, {\n          role: 'assistant',\n          content: response.response\n        }];\n        setChatHistory(finalChatHistory);\n        updateCurrentConversation(updatedMessages, finalChatHistory);\n        return updatedMessages;\n      });\n    } catch (error) {\n      console.error('生成响应时出错:', error);\n      setServerError(error.message || '服务器连接失败');\n\n      // 移除未完成的bot消息\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n  const handleSend = () => {\n    if (inputValue.trim() === '' || isGenerating) return;\n    const message = inputValue.trim();\n    setInputValue('');\n    generateResponse(message);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // 初始化和系统状态检查\n  useEffect(() => {\n    // 检查系统状态\n    const checkSystemStatus = async () => {\n      try {\n        const status = await checkServerStatus();\n        setSystemInfo(status);\n      } catch (error) {\n        setSystemInfo({\n          status: 'error',\n          device: 'unknown'\n        });\n      }\n    };\n    checkSystemStatus();\n\n    // 创建默认对话\n    if (conversations.length === 0) {\n      createNewConversation();\n    }\n  }, []);\n\n  // 对话管理函数\n  const createNewConversation = () => {\n    const newConversation = {\n      id: Date.now(),\n      title: '',\n      messages: [{\n        id: 1,\n        text: \"欢迎使用LLaDA扩散语言模型可视化系统！\",\n        sender: 'bot',\n        timestamp: new Date(),\n        isGenerated: true\n      }],\n      chatHistory: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setActiveConversationId(newConversation.id);\n    setMessages(newConversation.messages);\n    setChatHistory([]);\n    setInputValue('');\n    setConstraints('');\n    setServerError(null);\n  };\n  const selectConversation = conversationId => {\n    const conversation = conversations.find(c => c.id === conversationId);\n    if (conversation) {\n      setActiveConversationId(conversationId);\n      setMessages(conversation.messages);\n      setChatHistory(conversation.chatHistory || []);\n      setInputValue('');\n      setConstraints('');\n      setServerError(null);\n    }\n  };\n  const deleteConversation = conversationId => {\n    if (conversations.length <= 1) {\n      // 如果只有一个对话，创建新对话而不是删除\n      createNewConversation();\n      return;\n    }\n    const newConversations = conversations.filter(c => c.id !== conversationId);\n    setConversations(newConversations);\n    if (activeConversationId === conversationId) {\n      // 如果删除的是当前对话，切换到第一个对话\n      const firstConversation = newConversations[0];\n      if (firstConversation) {\n        selectConversation(firstConversation.id);\n      }\n    }\n  };\n  const updateCurrentConversation = (updatedMessages, updatedChatHistory) => {\n    setConversations(prev => prev.map(conversation => {\n      var _updatedMessages$find, _updatedMessages$find2;\n      return conversation.id === activeConversationId ? {\n        ...conversation,\n        messages: updatedMessages,\n        chatHistory: updatedChatHistory,\n        updatedAt: new Date(),\n        // 如果还没有标题，从第一条用户消息生成\n        title: conversation.title || ((_updatedMessages$find = updatedMessages.find(m => m.sender === 'user')) === null || _updatedMessages$find === void 0 ? void 0 : (_updatedMessages$find2 = _updatedMessages$find.text) === null || _updatedMessages$find2 === void 0 ? void 0 : _updatedMessages$find2.slice(0, 20)) + '...' || ''\n      } : conversation;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      activeConversationId: activeConversationId,\n      onNewConversation: createNewConversation,\n      onSelectConversation: selectConversation,\n      onDeleteConversation: deleteConversation,\n      showIndicator: showIndicator,\n      onToggleIndicator: () => setShowIndicator(!showIndicator),\n      systemInfo: systemInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfidenceIndicator, {\n      isVisible: showIndicator,\n      onClose: () => setShowIndicator(false),\n      position: indicatorPosition,\n      onPositionChange: setIndicatorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          isGenerating: isGenerating,\n          serverError: serverError,\n          getConfidenceColor: getConfidenceColor,\n          formatTime: formatTime,\n          messagesEndRef: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputArea, {\n          inputValue: inputValue,\n          setInputValue: setInputValue,\n          constraints: constraints,\n          setConstraints: setConstraints,\n          handleSend: handleSend,\n          handleKeyPress: handleKeyPress,\n          isGenerating: isGenerating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        setSettings: setSettings,\n        isGenerating: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n_s(DiffusionModel, \"idECRvtkNPVI9n8dXVhG5NMTgDQ=\");\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","generateText","checkServerStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","getConfidenceColor","parseVisualizationState","formatTime","generateInitialTokens","jsxDEV","_jsxDEV","DiffusionModel","_s","conversations","setConversations","activeConversationId","setActiveConversationId","systemInfo","setSystemInfo","status","device","messages","setMessages","inputValue","setInputValue","isGenerating","setIsGenerating","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","messagesEndRef","settings","setSettings","gen_length","steps","temperature","cfg_scale","block_length","remasking","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","generateResponse","userMessage","userMsg","id","Date","now","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","map","_","index","char","confidence","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","length","step","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","filter","handleSend","trim","handleKeyPress","e","key","shiftKey","preventDefault","checkSystemStatus","createNewConversation","newConversation","title","createdAt","updatedAt","selectConversation","conversationId","conversation","find","c","deleteConversation","newConversations","firstConversation","updatedChatHistory","_updatedMessages$find","_updatedMessages$find2","m","slice","className","children","onNewConversation","onSelectConversation","onDeleteConversation","onToggleIndicator","fileName","_jsxFileName","lineNumber","columnNumber","isVisible","onClose","position","onPositionChange","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { generateText, checkServerStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport { getConfidenceColor, parseVisualizationState, formatTime, generateInitialTokens } from './utils/helpers';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n  // 对话管理状态\r\n  const [conversations, setConversations] = useState([]);\r\n  const [activeConversationId, setActiveConversationId] = useState(null);\r\n  const [systemInfo, setSystemInfo] = useState({ status: 'unknown', device: 'unknown' });\r\n  \r\n  // 当前对话的消息\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [showIndicator, setShowIndicator] = useState(false);\r\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [constraints, setConstraints] = useState('');\r\n  const [serverError, setServerError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // 生成设置\r\n  const [settings, setSettings] = useState({\r\n    gen_length: 64,\r\n    steps: 32,\r\n    temperature: 0.0,\r\n    cfg_scale: 0.0,\r\n    block_length: 32,\r\n    remasking: 'low_confidence',\r\n    constraints: ''\r\n  });\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // 生成完整的回复\r\n  const generateResponse = async (userMessage) => {\r\n    setIsGenerating(true);\r\n    setServerError(null);\r\n    \r\n    try {\r\n      // 添加用户消息\r\n      const userMsg = {\r\n        id: Date.now(),\r\n        text: userMessage,\r\n        sender: 'user',\r\n        timestamp: new Date(),\r\n        isGenerated: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, userMsg]);\r\n\r\n      // 准备聊天历史\r\n      const newChatHistory = [\r\n        ...chatHistory,\r\n        { role: 'user', content: userMessage }\r\n      ];\r\n\r\n      // 创建初始的掩码消息\r\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n        id: index,\r\n        char: '[MASK]',\r\n        confidence: 0,\r\n        color: '#444444',\r\n        isGenerated: false\r\n      }));\r\n\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: '',\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        tokens: initialTokens,\r\n        isGenerated: false\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n\r\n      // 调用后端API生成响应\r\n      const requestSettings = {\r\n        ...settings,\r\n        constraints: constraints\r\n      };\r\n\r\n      const response = await generateText(newChatHistory, requestSettings);\r\n      \r\n      if (response.error) {\r\n        throw new Error(response.error);\r\n      }\r\n\r\n      // 更新聊天历史\r\n      setChatHistory([\r\n        ...newChatHistory,\r\n        { role: 'assistant', content: response.response }\r\n      ]);\r\n\r\n      // 逐步显示可视化过程\r\n      const visualizationSteps = response.visualization || [];\r\n      \r\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n        const step = visualizationSteps[stepIndex];\r\n        const tokens = parseVisualizationState(step);\r\n        \r\n        // 更新消息中的tokens\r\n        setMessages(prev => prev.map(msg => {\r\n          if (msg.id === botMessage.id) {\r\n            return { ...msg, tokens };\r\n          }\r\n          return msg;\r\n        }));\r\n        \r\n        // 如果不是最后一步，等待一段时间再显示下一步\r\n        if (stepIndex < visualizationSteps.length - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, 200));\r\n        }\r\n      }\r\n\r\n      // 生成完成，设置最终文本\r\n      setMessages(prev => {\r\n        const updatedMessages = prev.map(msg => {\r\n          if (msg.id === botMessage.id) {\r\n            return { \r\n              ...msg, \r\n              text: response.response,\r\n              isGenerated: true \r\n            };\r\n          }\r\n          return msg;\r\n        });\r\n        \r\n        // 更新当前对话\r\n        const finalChatHistory = [\r\n          ...newChatHistory,\r\n          { role: 'assistant', content: response.response }\r\n        ];\r\n        setChatHistory(finalChatHistory);\r\n        updateCurrentConversation(updatedMessages, finalChatHistory);\r\n        \r\n        return updatedMessages;\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('生成响应时出错:', error);\r\n      setServerError(error.message || '服务器连接失败');\r\n      \r\n      // 移除未完成的bot消息\r\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (inputValue.trim() === '' || isGenerating) return;\r\n    \r\n    const message = inputValue.trim();\r\n    setInputValue('');\r\n    generateResponse(message);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  // 初始化和系统状态检查\r\n  useEffect(() => {\r\n    // 检查系统状态\r\n    const checkSystemStatus = async () => {\r\n      try {\r\n        const status = await checkServerStatus();\r\n        setSystemInfo(status);\r\n      } catch (error) {\r\n        setSystemInfo({ status: 'error', device: 'unknown' });\r\n      }\r\n    };\r\n\r\n    checkSystemStatus();\r\n    \r\n    // 创建默认对话\r\n    if (conversations.length === 0) {\r\n      createNewConversation();\r\n    }\r\n  }, []);\r\n\r\n  // 对话管理函数\r\n  const createNewConversation = () => {\r\n    const newConversation = {\r\n      id: Date.now(),\r\n      title: '',\r\n      messages: [\r\n        { \r\n          id: 1, \r\n          text: \"欢迎使用LLaDA扩散语言模型可视化系统！\", \r\n          sender: 'bot', \r\n          timestamp: new Date(), \r\n          isGenerated: true \r\n        }\r\n      ],\r\n      chatHistory: [],\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    setConversations(prev => [newConversation, ...prev]);\r\n    setActiveConversationId(newConversation.id);\r\n    setMessages(newConversation.messages);\r\n    setChatHistory([]);\r\n    setInputValue('');\r\n    setConstraints('');\r\n    setServerError(null);\r\n  };\r\n\r\n  const selectConversation = (conversationId) => {\r\n    const conversation = conversations.find(c => c.id === conversationId);\r\n    if (conversation) {\r\n      setActiveConversationId(conversationId);\r\n      setMessages(conversation.messages);\r\n      setChatHistory(conversation.chatHistory || []);\r\n      setInputValue('');\r\n      setConstraints('');\r\n      setServerError(null);\r\n    }\r\n  };\r\n\r\n  const deleteConversation = (conversationId) => {\r\n    if (conversations.length <= 1) {\r\n      // 如果只有一个对话，创建新对话而不是删除\r\n      createNewConversation();\r\n      return;\r\n    }\r\n\r\n    const newConversations = conversations.filter(c => c.id !== conversationId);\r\n    setConversations(newConversations);\r\n\r\n    if (activeConversationId === conversationId) {\r\n      // 如果删除的是当前对话，切换到第一个对话\r\n      const firstConversation = newConversations[0];\r\n      if (firstConversation) {\r\n        selectConversation(firstConversation.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateCurrentConversation = (updatedMessages, updatedChatHistory) => {\r\n    setConversations(prev => \r\n      prev.map(conversation => \r\n        conversation.id === activeConversationId\r\n          ? {\r\n              ...conversation,\r\n              messages: updatedMessages,\r\n              chatHistory: updatedChatHistory,\r\n              updatedAt: new Date(),\r\n              // 如果还没有标题，从第一条用户消息生成\r\n              title: conversation.title || \r\n                     (updatedMessages.find(m => m.sender === 'user')?.text?.slice(0, 20) + '...' || '')\r\n            }\r\n          : conversation\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"diffusion-model\">\r\n      <Sidebar\r\n        conversations={conversations}\r\n        activeConversationId={activeConversationId}\r\n        onNewConversation={createNewConversation}\r\n        onSelectConversation={selectConversation}\r\n        onDeleteConversation={deleteConversation}\r\n        showIndicator={showIndicator}\r\n        onToggleIndicator={() => setShowIndicator(!showIndicator)}\r\n        systemInfo={systemInfo}\r\n      />\r\n      \r\n      <ConfidenceIndicator \r\n        isVisible={showIndicator}\r\n        onClose={() => setShowIndicator(false)}\r\n        position={indicatorPosition}\r\n        onPositionChange={setIndicatorPosition}\r\n      />\r\n      \r\n      <div className=\"main-content\">\r\n        <div className=\"chat-container\">\r\n          <MessageList \r\n            messages={messages}\r\n            isGenerating={isGenerating}\r\n            serverError={serverError}\r\n            getConfidenceColor={getConfidenceColor}\r\n            formatTime={formatTime}\r\n            messagesEndRef={messagesEndRef}\r\n          />\r\n          \r\n          <InputArea \r\n            inputValue={inputValue}\r\n            setInputValue={setInputValue}\r\n            constraints={constraints}\r\n            setConstraints={setConstraints}\r\n            handleSend={handleSend}\r\n            handleKeyPress={handleKeyPress}\r\n            isGenerating={isGenerating}\r\n          />\r\n        </div>\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          setSettings={setSettings}\r\n          isGenerating={isGenerating}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}