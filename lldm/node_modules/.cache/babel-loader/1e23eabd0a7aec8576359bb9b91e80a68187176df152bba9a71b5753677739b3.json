{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{generateText,checkServerStatus}from'./services/apiService';import ConfidenceIndicator from'./components/ConfidenceIndicator';import MessageList from'./components/MessageList';import SettingsPanel from'./components/SettingsPanel';import InputArea from'./components/InputArea';import Sidebar from'./components/Sidebar';import{getConfidenceColor,parseVisualizationState,formatTime,generateInitialTokens}from'./utils/helpers';import'./styles/DiffusionModel.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DiffusionModel=()=>{// 对话管理状态\nconst[conversations,setConversations]=useState([]);const[activeConversationId,setActiveConversationId]=useState(null);const[systemInfo,setSystemInfo]=useState({status:'unknown',device:'unknown'});// 当前对话的消息\nconst[messages,setMessages]=useState([]);const[inputValue,setInputValue]=useState('');const[isGenerating,setIsGenerating]=useState(false);const[showIndicator,setShowIndicator]=useState(false);const[indicatorPosition,setIndicatorPosition]=useState({x:20,y:100});const[chatHistory,setChatHistory]=useState([]);const[constraints,setConstraints]=useState('');const[serverError,setServerError]=useState(null);const messagesEndRef=useRef(null);// 生成设置\nconst[settings,setSettings]=useState({gen_length:64,steps:32,temperature:0.0,cfg_scale:0.0,block_length:32,remasking:'low_confidence',constraints:''});const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(()=>{scrollToBottom();},[messages]);// 生成完整的回复\nconst generateResponse=async userMessage=>{setIsGenerating(true);setServerError(null);try{// 添加用户消息\nconst userMsg={id:Date.now(),text:userMessage,sender:'user',timestamp:new Date(),isGenerated:true};setMessages(prev=>[...prev,userMsg]);// 准备聊天历史\nconst newChatHistory=[...chatHistory,{role:'user',content:userMessage}];// 创建初始的掩码消息\nconst initialTokens=Array(settings.gen_length).fill(null).map((_,index)=>({id:index,char:'[MASK]',confidence:0,color:'#444444',isGenerated:false}));const botMessage={id:Date.now()+1,text:'',sender:'bot',timestamp:new Date(),tokens:initialTokens,isGenerated:false};setMessages(prev=>[...prev,botMessage]);// 调用后端API生成响应\nconst requestSettings={...settings,constraints:constraints};const response=await generateText(newChatHistory,requestSettings);if(response.error){throw new Error(response.error);}// 更新聊天历史\nsetChatHistory([...newChatHistory,{role:'assistant',content:response.response}]);// 逐步显示可视化过程\nconst visualizationSteps=response.visualization||[];for(let stepIndex=0;stepIndex<visualizationSteps.length;stepIndex++){const step=visualizationSteps[stepIndex];const tokens=parseVisualizationState(step);// 更新消息中的tokens\nsetMessages(prev=>prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,tokens};}return msg;}));// 如果不是最后一步，等待一段时间再显示下一步\nif(stepIndex<visualizationSteps.length-1){await new Promise(resolve=>setTimeout(resolve,200));}}// 生成完成，设置最终文本\nsetMessages(prev=>{const updatedMessages=prev.map(msg=>{if(msg.id===botMessage.id){return{...msg,text:response.response,isGenerated:true};}return msg;});// 更新当前对话\nconst finalChatHistory=[...newChatHistory,{role:'assistant',content:response.response}];setChatHistory(finalChatHistory);updateCurrentConversation(updatedMessages,finalChatHistory);return updatedMessages;});}catch(error){console.error('生成响应时出错:',error);setServerError(error.message||'服务器连接失败');// 移除未完成的bot消息\nsetMessages(prev=>prev.filter(msg=>msg.id!==Date.now()+1));}finally{setIsGenerating(false);}};const handleSend=()=>{if(inputValue.trim()===''||isGenerating)return;const message=inputValue.trim();setInputValue('');generateResponse(message);};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey&&!isGenerating){e.preventDefault();handleSend();}};// 初始化和系统状态检查\nuseEffect(()=>{// 检查系统状态\nconst checkSystemStatus=async()=>{try{const status=await checkServerStatus();setSystemInfo(status);}catch(error){setSystemInfo({status:'error',device:'unknown'});}};checkSystemStatus();// 创建默认对话\nif(conversations.length===0){createNewConversation();}},[]);// 对话管理函数\nconst createNewConversation=()=>{const newConversation={id:Date.now(),title:'',messages:[{id:1,text:\"欢迎使用LLaDA扩散语言模型可视化系统！\",sender:'bot',timestamp:new Date(),isGenerated:true}],chatHistory:[],createdAt:new Date(),updatedAt:new Date()};setConversations(prev=>[newConversation,...prev]);setActiveConversationId(newConversation.id);setMessages(newConversation.messages);setChatHistory([]);setInputValue('');setConstraints('');setServerError(null);};const selectConversation=conversationId=>{const conversation=conversations.find(c=>c.id===conversationId);if(conversation){setActiveConversationId(conversationId);setMessages(conversation.messages);setChatHistory(conversation.chatHistory||[]);setInputValue('');setConstraints('');setServerError(null);}};const deleteConversation=conversationId=>{if(conversations.length<=1){// 如果只有一个对话，创建新对话而不是删除\ncreateNewConversation();return;}const newConversations=conversations.filter(c=>c.id!==conversationId);setConversations(newConversations);if(activeConversationId===conversationId){// 如果删除的是当前对话，切换到第一个对话\nconst firstConversation=newConversations[0];if(firstConversation){selectConversation(firstConversation.id);}}};const updateCurrentConversation=(updatedMessages,updatedChatHistory)=>{setConversations(prev=>prev.map(conversation=>{var _updatedMessages$find,_updatedMessages$find2;return conversation.id===activeConversationId?{...conversation,messages:updatedMessages,chatHistory:updatedChatHistory,updatedAt:new Date(),// 如果还没有标题，从第一条用户消息生成\ntitle:conversation.title||((_updatedMessages$find=updatedMessages.find(m=>m.sender==='user'))===null||_updatedMessages$find===void 0?void 0:(_updatedMessages$find2=_updatedMessages$find.text)===null||_updatedMessages$find2===void 0?void 0:_updatedMessages$find2.slice(0,20))+'...'||''}:conversation;}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"diffusion-model\",children:[/*#__PURE__*/_jsx(Sidebar,{conversations:conversations,activeConversationId:activeConversationId,onNewConversation:createNewConversation,onSelectConversation:selectConversation,onDeleteConversation:deleteConversation,showIndicator:showIndicator,onToggleIndicator:()=>setShowIndicator(!showIndicator),systemInfo:systemInfo}),/*#__PURE__*/_jsx(ConfidenceIndicator,{isVisible:showIndicator,onClose:()=>setShowIndicator(false),position:indicatorPosition,onPositionChange:setIndicatorPosition}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages,isGenerating:isGenerating,serverError:serverError,getConfidenceColor:getConfidenceColor,formatTime:formatTime,messagesEndRef:messagesEndRef}),/*#__PURE__*/_jsx(InputArea,{inputValue:inputValue,setInputValue:setInputValue,constraints:constraints,setConstraints:setConstraints,handleSend:handleSend,handleKeyPress:handleKeyPress,isGenerating:isGenerating})]}),/*#__PURE__*/_jsx(SettingsPanel,{settings:settings,setSettings:setSettings,isGenerating:isGenerating})]})]});};export default DiffusionModel;","map":{"version":3,"names":["React","useState","useEffect","useRef","generateText","checkServerStatus","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","getConfidenceColor","parseVisualizationState","formatTime","generateInitialTokens","jsx","_jsx","jsxs","_jsxs","DiffusionModel","conversations","setConversations","activeConversationId","setActiveConversationId","systemInfo","setSystemInfo","status","device","messages","setMessages","inputValue","setInputValue","isGenerating","setIsGenerating","showIndicator","setShowIndicator","indicatorPosition","setIndicatorPosition","x","y","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","messagesEndRef","settings","setSettings","gen_length","steps","temperature","cfg_scale","block_length","remasking","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","generateResponse","userMessage","userMsg","id","Date","now","text","sender","timestamp","isGenerated","prev","newChatHistory","role","content","initialTokens","Array","fill","map","_","index","char","confidence","color","botMessage","tokens","requestSettings","response","error","Error","visualizationSteps","visualization","stepIndex","length","step","msg","Promise","resolve","setTimeout","updatedMessages","finalChatHistory","updateCurrentConversation","console","message","filter","handleSend","trim","handleKeyPress","e","key","shiftKey","preventDefault","checkSystemStatus","createNewConversation","newConversation","title","createdAt","updatedAt","selectConversation","conversationId","conversation","find","c","deleteConversation","newConversations","firstConversation","updatedChatHistory","_updatedMessages$find","_updatedMessages$find2","m","slice","className","children","onNewConversation","onSelectConversation","onDeleteConversation","onToggleIndicator","isVisible","onClose","position","onPositionChange"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { generateText, checkServerStatus } from './services/apiService';\r\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\r\nimport MessageList from './components/MessageList';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputArea from './components/InputArea';\r\nimport Sidebar from './components/Sidebar';\r\nimport { getConfidenceColor, parseVisualizationState, formatTime, generateInitialTokens } from './utils/helpers';\r\nimport './styles/DiffusionModel.css';\r\n\r\nconst DiffusionModel = () => {\r\n  // 对话管理状态\r\n  const [conversations, setConversations] = useState([]);\r\n  const [activeConversationId, setActiveConversationId] = useState(null);\r\n  const [systemInfo, setSystemInfo] = useState({ status: 'unknown', device: 'unknown' });\r\n  \r\n  // 当前对话的消息\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [showIndicator, setShowIndicator] = useState(false);\r\n  const [indicatorPosition, setIndicatorPosition] = useState({ x: 20, y: 100 });\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [constraints, setConstraints] = useState('');\r\n  const [serverError, setServerError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // 生成设置\r\n  const [settings, setSettings] = useState({\r\n    gen_length: 64,\r\n    steps: 32,\r\n    temperature: 0.0,\r\n    cfg_scale: 0.0,\r\n    block_length: 32,\r\n    remasking: 'low_confidence',\r\n    constraints: ''\r\n  });\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // 生成完整的回复\r\n  const generateResponse = async (userMessage) => {\r\n    setIsGenerating(true);\r\n    setServerError(null);\r\n    \r\n    try {\r\n      // 添加用户消息\r\n      const userMsg = {\r\n        id: Date.now(),\r\n        text: userMessage,\r\n        sender: 'user',\r\n        timestamp: new Date(),\r\n        isGenerated: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, userMsg]);\r\n\r\n      // 准备聊天历史\r\n      const newChatHistory = [\r\n        ...chatHistory,\r\n        { role: 'user', content: userMessage }\r\n      ];\r\n\r\n      // 创建初始的掩码消息\r\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\r\n        id: index,\r\n        char: '[MASK]',\r\n        confidence: 0,\r\n        color: '#444444',\r\n        isGenerated: false\r\n      }));\r\n\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: '',\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        tokens: initialTokens,\r\n        isGenerated: false\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n\r\n      // 调用后端API生成响应\r\n      const requestSettings = {\r\n        ...settings,\r\n        constraints: constraints\r\n      };\r\n\r\n      const response = await generateText(newChatHistory, requestSettings);\r\n      \r\n      if (response.error) {\r\n        throw new Error(response.error);\r\n      }\r\n\r\n      // 更新聊天历史\r\n      setChatHistory([\r\n        ...newChatHistory,\r\n        { role: 'assistant', content: response.response }\r\n      ]);\r\n\r\n      // 逐步显示可视化过程\r\n      const visualizationSteps = response.visualization || [];\r\n      \r\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\r\n        const step = visualizationSteps[stepIndex];\r\n        const tokens = parseVisualizationState(step);\r\n        \r\n        // 更新消息中的tokens\r\n        setMessages(prev => prev.map(msg => {\r\n          if (msg.id === botMessage.id) {\r\n            return { ...msg, tokens };\r\n          }\r\n          return msg;\r\n        }));\r\n        \r\n        // 如果不是最后一步，等待一段时间再显示下一步\r\n        if (stepIndex < visualizationSteps.length - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, 200));\r\n        }\r\n      }\r\n\r\n      // 生成完成，设置最终文本\r\n      setMessages(prev => {\r\n        const updatedMessages = prev.map(msg => {\r\n          if (msg.id === botMessage.id) {\r\n            return { \r\n              ...msg, \r\n              text: response.response,\r\n              isGenerated: true \r\n            };\r\n          }\r\n          return msg;\r\n        });\r\n        \r\n        // 更新当前对话\r\n        const finalChatHistory = [\r\n          ...newChatHistory,\r\n          { role: 'assistant', content: response.response }\r\n        ];\r\n        setChatHistory(finalChatHistory);\r\n        updateCurrentConversation(updatedMessages, finalChatHistory);\r\n        \r\n        return updatedMessages;\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('生成响应时出错:', error);\r\n      setServerError(error.message || '服务器连接失败');\r\n      \r\n      // 移除未完成的bot消息\r\n      setMessages(prev => prev.filter(msg => msg.id !== Date.now() + 1));\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (inputValue.trim() === '' || isGenerating) return;\r\n    \r\n    const message = inputValue.trim();\r\n    setInputValue('');\r\n    generateResponse(message);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey && !isGenerating) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  // 初始化和系统状态检查\r\n  useEffect(() => {\r\n    // 检查系统状态\r\n    const checkSystemStatus = async () => {\r\n      try {\r\n        const status = await checkServerStatus();\r\n        setSystemInfo(status);\r\n      } catch (error) {\r\n        setSystemInfo({ status: 'error', device: 'unknown' });\r\n      }\r\n    };\r\n\r\n    checkSystemStatus();\r\n    \r\n    // 创建默认对话\r\n    if (conversations.length === 0) {\r\n      createNewConversation();\r\n    }\r\n  }, []);\r\n\r\n  // 对话管理函数\r\n  const createNewConversation = () => {\r\n    const newConversation = {\r\n      id: Date.now(),\r\n      title: '',\r\n      messages: [\r\n        { \r\n          id: 1, \r\n          text: \"欢迎使用LLaDA扩散语言模型可视化系统！\", \r\n          sender: 'bot', \r\n          timestamp: new Date(), \r\n          isGenerated: true \r\n        }\r\n      ],\r\n      chatHistory: [],\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    setConversations(prev => [newConversation, ...prev]);\r\n    setActiveConversationId(newConversation.id);\r\n    setMessages(newConversation.messages);\r\n    setChatHistory([]);\r\n    setInputValue('');\r\n    setConstraints('');\r\n    setServerError(null);\r\n  };\r\n\r\n  const selectConversation = (conversationId) => {\r\n    const conversation = conversations.find(c => c.id === conversationId);\r\n    if (conversation) {\r\n      setActiveConversationId(conversationId);\r\n      setMessages(conversation.messages);\r\n      setChatHistory(conversation.chatHistory || []);\r\n      setInputValue('');\r\n      setConstraints('');\r\n      setServerError(null);\r\n    }\r\n  };\r\n\r\n  const deleteConversation = (conversationId) => {\r\n    if (conversations.length <= 1) {\r\n      // 如果只有一个对话，创建新对话而不是删除\r\n      createNewConversation();\r\n      return;\r\n    }\r\n\r\n    const newConversations = conversations.filter(c => c.id !== conversationId);\r\n    setConversations(newConversations);\r\n\r\n    if (activeConversationId === conversationId) {\r\n      // 如果删除的是当前对话，切换到第一个对话\r\n      const firstConversation = newConversations[0];\r\n      if (firstConversation) {\r\n        selectConversation(firstConversation.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateCurrentConversation = (updatedMessages, updatedChatHistory) => {\r\n    setConversations(prev => \r\n      prev.map(conversation => \r\n        conversation.id === activeConversationId\r\n          ? {\r\n              ...conversation,\r\n              messages: updatedMessages,\r\n              chatHistory: updatedChatHistory,\r\n              updatedAt: new Date(),\r\n              // 如果还没有标题，从第一条用户消息生成\r\n              title: conversation.title || \r\n                     (updatedMessages.find(m => m.sender === 'user')?.text?.slice(0, 20) + '...' || '')\r\n            }\r\n          : conversation\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"diffusion-model\">\r\n      <Sidebar\r\n        conversations={conversations}\r\n        activeConversationId={activeConversationId}\r\n        onNewConversation={createNewConversation}\r\n        onSelectConversation={selectConversation}\r\n        onDeleteConversation={deleteConversation}\r\n        showIndicator={showIndicator}\r\n        onToggleIndicator={() => setShowIndicator(!showIndicator)}\r\n        systemInfo={systemInfo}\r\n      />\r\n      \r\n      <ConfidenceIndicator \r\n        isVisible={showIndicator}\r\n        onClose={() => setShowIndicator(false)}\r\n        position={indicatorPosition}\r\n        onPositionChange={setIndicatorPosition}\r\n      />\r\n      \r\n      <div className=\"main-content\">\r\n        <div className=\"chat-container\">\r\n          <MessageList \r\n            messages={messages}\r\n            isGenerating={isGenerating}\r\n            serverError={serverError}\r\n            getConfidenceColor={getConfidenceColor}\r\n            formatTime={formatTime}\r\n            messagesEndRef={messagesEndRef}\r\n          />\r\n          \r\n          <InputArea \r\n            inputValue={inputValue}\r\n            setInputValue={setInputValue}\r\n            constraints={constraints}\r\n            setConstraints={setConstraints}\r\n            handleSend={handleSend}\r\n            handleKeyPress={handleKeyPress}\r\n            isGenerating={isGenerating}\r\n          />\r\n        </div>\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          setSettings={setSettings}\r\n          isGenerating={isGenerating}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiffusionModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}