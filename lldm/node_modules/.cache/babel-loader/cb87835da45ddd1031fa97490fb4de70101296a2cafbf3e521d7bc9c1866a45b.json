{"ast":null,"code":"import axios from 'axios';\n\n// 后端API基础URL\nconst API_BASE_URL = 'http://localhost:9000';\n\n// 详细日志记录功能\nclass APILogger {\n  constructor() {\n    this.logs = [];\n    this.maxLogs = 1000; // 最大保存1000条日志\n  }\n  log(level, message, data = null) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      data: data ? JSON.parse(JSON.stringify(data)) : null,\n      id: Date.now() + Math.random()\n    };\n    this.logs.push(logEntry);\n\n    // 保持日志数量在限制内\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(-this.maxLogs);\n    }\n\n    // 同时输出到控制台\n    const consoleMethod = level === 'error' ? 'error' : level === 'warn' ? 'warn' : 'log';\n    console[consoleMethod](`[API-${level.toUpperCase()}] ${message}`, data || '');\n\n    // 发送到后端日志（如果需要）\n    this.sendToBackend(logEntry);\n  }\n  async sendToBackend(logEntry) {\n    // 可选：将前端日志发送到后端保存\n    try {\n      // 这里可以实现发送到后端的逻辑\n      // await api.post('/log', logEntry);\n    } catch (error) {\n      // 静默失败，避免无限循环\n    }\n  }\n  info(message, data) {\n    this.log('info', message, data);\n  }\n  warn(message, data) {\n    this.log('warn', message, data);\n  }\n  error(message, data) {\n    this.log('error', message, data);\n  }\n  debug(message, data) {\n    this.log('debug', message, data);\n  }\n  getLogs() {\n    return this.logs;\n  }\n  clearLogs() {\n    this.logs = [];\n  }\n  exportLogs() {\n    const logData = JSON.stringify(this.logs, null, 2);\n    const blob = new Blob([logData], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `frontend-logs-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// 创建全局日志记录器\nconst logger = new APILogger();\nwindow.apiLogger = logger; // 使其在控制台中可访问\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  // 60秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 详细记录\napi.interceptors.request.use(config => {\n  const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  config.metadata = {\n    requestId,\n    startTime: Date.now()\n  };\n  logger.info(`发送API请求 [${requestId}]`, {\n    method: config.method.toUpperCase(),\n    url: config.url,\n    baseURL: config.baseURL,\n    headers: config.headers,\n    data: config.data,\n    timeout: config.timeout\n  });\n  return config;\n}, error => {\n  logger.error('请求配置错误', {\n    message: error.message,\n    stack: error.stack,\n    config: error.config\n  });\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 详细记录\napi.interceptors.response.use(response => {\n  const {\n    requestId,\n    startTime\n  } = response.config.metadata || {};\n  const duration = Date.now() - startTime;\n  logger.info(`收到API响应 [${requestId}]`, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n    data: response.data,\n    duration: `${duration}ms`,\n    url: response.config.url\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2, _error$response3, _error$config2;\n  const {\n    requestId,\n    startTime\n  } = ((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.metadata) || {};\n  const duration = startTime ? Date.now() - startTime : 0;\n  logger.error(`API请求失败 [${requestId}]`, {\n    message: error.message,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n    duration: duration ? `${duration}ms` : 'unknown',\n    url: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url,\n    stack: error.stack\n  });\n  return Promise.reject(error);\n});\n\n// 发送消息到后端API\nexport const sendMessage = async (messages, settings = {}) => {\n  const startTime = Date.now();\n  try {\n    var _messages, _messages2, _messages2$content, _response$data$respon, _response$data$visual;\n    logger.info('开始发送消息', {\n      messageCount: messages.length,\n      lastMessageRole: (_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.role,\n      lastMessageLength: (_messages2 = messages[messages.length - 1]) === null || _messages2 === void 0 ? void 0 : (_messages2$content = _messages2.content) === null || _messages2$content === void 0 ? void 0 : _messages2$content.length,\n      settings: settings\n    });\n\n    // 详细记录每条消息（调试模式）\n    if (process.env.REACT_APP_LOG_LEVEL === 'debug') {\n      messages.forEach((msg, index) => {\n        var _msg$content;\n        logger.debug(`消息 ${index + 1}`, {\n          role: msg.role,\n          content: msg.content,\n          contentLength: (_msg$content = msg.content) === null || _msg$content === void 0 ? void 0 : _msg$content.length\n        });\n      });\n    }\n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    const duration = Date.now() - startTime;\n    logger.info('消息发送成功', {\n      responseLength: (_response$data$respon = response.data.response) === null || _response$data$respon === void 0 ? void 0 : _response$data$respon.length,\n      visualizationSteps: (_response$data$visual = response.data.visualization) === null || _response$data$visual === void 0 ? void 0 : _response$data$visual.length,\n      duration: `${duration}ms`,\n      requestId: response.data.request_id\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5;\n    const duration = Date.now() - startTime;\n    logger.error('发送消息失败', {\n      errorMessage: error.message,\n      errorType: error.name,\n      responseStatus: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n      responseData: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data,\n      duration: `${duration}ms`,\n      messageCount: messages.length,\n      settings: settings\n    });\n    throw error;\n  }\n};\n\n// generateText 函数 - 为了兼容性\nexport const generateText = sendMessage;\n\n// 检查服务器状态\nexport const getStatus = async () => {\n  try {\n    logger.debug('检查服务器状态');\n    const response = await api.get('/health');\n    logger.info('服务器状态检查成功', {\n      status: response.data.status,\n      device: response.data.device,\n      responseTime: response.headers['response-time'] || 'unknown'\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response7;\n    logger.error('服务器状态检查失败', {\n      errorMessage: error.message,\n      errorType: error.name,\n      responseStatus: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status,\n      responseData: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data\n    });\n    throw error;\n  }\n};\n\n// checkServerStatus 函数 - 为了兼容性\nexport const checkServerStatus = getStatus;\n\n// 导出日志记录器供其他组件使用\nexport { logger };\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","APILogger","constructor","logs","maxLogs","log","level","message","data","logEntry","timestamp","Date","toISOString","JSON","parse","stringify","id","now","Math","random","push","length","slice","consoleMethod","console","toUpperCase","sendToBackend","error","info","warn","debug","getLogs","clearLogs","exportLogs","logData","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","replace","body","appendChild","click","removeChild","revokeObjectURL","logger","window","apiLogger","api","create","baseURL","timeout","headers","interceptors","request","use","config","requestId","toString","substr","metadata","startTime","method","stack","Promise","reject","response","duration","status","statusText","_error$config","_error$response","_error$response2","_error$response3","_error$config2","sendMessage","messages","settings","_messages","_messages2","_messages2$content","_response$data$respon","_response$data$visual","messageCount","lastMessageRole","role","lastMessageLength","content","process","env","REACT_APP_LOG_LEVEL","forEach","msg","index","_msg$content","contentLength","post","responseLength","visualizationSteps","visualization","request_id","_error$response4","_error$response5","errorMessage","errorType","name","responseStatus","responseData","generateText","getStatus","get","device","responseTime","_error$response6","_error$response7","checkServerStatus"],"sources":["/root/LLaDA-main/lldm/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// 后端API基础URL\nconst API_BASE_URL = 'http://localhost:9000';\n\n// 详细日志记录功能\nclass APILogger {\n  constructor() {\n    this.logs = [];\n    this.maxLogs = 1000; // 最大保存1000条日志\n  }\n\n  log(level, message, data = null) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      data: data ? JSON.parse(JSON.stringify(data)) : null,\n      id: Date.now() + Math.random()\n    };\n    \n    this.logs.push(logEntry);\n    \n    // 保持日志数量在限制内\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(-this.maxLogs);\n    }\n    \n    // 同时输出到控制台\n    const consoleMethod = level === 'error' ? 'error' : level === 'warn' ? 'warn' : 'log';\n    console[consoleMethod](`[API-${level.toUpperCase()}] ${message}`, data || '');\n    \n    // 发送到后端日志（如果需要）\n    this.sendToBackend(logEntry);\n  }\n\n  async sendToBackend(logEntry) {\n    // 可选：将前端日志发送到后端保存\n    try {\n      // 这里可以实现发送到后端的逻辑\n      // await api.post('/log', logEntry);\n    } catch (error) {\n      // 静默失败，避免无限循环\n    }\n  }\n\n  info(message, data) {\n    this.log('info', message, data);\n  }\n\n  warn(message, data) {\n    this.log('warn', message, data);\n  }\n\n  error(message, data) {\n    this.log('error', message, data);\n  }\n\n  debug(message, data) {\n    this.log('debug', message, data);\n  }\n\n  getLogs() {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  exportLogs() {\n    const logData = JSON.stringify(this.logs, null, 2);\n    const blob = new Blob([logData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `frontend-logs-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// 创建全局日志记录器\nconst logger = new APILogger();\nwindow.apiLogger = logger; // 使其在控制台中可访问\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000, // 60秒超时\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 详细记录\napi.interceptors.request.use(\n  (config) => {\n    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    config.metadata = { requestId, startTime: Date.now() };\n    \n    logger.info(`发送API请求 [${requestId}]`, {\n      method: config.method.toUpperCase(),\n      url: config.url,\n      baseURL: config.baseURL,\n      headers: config.headers,\n      data: config.data,\n      timeout: config.timeout\n    });\n    \n    return config;\n  },\n  (error) => {\n    logger.error('请求配置错误', {\n      message: error.message,\n      stack: error.stack,\n      config: error.config\n    });\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 详细记录\napi.interceptors.response.use(\n  (response) => {\n    const { requestId, startTime } = response.config.metadata || {};\n    const duration = Date.now() - startTime;\n    \n    logger.info(`收到API响应 [${requestId}]`, {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      data: response.data,\n      duration: `${duration}ms`,\n      url: response.config.url\n    });\n    \n    return response;\n  },\n  (error) => {\n    const { requestId, startTime } = error.config?.metadata || {};\n    const duration = startTime ? Date.now() - startTime : 0;\n    \n    logger.error(`API请求失败 [${requestId}]`, {\n      message: error.message,\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      data: error.response?.data,\n      duration: duration ? `${duration}ms` : 'unknown',\n      url: error.config?.url,\n      stack: error.stack\n    });\n    \n    return Promise.reject(error);\n  }\n);\n\n// 发送消息到后端API\nexport const sendMessage = async (messages, settings = {}) => {\n  const startTime = Date.now();\n  \n  try {\n    logger.info('开始发送消息', {\n      messageCount: messages.length,\n      lastMessageRole: messages[messages.length - 1]?.role,\n      lastMessageLength: messages[messages.length - 1]?.content?.length,\n      settings: settings\n    });\n    \n    // 详细记录每条消息（调试模式）\n    if (process.env.REACT_APP_LOG_LEVEL === 'debug') {\n      messages.forEach((msg, index) => {\n        logger.debug(`消息 ${index + 1}`, {\n          role: msg.role,\n          content: msg.content,\n          contentLength: msg.content?.length\n        });\n      });\n    }\n    \n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    \n    const duration = Date.now() - startTime;\n    \n    logger.info('消息发送成功', {\n      responseLength: response.data.response?.length,\n      visualizationSteps: response.data.visualization?.length,\n      duration: `${duration}ms`,\n      requestId: response.data.request_id\n    });\n    \n    return response.data;\n    \n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('发送消息失败', {\n      errorMessage: error.message,\n      errorType: error.name,\n      responseStatus: error.response?.status,\n      responseData: error.response?.data,\n      duration: `${duration}ms`,\n      messageCount: messages.length,\n      settings: settings\n    });\n    \n    throw error;\n  }\n};\n\n// generateText 函数 - 为了兼容性\nexport const generateText = sendMessage;\n\n// 检查服务器状态\nexport const getStatus = async () => {\n  try {\n    logger.debug('检查服务器状态');\n    \n    const response = await api.get('/health');\n    \n    logger.info('服务器状态检查成功', {\n      status: response.data.status,\n      device: response.data.device,\n      responseTime: response.headers['response-time'] || 'unknown'\n    });\n    \n    return response.data;\n    \n  } catch (error) {\n    logger.error('服务器状态检查失败', {\n      errorMessage: error.message,\n      errorType: error.name,\n      responseStatus: error.response?.status,\n      responseData: error.response?.data\n    });\n    \n    throw error;\n  }\n};\n\n// checkServerStatus 函数 - 为了兼容性\nexport const checkServerStatus = getStatus;\n\n// 导出日志记录器供其他组件使用\nexport { logger };\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}