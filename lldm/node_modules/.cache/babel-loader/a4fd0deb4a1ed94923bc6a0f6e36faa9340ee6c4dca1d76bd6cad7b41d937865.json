{"ast":null,"code":"var _jsxFileName = \"/root/LLaDA-main/lldm/src/DiffusionModel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendMessage, getStatus, generateText, checkServerStatus, logger } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport './styles/Sidebar.css';\nimport './styles/DiffusionModel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffusionModel = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [constraints, setConstraints] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const [confidence, setConfidence] = useState(0);\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [settings, setSettings] = useState({\n    temperature: 0.0,\n    top_p: 0.95,\n    gen_length: 50,\n    num_beams: 4,\n    steps: 32,\n    cfg_scale: 1.0\n  });\n\n  // --- Conversation Management State ---\n  const [conversations, setConversations] = useState([{\n    id: 0,\n    name: '对话 1',\n    history: []\n  }]);\n  const [currentConversationId, setCurrentConversationId] = useState(0);\n  const [systemStatus, setSystemStatus] = useState({\n    backendConnected: false,\n    device: 'Unknown',\n    modelLoaded: false,\n    lastCheck: null\n  });\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // --- Conversation Management Handlers ---\n\n  const handleNewConversation = () => {\n    // Save the current conversation's history first.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n\n    // Create the new conversation.\n    const newConversationId = Date.now(); // Use timestamp for unique ID\n    const newConversation = {\n      id: newConversationId,\n      name: `对话 ${updatedConversations.length + 1}`,\n      history: []\n    };\n    setConversations([...updatedConversations, newConversation]);\n    setCurrentConversationId(newConversationId);\n    setMessages([]); // Clear messages for the new conversation\n    setInput('');\n    setConfidence(0);\n    setIsWaitingForResponse(false);\n  };\n  const handleSwitchConversation = id => {\n    if (id === currentConversationId) return;\n\n    // Save the current conversation's history before switching.\n    const updatedConversations = conversations.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      history: messages\n    } : conv);\n    const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\n    if (newCurrentConversation) {\n      setConversations(updatedConversations);\n      setCurrentConversationId(newCurrentConversation.id);\n      setMessages(newCurrentConversation.history || []);\n    }\n  };\n  const handleDeleteConversation = id => {\n    const updatedConversations = conversations.filter(conv => conv.id !== id);\n    setConversations(updatedConversations);\n    if (id === currentConversationId) {\n      if (updatedConversations.length > 0) {\n        const firstConv = updatedConversations[0];\n        setCurrentConversationId(firstConv.id);\n        setMessages(firstConv.history || []);\n      } else {\n        // If all conversations are deleted, create a new default one.\n        const newId = Date.now();\n        const newConv = {\n          id: newId,\n          name: '对话 1',\n          history: []\n        };\n        setConversations([newConv]);\n        setCurrentConversationId(newId);\n        setMessages([]);\n      }\n    }\n  };\n  const handleSend = async () => {\n    if (input.trim() === '' || isWaitingForResponse) return;\n    const requestStartTime = Date.now();\n    const requestId = `frontend_${requestStartTime}_${Math.random().toString(36).substr(2, 9)}`;\n    logger.info(`[${requestId}] 开始处理用户发送请求`, {\n      userInput: input,\n      inputLength: input.length,\n      conversationId: currentConversationId,\n      currentMessagesCount: messages.length,\n      settings: settings,\n      constraints: constraints\n    });\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    const userInput = input;\n    setInput('');\n    setIsWaitingForResponse(true);\n    setIsGenerating(true);\n    setServerError(null);\n    try {\n      var _response$response, _response$visualizati;\n      // 准备聊天历史\n      const newChatHistory = [...chatHistory, {\n        role: 'user',\n        content: userInput\n      }];\n      logger.info(`[${requestId}] 准备发送到后端`, {\n        chatHistoryLength: newChatHistory.length,\n        lastUserMessage: userInput,\n        settingsUsed: settings\n      });\n\n      // 创建初始的掩码消息\n      const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n        id: index,\n        char: '[MASK]',\n        confidence: 0,\n        color: '#444444',\n        isGenerated: false\n      }));\n      const botMessage = {\n        id: Date.now() + 1,\n        text: '',\n        sender: 'bot',\n        timestamp: new Date(),\n        tokens: initialTokens,\n        isGenerated: false\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n\n      // 调用后端API生成响应\n      const requestSettings = {\n        ...settings,\n        constraints: constraints\n      };\n      logger.info(`[${requestId}] 发送API请求`, {\n        endpoint: '/generate',\n        messageCount: newChatHistory.length,\n        settings: requestSettings\n      });\n      const response = await sendMessage(newChatHistory, requestSettings);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n      logger.info(`[${requestId}] 收到后端响应`, {\n        responseLength: (_response$response = response.response) === null || _response$response === void 0 ? void 0 : _response$response.length,\n        visualizationStepsCount: (_response$visualizati = response.visualization) === null || _response$visualizati === void 0 ? void 0 : _response$visualizati.length,\n        backendRequestId: response.request_id,\n        backendDuration: response.duration\n      });\n\n      // 更新聊天历史\n      setChatHistory([...newChatHistory, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n      // 逐步显示可视化过程\n      const visualizationSteps = response.visualization || [];\n      logger.info(`[${requestId}] 开始可视化处理`, {\n        visualizationStepsCount: visualizationSteps.length,\n        animationDelay: 300\n      });\n      for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n        const step = visualizationSteps[stepIndex];\n        const tokens = parseVisualizationState(step);\n\n        // 更新消息中的tokens\n        setMessages(prev => prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              tokens\n            };\n          }\n          return msg;\n        }));\n\n        // 如果不是最后一步，等待一段时间再显示下一步\n        if (stepIndex < visualizationSteps.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 300)); // 增加延迟以便观察转换效果\n        }\n      }\n\n      // 生成完成，设置最终文本\n      setMessages(prev => {\n        const updatedMessages = prev.map(msg => {\n          if (msg.id === botMessage.id) {\n            return {\n              ...msg,\n              text: response.response,\n              isGenerated: true\n            };\n          }\n          return msg;\n        });\n\n        // 更新当前对话\n        updateCurrentConversation(updatedMessages);\n        return updatedMessages;\n      });\n      setConfidence(response.confidence || 0);\n      const requestEndTime = Date.now();\n      const totalDuration = requestEndTime - requestStartTime;\n      logger.info(`[${requestId}] 请求处理完成`, {\n        totalDuration: `${totalDuration}ms`,\n        finalResponseLength: response.response.length,\n        conversationUpdated: true\n      });\n    } catch (error) {\n      const requestEndTime = Date.now();\n      const totalDuration = requestEndTime - requestStartTime;\n      logger.error(`[${requestId}] 发送消息失败`, {\n        errorMessage: error.message,\n        errorType: error.name,\n        errorStack: error.stack,\n        totalDuration: `${totalDuration}ms`,\n        userInput: userInput,\n        settings: settings,\n        conversationId: currentConversationId\n      });\n      const errorMessage = {\n        id: Date.now() + 2,\n        text: '发送消息时出错: ' + (error.message || '未知错误'),\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\n      setServerError(error.message || '服务器连接失败');\n    } finally {\n      setIsWaitingForResponse(false);\n      setIsGenerating(false);\n      logger.debug(`[${requestId}] 请求状态重置完成`);\n    }\n  };\n\n  // 辅助函数：更新当前对话\n  const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\n    // 更新当前对话的历史\n    setConversations(prev => {\n      return prev.map(conv => {\n        if (conv.id === currentConversationId) {\n          return {\n            ...conv,\n            history: updatedMessages\n          };\n        }\n        return conv;\n      });\n    });\n  };\n\n  // 解析可视化状态\n  const parseVisualizationState = step => {\n    if (!step || !Array.isArray(step)) {\n      return [];\n    }\n    return step.map((tokenData, index) => {\n      // tokenData是 [token_text, color] 的格式\n      const [tokenText, color] = tokenData;\n      return {\n        id: index,\n        char: tokenText,\n        confidence: getConfidenceFromColor(color),\n        color: color,\n        isGenerated: tokenText !== '[MASK]'\n      };\n    });\n  };\n\n  // 从颜色推断置信度（与app.py保持一致）\n  const getConfidenceFromColor = color => {\n    switch (color) {\n      case '#444444':\n        return 0;\n      // [MASK] - 深灰色\n      case '#FF6666':\n        return 0.2;\n      // 低置信度 - 红色\n      case '#FFAA33':\n        return 0.5;\n      // 中置信度 - 橙色\n      case '#66CC66':\n        return 0.8;\n      // 高置信度 - 绿色\n      case '#6699CC':\n        return 1.0;\n      // 之前生成的token - 蓝色\n      default:\n        return 0.5;\n    }\n  };\n\n  // 获取置信度颜色（与app.py保持一致）\n  const getColorFromConfidence = confidence => {\n    if (confidence < 0.3) return '#FF6666'; // 低置信度：红色\n    if (confidence < 0.7) return '#FFAA33'; // 中置信度：橙色\n    return '#66CC66'; // 高置信度：绿色\n  };\n\n  // 处理按键按下事件\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // 检查服务器状态\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const status = await getStatus();\n        setServerError(null);\n        setSystemStatus({\n          backendConnected: true,\n          device: status.device || 'Unknown',\n          modelLoaded: true,\n          lastCheck: new Date()\n        });\n      } catch (error) {\n        setServerError('服务器连接失败');\n        setSystemStatus({\n          backendConnected: false,\n          device: 'Unknown',\n          modelLoaded: false,\n          lastCheck: new Date()\n        });\n      }\n    };\n    checkStatus();\n    const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diffusion-model\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      conversations: conversations,\n      activeConversationId: currentConversationId,\n      onNewConversation: handleNewConversation,\n      onSelectConversation: handleSwitchConversation,\n      onDeleteConversation: handleDeleteConversation,\n      systemStatus: systemStatus,\n      isGenerating: isGenerating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages,\n          isGenerating: isGenerating,\n          serverError: serverError,\n          getConfidenceColor: getColorFromConfidence,\n          formatTime: timestamp => new Date(timestamp).toLocaleTimeString(),\n          messagesEndRef: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-area-container\",\n          children: /*#__PURE__*/_jsxDEV(InputArea, {\n            inputValue: input,\n            setInputValue: setInput,\n            constraints: constraints,\n            setConstraints: setConstraints,\n            handleSend: handleSend,\n            handleKeyPress: handleKeyPress,\n            isGenerating: isGenerating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u6A21\\u578B\\u8BBE\\u7F6E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n          settings: settings,\n          setSettings: setSettings,\n          isGenerating: isGenerating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confidence-section\",\n        children: /*#__PURE__*/_jsxDEV(ConfidenceIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 9\n  }, this);\n};\n_s(DiffusionModel, \"CTgJ1xEWPqfH7rj7opuutunGzaY=\");\n_c = DiffusionModel;\nexport default DiffusionModel;\nvar _c;\n$RefreshReg$(_c, \"DiffusionModel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendMessage","getStatus","generateText","checkServerStatus","logger","ConfidenceIndicator","MessageList","SettingsPanel","InputArea","Sidebar","jsxDEV","_jsxDEV","DiffusionModel","_s","messages","setMessages","input","setInput","isGenerating","setIsGenerating","chatHistory","setChatHistory","constraints","setConstraints","serverError","setServerError","confidence","setConfidence","isWaitingForResponse","setIsWaitingForResponse","settings","setSettings","temperature","top_p","gen_length","num_beams","steps","cfg_scale","conversations","setConversations","id","name","history","currentConversationId","setCurrentConversationId","systemStatus","setSystemStatus","backendConnected","device","modelLoaded","lastCheck","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleNewConversation","updatedConversations","map","conv","newConversationId","Date","now","newConversation","length","handleSwitchConversation","newCurrentConversation","find","handleDeleteConversation","filter","firstConv","newId","newConv","handleSend","trim","requestStartTime","requestId","Math","random","toString","substr","info","userInput","inputLength","conversationId","currentMessagesCount","userMessage","text","sender","timestamp","prevMessages","_response$response","_response$visualizati","newChatHistory","role","content","chatHistoryLength","lastUserMessage","settingsUsed","initialTokens","Array","fill","_","index","char","color","isGenerated","botMessage","tokens","requestSettings","endpoint","messageCount","response","error","Error","responseLength","visualizationStepsCount","visualization","backendRequestId","request_id","backendDuration","duration","visualizationSteps","animationDelay","stepIndex","step","parseVisualizationState","prev","msg","Promise","resolve","setTimeout","updatedMessages","updateCurrentConversation","requestEndTime","totalDuration","finalResponseLength","conversationUpdated","errorMessage","message","errorType","errorStack","stack","slice","concat","debug","finalChatHistory","isArray","tokenData","tokenText","getConfidenceFromColor","getColorFromConfidence","handleKeyPress","e","key","shiftKey","preventDefault","checkStatus","status","interval","setInterval","clearInterval","className","children","activeConversationId","onNewConversation","onSelectConversation","onDeleteConversation","fileName","_jsxFileName","lineNumber","columnNumber","getConfidenceColor","formatTime","toLocaleTimeString","inputValue","setInputValue","_c","$RefreshReg$"],"sources":["/root/LLaDA-main/lldm/src/DiffusionModel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { sendMessage, getStatus, generateText, checkServerStatus, logger } from './services/apiService';\nimport ConfidenceIndicator from './components/ConfidenceIndicator';\nimport MessageList from './components/MessageList';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputArea from './components/InputArea';\nimport Sidebar from './components/Sidebar';\nimport './styles/Sidebar.css';\nimport './styles/DiffusionModel.css';\n\nconst DiffusionModel = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [chatHistory, setChatHistory] = useState([]);\n    const [constraints, setConstraints] = useState('');\n    const [serverError, setServerError] = useState(null);\n    const [confidence, setConfidence] = useState(0);\n    const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n    const [settings, setSettings] = useState({\n        temperature: 0.0,\n        top_p: 0.95,\n        gen_length: 50,\n        num_beams: 4,\n        steps: 32,\n        cfg_scale: 1.0\n    });\n\n    // --- Conversation Management State ---\n    const [conversations, setConversations] = useState([\n        { id: 0, name: '对话 1', history: [] }\n    ]);\n    const [currentConversationId, setCurrentConversationId] = useState(0);\n    const [systemStatus, setSystemStatus] = useState({\n        backendConnected: false,\n        device: 'Unknown',\n        modelLoaded: false,\n        lastCheck: null\n    });\n\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    // --- Conversation Management Handlers ---\n\n    const handleNewConversation = () => {\n        // Save the current conversation's history first.\n        const updatedConversations = conversations.map(conv =>\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\n        );\n\n        // Create the new conversation.\n        const newConversationId = Date.now(); // Use timestamp for unique ID\n        const newConversation = {\n            id: newConversationId,\n            name: `对话 ${updatedConversations.length + 1}`,\n            history: []\n        };\n\n        setConversations([...updatedConversations, newConversation]);\n        setCurrentConversationId(newConversationId);\n        setMessages([]); // Clear messages for the new conversation\n        setInput('');\n        setConfidence(0);\n        setIsWaitingForResponse(false);\n    };\n\n    const handleSwitchConversation = (id) => {\n        if (id === currentConversationId) return;\n\n        // Save the current conversation's history before switching.\n        const updatedConversations = conversations.map(conv =>\n            conv.id === currentConversationId ? { ...conv, history: messages } : conv\n        );\n\n        const newCurrentConversation = updatedConversations.find(conv => conv.id === id);\n\n        if (newCurrentConversation) {\n            setConversations(updatedConversations);\n            setCurrentConversationId(newCurrentConversation.id);\n            setMessages(newCurrentConversation.history || []);\n        }\n    };\n\n    const handleDeleteConversation = (id) => {\n        const updatedConversations = conversations.filter(conv => conv.id !== id);\n        setConversations(updatedConversations);\n\n        if (id === currentConversationId) {\n            if (updatedConversations.length > 0) {\n                const firstConv = updatedConversations[0];\n                setCurrentConversationId(firstConv.id);\n                setMessages(firstConv.history || []);\n            } else {\n                // If all conversations are deleted, create a new default one.\n                const newId = Date.now();\n                const newConv = { id: newId, name: '对话 1', history: [] };\n                setConversations([newConv]);\n                setCurrentConversationId(newId);\n                setMessages([]);\n            }\n        }\n    };\n\n\n\n    const handleSend = async () => {\n        if (input.trim() === '' || isWaitingForResponse) return;\n        \n        const requestStartTime = Date.now();\n        const requestId = `frontend_${requestStartTime}_${Math.random().toString(36).substr(2, 9)}`;\n        \n        logger.info(`[${requestId}] 开始处理用户发送请求`, {\n            userInput: input,\n            inputLength: input.length,\n            conversationId: currentConversationId,\n            currentMessagesCount: messages.length,\n            settings: settings,\n            constraints: constraints\n        });\n        \n        const userMessage = { \n            id: Date.now(),\n            text: input, \n            sender: 'user',\n            timestamp: new Date()\n        };\n        setMessages(prevMessages => [...prevMessages, userMessage]);\n        const userInput = input;\n        setInput('');\n        setIsWaitingForResponse(true);\n        setIsGenerating(true);\n        setServerError(null);\n\n        try {\n            // 准备聊天历史\n            const newChatHistory = [\n                ...chatHistory,\n                { role: 'user', content: userInput }\n            ];\n\n            logger.info(`[${requestId}] 准备发送到后端`, {\n                chatHistoryLength: newChatHistory.length,\n                lastUserMessage: userInput,\n                settingsUsed: settings\n            });\n\n            // 创建初始的掩码消息\n            const initialTokens = Array(settings.gen_length).fill(null).map((_, index) => ({\n                id: index,\n                char: '[MASK]',\n                confidence: 0,\n                color: '#444444',\n                isGenerated: false\n            }));\n\n            const botMessage = {\n                id: Date.now() + 1,\n                text: '',\n                sender: 'bot',\n                timestamp: new Date(),\n                tokens: initialTokens,\n                isGenerated: false\n            };\n\n            setMessages(prevMessages => [...prevMessages, botMessage]);\n\n            // 调用后端API生成响应\n            const requestSettings = {\n                ...settings,\n                constraints: constraints\n            };\n\n            logger.info(`[${requestId}] 发送API请求`, {\n                endpoint: '/generate',\n                messageCount: newChatHistory.length,\n                settings: requestSettings\n            });\n\n            const response = await sendMessage(newChatHistory, requestSettings);\n            \n            if (response.error) {\n                throw new Error(response.error);\n            }\n\n            logger.info(`[${requestId}] 收到后端响应`, {\n                responseLength: response.response?.length,\n                visualizationStepsCount: response.visualization?.length,\n                backendRequestId: response.request_id,\n                backendDuration: response.duration\n            });\n\n            // 更新聊天历史\n            setChatHistory([\n                ...newChatHistory,\n                { role: 'assistant', content: response.response }\n            ]);\n\n            // 逐步显示可视化过程\n            const visualizationSteps = response.visualization || [];\n            \n            logger.info(`[${requestId}] 开始可视化处理`, {\n                visualizationStepsCount: visualizationSteps.length,\n                animationDelay: 300\n            });\n            \n            for (let stepIndex = 0; stepIndex < visualizationSteps.length; stepIndex++) {\n                const step = visualizationSteps[stepIndex];\n                const tokens = parseVisualizationState(step);\n                \n                // 更新消息中的tokens\n                setMessages(prev => prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { ...msg, tokens };\n                    }\n                    return msg;\n                }));\n                \n                // 如果不是最后一步，等待一段时间再显示下一步\n                if (stepIndex < visualizationSteps.length - 1) {\n                    await new Promise(resolve => setTimeout(resolve, 300)); // 增加延迟以便观察转换效果\n                }\n            }\n\n            // 生成完成，设置最终文本\n            setMessages(prev => {\n                const updatedMessages = prev.map(msg => {\n                    if (msg.id === botMessage.id) {\n                        return { \n                            ...msg, \n                            text: response.response,\n                            isGenerated: true \n                        };\n                    }\n                    return msg;\n                });\n                \n                // 更新当前对话\n                updateCurrentConversation(updatedMessages);\n                \n                return updatedMessages;\n            });\n\n            setConfidence(response.confidence || 0);\n            \n            const requestEndTime = Date.now();\n            const totalDuration = requestEndTime - requestStartTime;\n            \n            logger.info(`[${requestId}] 请求处理完成`, {\n                totalDuration: `${totalDuration}ms`,\n                finalResponseLength: response.response.length,\n                conversationUpdated: true\n            });\n            \n        } catch (error) {\n            const requestEndTime = Date.now();\n            const totalDuration = requestEndTime - requestStartTime;\n            \n            logger.error(`[${requestId}] 发送消息失败`, {\n                errorMessage: error.message,\n                errorType: error.name,\n                errorStack: error.stack,\n                totalDuration: `${totalDuration}ms`,\n                userInput: userInput,\n                settings: settings,\n                conversationId: currentConversationId\n            });\n            \n            const errorMessage = { \n                id: Date.now() + 2,\n                text: '发送消息时出错: ' + (error.message || '未知错误'), \n                sender: 'bot',\n                timestamp: new Date()\n            };\n            setMessages(prevMessages => prevMessages.slice(0, -1).concat([errorMessage]));\n            setServerError(error.message || '服务器连接失败');\n        } finally {\n            setIsWaitingForResponse(false);\n            setIsGenerating(false);\n            \n            logger.debug(`[${requestId}] 请求状态重置完成`);\n        }\n    };\n\n\n    // 辅助函数：更新当前对话\n    const updateCurrentConversation = (updatedMessages, finalChatHistory) => {\n        // 更新当前对话的历史\n        setConversations(prev => {\n            return prev.map(conv => {\n                if (conv.id === currentConversationId) {\n                    return { ...conv, history: updatedMessages };\n                }\n                return conv;\n            });\n        });\n    };\n\n    // 解析可视化状态\n    const parseVisualizationState = (step) => {\n        if (!step || !Array.isArray(step)) {\n            return [];\n        }\n\n        return step.map((tokenData, index) => {\n            // tokenData是 [token_text, color] 的格式\n            const [tokenText, color] = tokenData;\n            \n            return {\n                id: index,\n                char: tokenText,\n                confidence: getConfidenceFromColor(color),\n                color: color,\n                isGenerated: tokenText !== '[MASK]'\n            };\n        });\n    };\n\n    // 从颜色推断置信度（与app.py保持一致）\n    const getConfidenceFromColor = (color) => {\n        switch (color) {\n            case '#444444': return 0;     // [MASK] - 深灰色\n            case '#FF6666': return 0.2;   // 低置信度 - 红色\n            case '#FFAA33': return 0.5;   // 中置信度 - 橙色\n            case '#66CC66': return 0.8;   // 高置信度 - 绿色\n            case '#6699CC': return 1.0;   // 之前生成的token - 蓝色\n            default: return 0.5;\n        }\n    };\n\n    // 获取置信度颜色（与app.py保持一致）\n    const getColorFromConfidence = (confidence) => {\n        if (confidence < 0.3) return '#FF6666'; // 低置信度：红色\n        if (confidence < 0.7) return '#FFAA33'; // 中置信度：橙色\n        return '#66CC66';                       // 高置信度：绿色\n    };\n\n    // 处理按键按下事件\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSend();\n        }\n    };\n\n    // 检查服务器状态\n    useEffect(() => {\n        const checkStatus = async () => {\n            try {\n                const status = await getStatus();\n                setServerError(null);\n                setSystemStatus({\n                    backendConnected: true,\n                    device: status.device || 'Unknown',\n                    modelLoaded: true,\n                    lastCheck: new Date()\n                });\n            } catch (error) {\n                setServerError('服务器连接失败');\n                setSystemStatus({\n                    backendConnected: false,\n                    device: 'Unknown',\n                    modelLoaded: false,\n                    lastCheck: new Date()\n                });\n            }\n        };\n\n        checkStatus();\n        const interval = setInterval(checkStatus, 30000); // 每30秒检查一次\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"diffusion-model\">\n            <Sidebar\n                conversations={conversations}\n                activeConversationId={currentConversationId}\n                onNewConversation={handleNewConversation}\n                onSelectConversation={handleSwitchConversation}\n                onDeleteConversation={handleDeleteConversation}\n                systemStatus={systemStatus}\n                isGenerating={isGenerating}\n            />\n            <div className=\"main-content\">\n                <div className=\"chat-container\">\n                    <MessageList \n                        messages={messages} \n                        isGenerating={isGenerating}\n                        serverError={serverError}\n                        getConfidenceColor={getColorFromConfidence}\n                        formatTime={(timestamp) => new Date(timestamp).toLocaleTimeString()}\n                        messagesEndRef={messagesEndRef}\n                    />\n                    <div className=\"input-area-container\">\n                        <InputArea \n                            inputValue={input}\n                            setInputValue={setInput}\n                            constraints={constraints}\n                            setConstraints={setConstraints}\n                            handleSend={handleSend}\n                            handleKeyPress={handleKeyPress}\n                            isGenerating={isGenerating}\n                        />\n                    </div>\n                </div>\n            </div>\n            \n            {/* 右侧设置边栏 - 模型设置和置信度颜色说明 */}\n            <div className=\"settings-sidebar\">\n                <div className=\"settings-section\">\n                    <h3>模型设置</h3>\n                    <SettingsPanel \n                        settings={settings}\n                        setSettings={setSettings}\n                        isGenerating={isGenerating}\n                    />\n                </div>\n                \n                <div className=\"confidence-section\">\n                    <ConfidenceIndicator />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DiffusionModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}