{"ast":null,"code":"import axios from 'axios';\n\n// 后端API基础URL\nconst API_BASE_URL = 'http://localhost:5000';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  // 60秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  console.log('发送请求:', config);\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('收到响应:', response);\n  return response;\n}, error => {\n  console.error('响应错误:', error);\n  return Promise.reject(error);\n});\n\n// 生成文本的API调用\nexport const generateText = async (messages, settings = {}) => {\n  try {\n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    return response.data;\n  } catch (error) {\n    console.error('生成文本时出错:', error);\n    throw error;\n  }\n};\n\n// sendMessage function to call the /generate endpoint\nexport const sendMessage = async (messages, settings = {}) => {\n  try {\n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\n// 检查服务器状态\nexport const checkServerStatus = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('服务器状态检查失败:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","console","log","error","Promise","reject","response","generateText","messages","settings","post","data","sendMessage","checkServerStatus","get"],"sources":["/root/LLaDA-main/lldm/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// 后端API基础URL\nconst API_BASE_URL = 'http://localhost:5000';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000, // 60秒超时\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    console.log('发送请求:', config);\n    return config;\n  },\n  (error) => {\n    console.error('请求错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    console.log('收到响应:', response);\n    return response;\n  },\n  (error) => {\n    console.error('响应错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 生成文本的API调用\nexport const generateText = async (messages, settings = {}) => {\n  try {\n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    return response.data;\n  } catch (error) {\n    console.error('生成文本时出错:', error);\n    throw error;\n  }\n};\n\n// sendMessage function to call the /generate endpoint\nexport const sendMessage = async (messages, settings = {}) => {\n  try {\n    const response = await api.post('/generate', {\n      messages,\n      settings\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\n// 检查服务器状态\nexport const checkServerStatus = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('服务器状态检查失败:', error);\n    throw error;\n  }\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACVC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,MAAM,CAAC;EAC5B,OAAOA,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACTF,OAAO,CAACE,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACK,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAK;EACZL,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEI,QAAQ,CAAC;EAC9B,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTF,OAAO,CAACE,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,GAAG,CAAC,CAAC,KAAK;EAC7D,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMd,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAE;MAC3CF,QAAQ;MACRC;IACF,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAOJ,QAAQ,EAAEC,QAAQ,GAAG,CAAC,CAAC,KAAK;EAC5D,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMd,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAE;MAC3CF,QAAQ;MACRC;IACF,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMd,GAAG,CAACsB,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOR,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}